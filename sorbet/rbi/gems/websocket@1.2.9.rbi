# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `websocket` gem.
# Please instead update this file by running `bin/tapioca gem websocket`.

# source://websocket//lib/websocket.rb#8
module WebSocket
  class << self
    # source://websocket//lib/websocket.rb#20
    def max_frame_size; end

    # source://websocket//lib/websocket.rb#25
    def max_frame_size=(val); end

    # source://websocket//lib/websocket.rb#31
    def should_raise; end

    # source://websocket//lib/websocket.rb#36
    def should_raise=(val); end
  end
end

# source://websocket//lib/websocket.rb#10
WebSocket::DEFAULT_VERSION = T.let(T.unsafe(nil), Integer)

# source://websocket//lib/websocket/error.rb#4
class WebSocket::Error < ::RuntimeError; end

# source://websocket//lib/websocket/error.rb#5
class WebSocket::Error::Frame < ::WebSocket::Error; end

# source://websocket//lib/websocket/error.rb#6
class WebSocket::Error::Frame::ControlFramePayloadTooLong < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#7
  def message; end
end

# source://websocket//lib/websocket/error.rb#12
class WebSocket::Error::Frame::DataFrameInsteadContinuation < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#13
  def message; end
end

# source://websocket//lib/websocket/error.rb#18
class WebSocket::Error::Frame::FragmentedControlFrame < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#19
  def message; end
end

# source://websocket//lib/websocket/error.rb#24
class WebSocket::Error::Frame::Invalid < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#25
  def message; end
end

# source://websocket//lib/websocket/error.rb#30
class WebSocket::Error::Frame::InvalidPayloadEncoding < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#31
  def message; end
end

# source://websocket//lib/websocket/error.rb#36
class WebSocket::Error::Frame::MaskTooShort < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#37
  def message; end
end

# source://websocket//lib/websocket/error.rb#42
class WebSocket::Error::Frame::ReservedBitUsed < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#43
  def message; end
end

# source://websocket//lib/websocket/error.rb#48
class WebSocket::Error::Frame::TooLong < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#49
  def message; end
end

# source://websocket//lib/websocket/error.rb#54
class WebSocket::Error::Frame::UnexpectedContinuationFrame < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#55
  def message; end
end

# source://websocket//lib/websocket/error.rb#72
class WebSocket::Error::Frame::UnknownCloseCode < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#73
  def message; end
end

# source://websocket//lib/websocket/error.rb#60
class WebSocket::Error::Frame::UnknownFrameType < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#61
  def message; end
end

# source://websocket//lib/websocket/error.rb#66
class WebSocket::Error::Frame::UnknownOpcode < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#67
  def message; end
end

# source://websocket//lib/websocket/error.rb#78
class WebSocket::Error::Frame::UnknownVersion < ::WebSocket::Error::Frame
  # source://websocket//lib/websocket/error.rb#79
  def message; end
end

# source://websocket//lib/websocket/error.rb#85
class WebSocket::Error::Handshake < ::WebSocket::Error; end

# source://websocket//lib/websocket/error.rb#86
class WebSocket::Error::Handshake::GetRequestRequired < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#87
  def message; end
end

# source://websocket//lib/websocket/error.rb#92
class WebSocket::Error::Handshake::InvalidAuthentication < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#93
  def message; end
end

# source://websocket//lib/websocket/error.rb#98
class WebSocket::Error::Handshake::InvalidHeader < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#99
  def message; end
end

# source://websocket//lib/websocket/error.rb#110
class WebSocket::Error::Handshake::InvalidStatusCode < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#111
  def message; end
end

# source://websocket//lib/websocket/error.rb#116
class WebSocket::Error::Handshake::NoHostProvided < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#117
  def message; end
end

# source://websocket//lib/websocket/error.rb#122
class WebSocket::Error::Handshake::UnknownVersion < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#123
  def message; end
end

# source://websocket//lib/websocket/error.rb#104
class WebSocket::Error::Handshake::UnsupportedProtocol < ::WebSocket::Error::Handshake
  # source://websocket//lib/websocket/error.rb#105
  def message; end
end

# source://websocket//lib/websocket/exception_handler.rb#4
module WebSocket::ExceptionHandler
  mixes_in_class_methods ::WebSocket::ExceptionHandler::ClassMethods

  # source://websocket//lib/websocket/exception_handler.rb#5
  def error; end

  # source://websocket//lib/websocket/exception_handler.rb#5
  def error=(_arg0); end

  class << self
    # source://websocket//lib/websocket/exception_handler.rb#7
    def included(base); end
  end
end

# source://websocket//lib/websocket/exception_handler.rb#11
module WebSocket::ExceptionHandler::ClassMethods
  # source://websocket//lib/websocket/exception_handler.rb#18
  def rescue_method(method_name, options = T.unsafe(nil)); end
end

# source://websocket//lib/websocket/frame.rb#4
module WebSocket::Frame; end

# source://websocket//lib/websocket/frame/base.rb#6
class WebSocket::Frame::Base
  include ::WebSocket::ExceptionHandler
  include ::WebSocket::NiceInspect
  extend ::WebSocket::ExceptionHandler::ClassMethods

  # source://websocket//lib/websocket/exception_handler.rb#19
  def initialize(*args); end

  # source://websocket//lib/websocket/frame/base.rb#11
  def code; end

  # source://websocket//lib/websocket/frame/base.rb#11
  def code=(_arg0); end

  # source://websocket//lib/websocket/frame/base.rb#11
  def data; end

  # source://websocket//lib/websocket/frame/base.rb#11
  def data=(_arg0); end

  # source://websocket//lib/websocket/frame/base.rb#10
  def error; end

  # source://websocket//lib/websocket/frame/base.rb#31
  def error?; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def initialize_with_rescue(*args); end

  # source://websocket//lib/websocket/frame/base.rb#36
  def support_type?; end

  # source://websocket//lib/websocket/frame/base.rb#41
  def supported_frames; end

  # source://websocket//lib/websocket/frame/base.rb#10
  def type; end

  # source://websocket//lib/websocket/frame/base.rb#10
  def version; end

  private

  # source://websocket//lib/websocket/frame/base.rb#49
  def include_version; end

  # source://websocket//lib/websocket/frame/base.rb#19
  def initialize_without_rescue(args = T.unsafe(nil)); end
end

# source://websocket//lib/websocket/frame/data.rb#5
class WebSocket::Frame::Data < ::String
  # source://websocket//lib/websocket/frame/data.rb#6
  def initialize(*args); end

  # source://websocket//lib/websocket/frame/data.rb#11
  def <<(*args); end

  # source://websocket//lib/websocket/frame/data.rb#16
  def convert_args(args); end

  # source://websocket//lib/websocket/frame/data.rb#32
  def getbytes(start_index, count); end

  # source://websocket//lib/websocket/frame/data.rb#39
  def mask(payload, mask); end

  # source://websocket//lib/websocket/frame/data.rb#21
  def set_mask; end

  # source://websocket//lib/websocket/frame/data.rb#27
  def unset_mask; end
end

# source://websocket//lib/websocket/frame/handler.rb#5
module WebSocket::Frame::Handler; end

# source://websocket//lib/websocket/frame/handler/base.rb#6
class WebSocket::Frame::Handler::Base
  # source://websocket//lib/websocket/frame/handler/base.rb#7
  def initialize(frame); end

  # source://websocket//lib/websocket/frame/handler/base.rb#19
  def decode_frame; end

  # source://websocket//lib/websocket/frame/handler/base.rb#13
  def encode_frame; end

  private

  # source://websocket//lib/websocket/frame/handler/base.rb#28
  def control_frame?(frame_type); end

  # source://websocket//lib/websocket/frame/handler/base.rb#35
  def data_frame?(frame_type); end
end

# source://websocket//lib/websocket/frame/handler/handler03.rb#9
class WebSocket::Frame::Handler::Handler03 < ::WebSocket::Frame::Handler::Base
  # source://websocket//lib/websocket/frame/handler/handler03.rb#23
  def initialize(frame); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#48
  def decode_frame; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#34
  def encode_frame; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#68
  def masking?; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#29
  def supported_frames; end

  private

  # source://websocket//lib/websocket/frame/handler/handler03.rb#138
  def buffer_exists?(buffer_number); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#205
  def decode_continuation_frame(application_data, frame_type); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#211
  def decode_finish_continuation_frame(application_data); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#142
  def decode_first_byte; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#118
  def decode_header; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#188
  def decode_payload(payload_length, mask); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#169
  def decode_payload_length(length); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#156
  def decode_second_byte(frame_type); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#95
  def encode_header; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#104
  def encode_payload_length(length, mask); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#75
  def fin; end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#91
  def opcode_to_type(opcode); end

  # source://websocket//lib/websocket/frame/handler/handler03.rb#83
  def type_to_opcode(frame_type); end
end

# source://websocket//lib/websocket/frame/handler/handler03.rb#11
WebSocket::Frame::Handler::Handler03::FRAME_TYPES = T.let(T.unsafe(nil), Hash)

# source://websocket//lib/websocket/frame/handler/handler03.rb#21
WebSocket::Frame::Handler::Handler03::FRAME_TYPES_INVERSE = T.let(T.unsafe(nil), Hash)

# source://websocket//lib/websocket/frame/handler/handler04.rb#7
class WebSocket::Frame::Handler::Handler04 < ::WebSocket::Frame::Handler::Handler03
  private

  # source://websocket//lib/websocket/frame/handler/handler04.rb#12
  def fin; end
end

# source://websocket//lib/websocket/frame/handler/handler05.rb#7
class WebSocket::Frame::Handler::Handler05 < ::WebSocket::Frame::Handler::Handler04
  # source://websocket//lib/websocket/frame/handler/handler05.rb#9
  def masking?; end
end

# source://websocket//lib/websocket/frame/handler/handler07.rb#7
class WebSocket::Frame::Handler::Handler07 < ::WebSocket::Frame::Handler::Handler05
  # source://websocket//lib/websocket/frame/handler/handler07.rb#31
  def decode_frame; end

  # source://websocket//lib/websocket/frame/handler/handler07.rb#21
  def encode_frame; end

  private

  # source://websocket//lib/websocket/frame/handler/handler07.rb#56
  def close_code?(frame); end

  # source://websocket//lib/websocket/frame/handler/handler07.rb#72
  def opcode_to_type(opcode); end

  # source://websocket//lib/websocket/frame/handler/handler07.rb#64
  def type_to_opcode(frame_type); end

  # source://websocket//lib/websocket/frame/handler/handler07.rb#44
  def valid_code?(code); end

  # source://websocket//lib/websocket/frame/handler/handler07.rb#48
  def valid_encoding?(data); end
end

# source://websocket//lib/websocket/frame/handler/handler07.rb#9
WebSocket::Frame::Handler::Handler07::FRAME_TYPES = T.let(T.unsafe(nil), Hash)

# source://websocket//lib/websocket/frame/handler/handler07.rb#19
WebSocket::Frame::Handler::Handler07::FRAME_TYPES_INVERSE = T.let(T.unsafe(nil), Hash)

# source://websocket//lib/websocket/frame/handler/handler75.rb#7
class WebSocket::Frame::Handler::Handler75 < ::WebSocket::Frame::Handler::Base
  # source://websocket//lib/websocket/frame/handler/handler75.rb#26
  def decode_frame; end

  # source://websocket//lib/websocket/frame/handler/handler75.rb#14
  def encode_frame; end

  # source://websocket//lib/websocket/frame/handler/handler75.rb#9
  def supported_frames; end
end

# source://websocket//lib/websocket/frame/incoming.rb#13
class WebSocket::Frame::Incoming < ::WebSocket::Frame::Base
  # source://websocket//lib/websocket/frame/incoming.rb#17
  def initialize(args = T.unsafe(nil)); end

  # source://websocket//lib/websocket/frame/incoming.rb#32
  def <<(data); end

  # source://websocket//lib/websocket/frame/incoming.rb#26
  def decoded?; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def next(*args); end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def next_with_rescue(*args); end

  # source://websocket//lib/websocket/frame/incoming.rb#40
  def next_without_rescue; end

  # source://websocket//lib/websocket/frame/incoming.rb#47
  def to_s; end
end

# source://websocket//lib/websocket/frame/incoming/client.rb#6
class WebSocket::Frame::Incoming::Client < ::WebSocket::Frame::Incoming
  # source://websocket//lib/websocket/frame/incoming/client.rb#7
  def incoming_masking?; end

  # source://websocket//lib/websocket/frame/incoming/client.rb#11
  def outgoing_masking?; end
end

# source://websocket//lib/websocket/frame/incoming/server.rb#6
class WebSocket::Frame::Incoming::Server < ::WebSocket::Frame::Incoming
  # source://websocket//lib/websocket/frame/incoming/server.rb#7
  def incoming_masking?; end

  # source://websocket//lib/websocket/frame/incoming/server.rb#11
  def outgoing_masking?; end
end

# source://websocket//lib/websocket/frame/outgoing.rb#11
class WebSocket::Frame::Outgoing < ::WebSocket::Frame::Base
  # source://websocket//lib/websocket/frame/outgoing.rb#23
  def require_sending?; end

  # source://websocket//lib/websocket/frame/outgoing.rb#17
  def supported?; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def to_s(*args); end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def to_s_with_rescue(*args); end

  # source://websocket//lib/websocket/frame/outgoing.rb#28
  def to_s_without_rescue; end
end

# source://websocket//lib/websocket/frame/outgoing/client.rb#6
class WebSocket::Frame::Outgoing::Client < ::WebSocket::Frame::Outgoing
  # source://websocket//lib/websocket/frame/outgoing/client.rb#7
  def incoming_masking?; end

  # source://websocket//lib/websocket/frame/outgoing/client.rb#11
  def outgoing_masking?; end
end

# source://websocket//lib/websocket/frame/outgoing/server.rb#6
class WebSocket::Frame::Outgoing::Server < ::WebSocket::Frame::Outgoing
  # source://websocket//lib/websocket/frame/outgoing/server.rb#7
  def incoming_masking?; end

  # source://websocket//lib/websocket/frame/outgoing/server.rb#11
  def outgoing_masking?; end
end

# source://websocket//lib/websocket/handshake.rb#4
module WebSocket::Handshake; end

# source://websocket//lib/websocket/handshake/base.rb#6
class WebSocket::Handshake::Base
  include ::WebSocket::ExceptionHandler
  include ::WebSocket::NiceInspect
  extend ::WebSocket::ExceptionHandler::ClassMethods

  # source://websocket//lib/websocket/handshake/base.rb#15
  def initialize(args = T.unsafe(nil)); end

  # source://websocket//lib/websocket/handshake/base.rb#34
  def <<(data); end

  # source://websocket//lib/websocket/handshake/base.rb#47
  def finished?; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def headers; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def host; end

  # source://websocket//lib/websocket/handshake/base.rb#65
  def leftovers; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def path; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def port; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def protocols; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def query; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def secure; end

  # source://websocket//lib/websocket/handshake/base.rb#59
  def should_respond?; end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def state; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def to_s(*args); end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def to_s_with_rescue(*args); end

  # source://websocket//lib/websocket/handshake/base.rb#40
  def to_s_without_rescue; end

  # source://websocket//lib/websocket/handshake/base.rb#73
  def uri; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def valid?(*args); end

  # source://websocket//lib/websocket/handshake/base.rb#10
  def version; end

  private

  # source://websocket//lib/websocket/handshake/base.rb#92
  def error=(message); end

  # source://websocket//lib/websocket/handshake/base.rb#101
  def parse_data; end

  # source://websocket//lib/websocket/handshake/base.rb#86
  def reserved_leftover_lines; end
end

# source://websocket//lib/websocket/handshake/base.rb#97
WebSocket::Handshake::Base::HEADER = T.let(T.unsafe(nil), Regexp)

# source://websocket//lib/websocket/handshake/client.rb#36
class WebSocket::Handshake::Client < ::WebSocket::Handshake::Base
  # source://websocket//lib/websocket/exception_handler.rb#19
  def initialize(*args); end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def <<(*args); end

  # source://websocket//lib/websocket/handshake/client.rb#37
  def headers; end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def initialize_with_rescue(*args); end

  # source://websocket//lib/websocket/handshake/client.rb#37
  def origin; end

  # source://websocket//lib/websocket/handshake/client.rb#98
  def should_respond?; end

  private

  # source://websocket//lib/websocket/handshake/client.rb#106
  def include_version; end

  # source://websocket//lib/websocket/handshake/client.rb#57
  def initialize_without_rescue(args = T.unsafe(nil)); end

  # source://websocket//lib/websocket/handshake/client.rb#122
  def parse_first_line(line); end
end

# source://websocket//lib/websocket/handshake/client.rb#117
WebSocket::Handshake::Client::FIRST_LINE = T.let(T.unsafe(nil), Regexp)

# source://websocket//lib/websocket/handshake/handler.rb#5
module WebSocket::Handshake::Handler; end

# source://websocket//lib/websocket/handshake/handler/base.rb#7
class WebSocket::Handshake::Handler::Base
  # source://websocket//lib/websocket/handshake/handler/base.rb#8
  def initialize(handshake); end

  # source://websocket//lib/websocket/handshake/handler/base.rb#13
  def to_s; end

  # source://websocket//lib/websocket/handshake/handler/base.rb#23
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/base.rb#43
  def finishing_line; end

  # source://websocket//lib/websocket/handshake/handler/base.rb#37
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/base.rb#31
  def header_line; end
end

# source://websocket//lib/websocket/handshake/handler/client.rb#6
class WebSocket::Handshake::Handler::Client < ::WebSocket::Handshake::Handler::Base
  private

  # source://websocket//lib/websocket/handshake/handler/client.rb#17
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/client.rb#10
  def header_line; end

  # source://websocket//lib/websocket/handshake/handler/client.rb#23
  def verify_protocol; end
end

# source://websocket//lib/websocket/handshake/handler/client01.rb#8
class WebSocket::Handshake::Handler::Client01 < ::WebSocket::Handshake::Handler::Client76
  private

  # source://websocket//lib/websocket/handshake/handler/client01.rb#12
  def handshake_keys; end
end

# source://websocket//lib/websocket/handshake/handler/client04.rb#9
class WebSocket::Handshake::Handler::Client04 < ::WebSocket::Handshake::Handler::Client
  # source://websocket//lib/websocket/handshake/handler/client04.rb#11
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/client04.rb#42
  def accept; end

  # source://websocket//lib/websocket/handshake/handler/client04.rb#18
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/client04.rb#36
  def key; end

  # source://websocket//lib/websocket/handshake/handler/client04.rb#57
  def provided_protocols; end

  # source://websocket//lib/websocket/handshake/handler/client04.rb#53
  def supported_protocols; end

  # source://websocket//lib/websocket/handshake/handler/client04.rb#48
  def verify_accept; end
end

# source://websocket//lib/websocket/handshake/handler/client11.rb#6
class WebSocket::Handshake::Handler::Client11 < ::WebSocket::Handshake::Handler::Client04
  private

  # source://websocket//lib/websocket/handshake/handler/client11.rb#10
  def handshake_keys; end
end

# source://websocket//lib/websocket/handshake/handler/client75.rb#6
class WebSocket::Handshake::Handler::Client75 < ::WebSocket::Handshake::Handler::Client
  # source://websocket//lib/websocket/handshake/handler/client75.rb#8
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/client75.rb#15
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/client75.rb#33
  def provided_protocols; end

  # source://websocket//lib/websocket/handshake/handler/client75.rb#29
  def supported_protocols; end
end

# source://websocket//lib/websocket/handshake/handler/client76.rb#8
class WebSocket::Handshake::Handler::Client76 < ::WebSocket::Handshake::Handler::Client75
  # source://websocket//lib/websocket/handshake/handler/client76.rb#10
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/client76.rb#54
  def challenge; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#30
  def finishing_line; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#76
  def generate_key(key); end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#95
  def generate_key3; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#22
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#36
  def key1; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#42
  def key2; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#48
  def key3; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#99
  def provided_protocols; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#17
  def reserved_leftover_lines; end

  # source://websocket//lib/websocket/handshake/handler/client76.rb#66
  def verify_challenge; end
end

# source://websocket//lib/websocket/handshake/handler/client76.rb#71
WebSocket::Handshake::Handler::Client76::NOISE_CHARS = T.let(T.unsafe(nil), Array)

# source://websocket//lib/websocket/handshake/handler/server.rb#6
class WebSocket::Handshake::Handler::Server < ::WebSocket::Handshake::Handler::Base; end

# source://websocket//lib/websocket/handshake/handler/server04.rb#9
class WebSocket::Handshake::Handler::Server04 < ::WebSocket::Handshake::Handler::Server
  # source://websocket//lib/websocket/handshake/handler/server04.rb#11
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/server04.rb#23
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/server04.rb#18
  def header_line; end

  # source://websocket//lib/websocket/handshake/handler/server04.rb#44
  def key; end

  # source://websocket//lib/websocket/handshake/handler/server04.rb#48
  def protocol; end

  # source://websocket//lib/websocket/handshake/handler/server04.rb#33
  def signature; end

  # source://websocket//lib/websocket/handshake/handler/server04.rb#39
  def verify_key; end
end

# source://websocket//lib/websocket/handshake/handler/server75.rb#6
class WebSocket::Handshake::Handler::Server75 < ::WebSocket::Handshake::Handler::Server
  private

  # source://websocket//lib/websocket/handshake/handler/server75.rb#23
  def handshake_keys; end

  # source://websocket//lib/websocket/handshake/handler/server75.rb#18
  def header_line; end

  # source://websocket//lib/websocket/handshake/handler/server75.rb#9
  def headers; end

  # source://websocket//lib/websocket/handshake/handler/server75.rb#32
  def protocol; end
end

# source://websocket//lib/websocket/handshake/handler/server76.rb#8
class WebSocket::Handshake::Handler::Server76 < ::WebSocket::Handshake::Handler::Server75
  # source://websocket//lib/websocket/handshake/handler/server76.rb#10
  def valid?; end

  private

  # source://websocket//lib/websocket/handshake/handler/server76.rb#41
  def challenge_response; end

  # source://websocket//lib/websocket/handshake/handler/server76.rb#35
  def finishing_line; end

  # source://websocket//lib/websocket/handshake/handler/server76.rb#30
  def header_line; end

  # source://websocket//lib/websocket/handshake/handler/server76.rb#16
  def headers; end

  # source://websocket//lib/websocket/handshake/handler/server76.rb#56
  def numbers_over_spaces(string); end

  # source://websocket//lib/websocket/handshake/handler/server76.rb#25
  def reserved_leftover_lines; end
end

# source://websocket//lib/websocket/handshake/server.rb#34
class WebSocket::Handshake::Server < ::WebSocket::Handshake::Base
  # source://websocket//lib/websocket/handshake/server.rb#44
  def initialize(args = T.unsafe(nil)); end

  # source://websocket//lib/websocket/exception_handler.rb#19
  def <<(*args); end

  # source://websocket//lib/websocket/handshake/server.rb#113
  def from_hash(hash); end

  # source://websocket//lib/websocket/handshake/server.rb#75
  def from_rack(env); end

  # source://websocket//lib/websocket/handshake/server.rb#131
  def host; end

  # source://websocket//lib/websocket/handshake/server.rb#137
  def port; end

  # source://websocket//lib/websocket/handshake/server.rb#125
  def should_respond?; end

  private

  # source://websocket//lib/websocket/handshake/server.rb#154
  def include_version; end

  # source://websocket//lib/websocket/handshake/server.rb#168
  def parse_first_line(line); end

  # source://websocket//lib/websocket/handshake/server.rb#144
  def set_version; end
end

# source://websocket//lib/websocket/handshake/server.rb#163
WebSocket::Handshake::Server::PATH = T.let(T.unsafe(nil), Regexp)

module WebSocket::Mask
  class << self
    def mask(_arg0, _arg1); end
  end
end

# source://websocket//lib/websocket/nice_inspect.rb#4
module WebSocket::NiceInspect
  # source://websocket//lib/websocket/nice_inspect.rb#6
  def inspect; end
end

# source://websocket//lib/websocket.rb#11
WebSocket::ROOT = T.let(T.unsafe(nil), String)
