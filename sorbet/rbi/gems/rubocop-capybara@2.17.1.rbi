# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-capybara` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-capybara`.

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#3
module RuboCop; end

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#4
module RuboCop::Cop; end

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#5
module RuboCop::Cop::Capybara; end

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#7
module RuboCop::Cop::Capybara::CapybaraHelp
  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#60
  def common_attributes?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#124
  def include_option?(node, option); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#69
  def replaceable_attributes?(attrs); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#107
  def replaceable_element?(node, element, attrs); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#44
  def replaceable_option?(node, locator, element); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#84
  def replaceable_pseudo_class?(pseudo_class, locator); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#95
  def replaceable_pseudo_class_not?(locator); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#75
  def replaceable_pseudo_classes?(locator); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#117
  def replaceable_to_link?(node, attrs); end

  class << self
    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#60
    def common_attributes?(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#124
    def include_option?(node, option); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#69
    def replaceable_attributes?(attrs); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#107
    def replaceable_element?(node, element, attrs); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#44
    def replaceable_option?(node, locator, element); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#84
    def replaceable_pseudo_class?(pseudo_class, locator); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#95
    def replaceable_pseudo_class_not?(locator); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#75
    def replaceable_pseudo_classes?(locator); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#117
    def replaceable_to_link?(node, attrs); end
  end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#8
RuboCop::Cop::Capybara::CapybaraHelp::COMMON_OPTIONS = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#11
RuboCop::Cop::Capybara::CapybaraHelp::SPECIFIC_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/capybara_help.rb#34
RuboCop::Cop::Capybara::CapybaraHelp::SPECIFIC_PSEUDO_CLASSES = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#7
module RuboCop::Cop::Capybara::CssSelector
  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#47
  def attribute?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#57
  def attributes(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#38
  def classes(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#16
  def id(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#27
  def id?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#87
  def multiple_selectors?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#99
  def normalize_value(value); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#73
  def pseudo_classes(selector); end

  class << self
    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#47
    def attribute?(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#57
    def attributes(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#38
    def classes(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#16
    def id(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#27
    def id?(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#87
    def multiple_selectors?(selector); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#99
    def normalize_value(value); end

    # source://rubocop-capybara//lib/rubocop/cop/capybara/mixin/css_selector.rb#73
    def pseudo_classes(selector); end
  end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#31
class RuboCop::Cop::Capybara::CurrentPathExpectation < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#47
  def as_is_matcher(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#41
  def expectation_set_on_current_path(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#64
  def on_send(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#54
  def regexp_node_matcher(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#118
  def add_ignore_query_options(corrector, node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#76
  def autocorrect(corrector, node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#100
  def convert_regexp_node_to_literal(corrector, matcher_node, regexp_node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#106
  def regexp_node_to_regexp_expr(regexp_node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#87
  def rewrite_expectation(corrector, node, to_symbol, matcher_node); end

  class << self
    # source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#60
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#34
RuboCop::Cop::Capybara::CurrentPathExpectation::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/current_path_expectation.rb#38
RuboCop::Cop::Capybara::CurrentPathExpectation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#31
class RuboCop::Cop::Capybara::MatchStyle < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#42
  def on_send(node); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#52
  def message(node); end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#34
RuboCop::Cop::Capybara::MatchStyle::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#36
RuboCop::Cop::Capybara::MatchStyle::PREFERRED_METHOD = T.let(T.unsafe(nil), Hash)

# source://rubocop-capybara//lib/rubocop/cop/capybara/match_style.rb#35
RuboCop::Cop::Capybara::MatchStyle::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#26
class RuboCop::Cop::Capybara::NegationMatcher < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#50
  def have_no?(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#44
  def not_to?(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#55
  def on_send(node); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#78
  def message(matcher); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#69
  def offense?(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#74
  def offense_range(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#93
  def replaced_matcher(matcher); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#84
  def replaced_runner; end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#31
RuboCop::Cop::Capybara::NegationMatcher::CAPYBARA_MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#30
RuboCop::Cop::Capybara::NegationMatcher::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#38
RuboCop::Cop::Capybara::NegationMatcher::NEGATIVE_MATCHERS = T.let(T.unsafe(nil), Set)

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#36
RuboCop::Cop::Capybara::NegationMatcher::POSITIVE_MATCHERS = T.let(T.unsafe(nil), Set)

# source://rubocop-capybara//lib/rubocop/cop/capybara/negation_matcher.rb#41
RuboCop::Cop::Capybara::NegationMatcher::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#22
class RuboCop::Cop::Capybara::SpecificActions < ::RuboCop::Cop::Base
  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#31
  def click_on_selector(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#35
  def on_send(node); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#87
  def good_action(action); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#73
  def last_selector(arg); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#81
  def message(action, selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#77
  def offense_range(node, receiver); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#57
  def replaceable?(node, arg, action); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#63
  def replaceable_attributes?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#53
  def specific_action(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#69
  def supported_selector?(selector); end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#23
RuboCop::Cop::Capybara::SpecificActions::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#24
RuboCop::Cop::Capybara::SpecificActions::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_actions.rb#25
RuboCop::Cop::Capybara::SpecificActions::SPECIFIC_ACTION = T.let(T.unsafe(nil), Hash)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#17
class RuboCop::Cop::Capybara::SpecificFinders < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#31
  def class_options(param0); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#26
  def find_argument(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#35
  def on_send(node); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#89
  def append_options(classes, options); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#63
  def attribute?(arg); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#79
  def autocorrect_classes(corrector, node, classes); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#116
  def end_pos(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#94
  def keyword_argument_class(classes); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#112
  def offense_range(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#47
  def on_attr(node, arg); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#55
  def on_id(node, arg); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#68
  def register_offense(node, id, classes = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#99
  def replaced_arguments(arg, id); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#104
  def to_options(attrs); end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#22
RuboCop::Cop::Capybara::SpecificFinders::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_finders.rb#23
RuboCop::Cop::Capybara::SpecificFinders::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#28
class RuboCop::Cop::Capybara::SpecificMatcher < ::RuboCop::Cop::Base
  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#41
  def first_argument(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#45
  def on_send(node); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#80
  def good_matcher(node, matcher); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#74
  def message(node, matcher); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#62
  def replaceable?(node, arg, matcher); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#68
  def replaceable_attributes?(selector); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#57
  def specific_matcher(arg); end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#29
RuboCop::Cop::Capybara::SpecificMatcher::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#30
RuboCop::Cop::Capybara::SpecificMatcher::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/specific_matcher.rb#32
RuboCop::Cop::Capybara::SpecificMatcher::SPECIFIC_MATCHER = T.let(T.unsafe(nil), Hash)

# source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#28
class RuboCop::Cop::Capybara::VisibilityMatcher < ::RuboCop::Cop::Base
  # source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#58
  def on_send(node); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#54
  def visible_false?(param0 = T.unsafe(nil)); end

  # source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#49
  def visible_true?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#65
  def capybara_matcher?(method_name); end
end

# source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#31
RuboCop::Cop::Capybara::VisibilityMatcher::CAPYBARA_MATCHER_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#29
RuboCop::Cop::Capybara::VisibilityMatcher::MSG_FALSE = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#30
RuboCop::Cop::Capybara::VisibilityMatcher::MSG_TRUE = T.let(T.unsafe(nil), String)

# source://rubocop-capybara//lib/rubocop/cop/capybara/visibility_matcher.rb#46
RuboCop::Cop::Capybara::VisibilityMatcher::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

module RuboCop::Cop::Style; end

class RuboCop::Cop::Style::TrailingCommaInArguments < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::RangeHelp

  # source://rubocop/1.47.0/lib/rubocop/cop/style/trailing_comma_in_arguments.rb#95
  def on_csend(node); end

  # source://rubocop/1.47.0/lib/rubocop/cop/style/trailing_comma_in_arguments.rb#95
  def on_send(node); end

  class << self
    # source://rubocop-capybara//lib/rubocop-capybara.rb#20
    def autocorrect_incompatible_with; end
  end
end
