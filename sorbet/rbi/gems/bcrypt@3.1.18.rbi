# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bcrypt` gem.
# Please instead update this file by running `bin/tapioca gem bcrypt`.

# source://bcrypt//lib/bcrypt.rb#3
module BCrypt; end

# source://bcrypt//lib/bcrypt/engine.rb#3
class BCrypt::Engine
  class << self
    # source://bcrypt//lib/bcrypt/engine.rb#122
    def autodetect_cost(salt); end

    # source://bcrypt//lib/bcrypt/engine.rb#112
    def calibrate(upper_time_limit_in_ms); end

    # source://bcrypt//lib/bcrypt/engine.rb#32
    def cost; end

    # source://bcrypt//lib/bcrypt/engine.rb#49
    def cost=(cost); end

    # source://bcrypt//lib/bcrypt/engine.rb#74
    def generate_salt(cost = T.unsafe(nil)); end

    # source://bcrypt//lib/bcrypt/engine.rb#55
    def hash_secret(secret, salt, _ = T.unsafe(nil)); end

    # source://bcrypt//lib/bcrypt/engine.rb#91
    def valid_salt?(salt); end

    # source://bcrypt//lib/bcrypt/engine.rb#96
    def valid_secret?(secret); end

    private

    def __bc_crypt(_arg0, _arg1); end
    def __bc_salt(_arg0, _arg1, _arg2); end
  end
end

# source://bcrypt//lib/bcrypt/engine.rb#5
BCrypt::Engine::DEFAULT_COST = T.let(T.unsafe(nil), Integer)

# source://bcrypt//lib/bcrypt/engine.rb#9
BCrypt::Engine::MAX_COST = T.let(T.unsafe(nil), Integer)

# source://bcrypt//lib/bcrypt/engine.rb#19
BCrypt::Engine::MAX_SALT_LENGTH = T.let(T.unsafe(nil), Integer)

# source://bcrypt//lib/bcrypt/engine.rb#17
BCrypt::Engine::MAX_SECRET_BYTESIZE = T.let(T.unsafe(nil), Integer)

# source://bcrypt//lib/bcrypt/engine.rb#7
BCrypt::Engine::MIN_COST = T.let(T.unsafe(nil), Integer)

# source://bcrypt//lib/bcrypt/error.rb#3
class BCrypt::Error < ::StandardError; end

# source://bcrypt//lib/bcrypt/error.rb#6
module BCrypt::Errors; end

# source://bcrypt//lib/bcrypt/error.rb#15
class BCrypt::Errors::InvalidCost < ::BCrypt::Error; end

# source://bcrypt//lib/bcrypt/error.rb#12
class BCrypt::Errors::InvalidHash < ::BCrypt::Error; end

# source://bcrypt//lib/bcrypt/error.rb#9
class BCrypt::Errors::InvalidSalt < ::BCrypt::Error; end

# source://bcrypt//lib/bcrypt/error.rb#18
class BCrypt::Errors::InvalidSecret < ::BCrypt::Error; end

# source://bcrypt//lib/bcrypt/password.rb#23
class BCrypt::Password < ::String
  # source://bcrypt//lib/bcrypt/password.rb#55
  def initialize(raw_hash); end

  # source://bcrypt//lib/bcrypt/password.rb#76
  def ==(secret); end

  # source://bcrypt//lib/bcrypt/password.rb#25
  def checksum; end

  # source://bcrypt//lib/bcrypt/password.rb#31
  def cost; end

  # source://bcrypt//lib/bcrypt/password.rb#76
  def is_password?(secret); end

  # source://bcrypt//lib/bcrypt/password.rb#27
  def salt; end

  # source://bcrypt//lib/bcrypt/password.rb#29
  def version; end

  private

  # source://bcrypt//lib/bcrypt/password.rb#92
  def split_hash(h); end

  # source://bcrypt//lib/bcrypt/password.rb#84
  def valid_hash?(h); end

  class << self
    # source://bcrypt//lib/bcrypt/password.rb#43
    def create(secret, options = T.unsafe(nil)); end

    # source://bcrypt//lib/bcrypt/password.rb#49
    def valid_hash?(h); end
  end
end
