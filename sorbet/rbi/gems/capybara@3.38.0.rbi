# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `capybara` gem.
# Please instead update this file by running `bin/tapioca gem capybara`.

# source://capybara//lib/capybara/session/config.rb#5
module Capybara
  extend ::Capybara::DSL

  class << self
    # source://capybara//lib/capybara.rb#389
    def HTML(html); end

    # source://capybara//lib/capybara.rb#182
    def add_selector(name, **options, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def allow_gumbo(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def allow_gumbo=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def always_include_port(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def always_include_port=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def asset_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def asset_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_label_click(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_label_click=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_reload(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_reload=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#114
    def configure; end

    # source://capybara//lib/capybara.rb#261
    def current_driver; end

    # source://capybara//lib/capybara.rb#270
    def current_driver=(name); end

    # source://capybara//lib/capybara.rb#316
    def current_session; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_driver(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_driver=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_max_wait_time(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_max_wait_time=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_normalize_ws(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_normalize_ws=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_retry_interval(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_retry_interval=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_selector(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_selector=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_set_options(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_set_options=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable_animation(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable_animation=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#204
    def drivers; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_label(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_label=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_role(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_role=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact_text(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact_text=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def ignore_hidden_elements(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def ignore_hidden_elements=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def javascript_driver(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def javascript_driver=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def match(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def match=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#261
    def mode; end

    # source://capybara//lib/capybara.rb#200
    def modify_selector(name, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def predicates_wait(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def predicates_wait=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def raise_server_errors(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def raise_server_errors=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#131
    def register_driver(name, &block); end

    # source://capybara//lib/capybara.rb#150
    def register_server(name, &block); end

    # source://capybara//lib/capybara.rb#325
    def reset!; end

    # source://capybara//lib/capybara.rb#325
    def reset_sessions!; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reuse_server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reuse_server=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#253
    def run_default_server(app, port); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_server=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def save_path(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def save_path=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_errors(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_errors=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_port(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_port=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#208
    def servers; end

    # source://capybara//lib/capybara.rb#337
    def session_name; end

    # source://capybara//lib/capybara.rb#345
    def session_name=(name); end

    # source://capybara//lib/capybara.rb#409
    def session_options; end

    # source://capybara//lib/capybara.rb#240
    def string(html); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def test_id(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def test_id=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def threadsafe(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def threadsafe=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#282
    def use_default_driver; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_html5_parsing(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_html5_parsing=(*args, **_arg1, &block); end

    # source://capybara//lib/capybara.rb#290
    def using_driver(driver); end

    # source://capybara//lib/capybara.rb#357
    def using_session(name_or_session, &block); end

    # source://capybara//lib/capybara.rb#302
    def using_wait_time(seconds); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def visible_text_only(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def visible_text_only=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def w3c_click_offset(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def w3c_click_offset=(*args, **_arg1, &block); end

    private

    # source://capybara//lib/capybara.rb#415
    def config; end

    # source://capybara//lib/capybara.rb#419
    def session_pool; end

    # source://capybara//lib/capybara.rb#425
    def specified_session; end

    # source://capybara//lib/capybara.rb#433
    def specified_session=(session); end
  end
end

# source://capybara//lib/capybara.rb#16
class Capybara::Ambiguous < ::Capybara::ElementNotFound; end

# source://capybara//lib/capybara.rb#11
class Capybara::CapybaraError < ::StandardError; end

# source://capybara//lib/capybara/config.rb#7
class Capybara::Config
  extend ::Forwardable

  # source://capybara//lib/capybara/config.rb#22
  def initialize; end

  # source://capybara//lib/capybara/config.rb#99
  def allow_gumbo; end

  # source://capybara//lib/capybara/config.rb#94
  def allow_gumbo=(val); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def always_include_port(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def always_include_port=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#14
  def app; end

  # source://capybara//lib/capybara/config.rb#14
  def app=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_host=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def asset_host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def asset_host=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def automatic_label_click(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def automatic_label_click=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def automatic_reload(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def automatic_reload=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#74
  def default_driver; end

  # source://capybara//lib/capybara/config.rb#16
  def default_driver=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_host=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_max_wait_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_max_wait_time=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_normalize_ws(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_normalize_ws=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_retry_interval(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_retry_interval=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_selector(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_selector=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_set_options(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_set_options=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#86
  def deprecate(method, alternate_method, once: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def disable_animation(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def disable_animation=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def enable_aria_label(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def enable_aria_label=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def enable_aria_role(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def enable_aria_role=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exact(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exact=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exact_text(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exact_text=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ignore_hidden_elements(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ignore_hidden_elements=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#82
  def javascript_driver; end

  # source://capybara//lib/capybara/config.rb#16
  def javascript_driver=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def match(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def match=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def predicates_wait(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def predicates_wait=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raise_server_errors(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raise_server_errors=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#15
  def reuse_server; end

  # source://capybara//lib/capybara/config.rb#27
  def reuse_server=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def run_server(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def run_server=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def save_path(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def save_path=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#43
  def server; end

  # source://capybara//lib/capybara/config.rb#59
  def server=(name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_errors(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_errors=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_host=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_port(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_port=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#15
  def session_options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def test_id(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def test_id=(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/config.rb#15
  def threadsafe; end

  # source://capybara//lib/capybara/config.rb#29
  def threadsafe=(bool); end

  # source://capybara//lib/capybara/config.rb#14
  def use_html5_parsing; end

  # source://capybara//lib/capybara/config.rb#14
  def use_html5_parsing=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def visible_text_only(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def visible_text_only=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def w3c_click_offset(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def w3c_click_offset=(*args, **_arg1, &block); end
end

# source://capybara//lib/capybara/config.rb#10
Capybara::Config::OPTIONS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/dsl.rb#6
module Capybara::DSL
  # source://capybara//lib/capybara/dsl.rb#51
  def accept_alert(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def accept_confirm(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def accept_prompt(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def all(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_all_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_any_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_current_path(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_no_current_path(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_no_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_no_text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_no_title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_none_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def assert_title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def attach_file(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def body(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def check(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def choose(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def click_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def click_link(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def click_link_or_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def click_on(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def current_host(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def current_path(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def current_scope(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def current_url(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def current_window(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def dismiss_confirm(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def dismiss_prompt(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def double_click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def evaluate_async_script(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def evaluate_script(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def execute_script(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def fill_in(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find_all(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find_by_id(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find_field(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def find_link(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def first(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def go_back(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def go_forward(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_button?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_checked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_content?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_css?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_current_path?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_link?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_button?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_checked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_content?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_css?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_current_path?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_link?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_select?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_selector?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_table?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_text?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_title?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_unchecked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_no_xpath?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_select?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_selector?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_table?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_text?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_title?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_unchecked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def has_xpath?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def html(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def open_new_window(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#45
  def page; end

  # source://capybara//lib/capybara/dsl.rb#51
  def query(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def refresh(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def refute_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def reset_session!(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def response_headers(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def right_click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def save_and_open_page(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def save_and_open_screenshot(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def save_page(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def save_screenshot(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def scroll_by(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def scroll_to(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def select(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def send_keys(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def source(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def status_code(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def switch_to_frame(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def switch_to_window(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def uncheck(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def unselect(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#21
  def using_session(name_or_session, &block); end

  # source://capybara//lib/capybara/dsl.rb#27
  def using_wait_time(seconds, &block); end

  # source://capybara//lib/capybara/dsl.rb#51
  def visit(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def window_opened_by(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def windows(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within_element(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within_fieldset(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within_frame(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within_table(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/dsl.rb#51
  def within_window(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://capybara//lib/capybara/dsl.rb#12
    def extended(base); end

    # source://capybara//lib/capybara/dsl.rb#7
    def included(base); end
  end
end

# source://capybara//lib/capybara.rb#446
module Capybara::Driver; end

# source://capybara//lib/capybara/driver/base.rb#3
class Capybara::Driver::Base
  # source://capybara//lib/capybara/driver/base.rb#138
  def accept_modal(type, **options, &blk); end

  # source://capybara//lib/capybara/driver/base.rb#66
  def active_element; end

  # source://capybara//lib/capybara/driver/base.rb#108
  def close_window(handle); end

  # source://capybara//lib/capybara/driver/base.rb#6
  def current_url; end

  # source://capybara//lib/capybara/driver/base.rb#88
  def current_window_handle; end

  # source://capybara//lib/capybara/driver/base.rb#151
  def dismiss_modal(type, **options, &blk); end

  # source://capybara//lib/capybara/driver/base.rb#46
  def evaluate_async_script(script, *args); end

  # source://capybara//lib/capybara/driver/base.rb#42
  def evaluate_script(script, *args); end

  # source://capybara//lib/capybara/driver/base.rb#38
  def execute_script(script, *args); end

  # source://capybara//lib/capybara/driver/base.rb#22
  def find_css(query, **options); end

  # source://capybara//lib/capybara/driver/base.rb#18
  def find_xpath(query, **options); end

  # source://capybara//lib/capybara/driver/base.rb#78
  def frame_title; end

  # source://capybara//lib/capybara/driver/base.rb#82
  def frame_url; end

  # source://capybara//lib/capybara/driver/base.rb#104
  def fullscreen_window(handle); end

  # source://capybara//lib/capybara/driver/base.rb#30
  def go_back; end

  # source://capybara//lib/capybara/driver/base.rb#34
  def go_forward; end

  # source://capybara//lib/capybara/driver/base.rb#26
  def html; end

  # source://capybara//lib/capybara/driver/base.rb#155
  def invalid_element_errors; end

  # source://capybara//lib/capybara/driver/base.rb#100
  def maximize_window(handle); end

  # source://capybara//lib/capybara/driver/base.rb#165
  def needs_server?; end

  # source://capybara//lib/capybara/driver/base.rb#124
  def no_such_window_error; end

  # source://capybara//lib/capybara/driver/base.rb#116
  def open_new_window; end

  # source://capybara//lib/capybara/driver/base.rb#14
  def refresh; end

  # source://capybara//lib/capybara/driver/base.rb#163
  def reset!; end

  # source://capybara//lib/capybara/driver/base.rb#96
  def resize_window_to(handle, width, height); end

  # source://capybara//lib/capybara/driver/base.rb#54
  def response_headers; end

  # source://capybara//lib/capybara/driver/base.rb#50
  def save_screenshot(path, **options); end

  # source://capybara//lib/capybara/driver/base.rb#62
  def send_keys(*_arg0); end

  # source://capybara//lib/capybara/driver/base.rb#4
  def session=(_arg0); end

  # source://capybara//lib/capybara/driver/base.rb#169
  def session_options; end

  # source://capybara//lib/capybara/driver/base.rb#58
  def status_code; end

  # source://capybara//lib/capybara/driver/base.rb#74
  def switch_to_frame(frame); end

  # source://capybara//lib/capybara/driver/base.rb#120
  def switch_to_window(handle); end

  # source://capybara//lib/capybara/driver/base.rb#10
  def visit(path); end

  # source://capybara//lib/capybara/driver/base.rb#159
  def wait?; end

  # source://capybara//lib/capybara/driver/base.rb#112
  def window_handles; end

  # source://capybara//lib/capybara/driver/base.rb#92
  def window_size(handle); end

  private

  # source://capybara//lib/capybara/driver/base.rb#175
  def session; end
end

# source://capybara//lib/capybara/driver/node.rb#5
class Capybara::Driver::Node
  # source://capybara//lib/capybara/driver/node.rb#8
  def initialize(driver, native, initial_cache = T.unsafe(nil)); end

  # source://capybara//lib/capybara/driver/node.rb#138
  def ==(other); end

  # source://capybara//lib/capybara/driver/node.rb#22
  def [](name); end

  # source://capybara//lib/capybara/driver/node.rb#14
  def all_text; end

  # source://capybara//lib/capybara/driver/node.rb#96
  def checked?; end

  # source://capybara//lib/capybara/driver/node.rb#48
  def click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/driver/node.rb#104
  def disabled?; end

  # source://capybara//lib/capybara/driver/node.rb#56
  def double_click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/driver/node.rb#68
  def drag_to(element, **options); end

  # source://capybara//lib/capybara/driver/node.rb#6
  def driver; end

  # source://capybara//lib/capybara/driver/node.rb#72
  def drop(*args); end

  # source://capybara//lib/capybara/driver/node.rb#64
  def hover; end

  # source://capybara//lib/capybara/driver/node.rb#6
  def initial_cache; end

  # source://capybara//lib/capybara/driver/node.rb#132
  def inspect; end

  # source://capybara//lib/capybara/driver/node.rb#112
  def multiple?; end

  # source://capybara//lib/capybara/driver/node.rb#6
  def native; end

  # source://capybara//lib/capybara/driver/node.rb#92
  def obscured?; end

  # source://capybara//lib/capybara/driver/node.rb#120
  def path; end

  # source://capybara//lib/capybara/driver/node.rb#108
  def readonly?; end

  # source://capybara//lib/capybara/driver/node.rb#116
  def rect; end

  # source://capybara//lib/capybara/driver/node.rb#52
  def right_click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/driver/node.rb#76
  def scroll_by(x, y); end

  # source://capybara//lib/capybara/driver/node.rb#80
  def scroll_to(element, alignment, position = T.unsafe(nil)); end

  # source://capybara//lib/capybara/driver/node.rb#40
  def select_option; end

  # source://capybara//lib/capybara/driver/node.rb#100
  def selected?; end

  # source://capybara//lib/capybara/driver/node.rb#60
  def send_keys(*args); end

  # source://capybara//lib/capybara/driver/node.rb#36
  def set(value, **options); end

  # source://capybara//lib/capybara/driver/node.rb#128
  def shadow_root; end

  # source://capybara//lib/capybara/driver/node.rb#30
  def style(styles); end

  # source://capybara//lib/capybara/driver/node.rb#84
  def tag_name; end

  # source://capybara//lib/capybara/driver/node.rb#124
  def trigger(event); end

  # source://capybara//lib/capybara/driver/node.rb#44
  def unselect_option; end

  # source://capybara//lib/capybara/driver/node.rb#26
  def value; end

  # source://capybara//lib/capybara/driver/node.rb#88
  def visible?; end

  # source://capybara//lib/capybara/driver/node.rb#18
  def visible_text; end
end

# source://capybara//lib/capybara.rb#12
class Capybara::DriverNotFoundError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara.rb#14
class Capybara::ElementNotFound < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara.rb#17
class Capybara::ExpectationNotMet < ::Capybara::ElementNotFound; end

# source://capybara//lib/capybara.rb#18
class Capybara::FileNotFound < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara.rb#13
class Capybara::FrozenInTime < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/helpers.rb#5
module Capybara::Helpers
  private

  # source://capybara//lib/capybara/helpers.rb#69
  def declension(singular, plural, count); end

  # source://capybara//lib/capybara/helpers.rb#73
  def filter_backtrace(trace); end

  # source://capybara//lib/capybara/helpers.rb#50
  def inject_asset_host(html, host: T.unsafe(nil)); end

  # source://capybara//lib/capybara/helpers.rb#89
  def monotonic_time; end

  # source://capybara//lib/capybara/helpers.rb#17
  def normalize_whitespace(text); end

  # source://capybara//lib/capybara/helpers.rb#98
  def timer(expire_in:); end

  # source://capybara//lib/capybara/helpers.rb#32
  def to_regexp(text, exact: T.unsafe(nil), all_whitespace: T.unsafe(nil), options: T.unsafe(nil)); end

  # source://capybara//lib/capybara/helpers.rb#84
  def warn(message, uplevel: T.unsafe(nil)); end

  class << self
    # source://capybara//lib/capybara/helpers.rb#69
    def declension(singular, plural, count); end

    # source://capybara//lib/capybara/helpers.rb#73
    def filter_backtrace(trace); end

    # source://capybara//lib/capybara/helpers.rb#50
    def inject_asset_host(html, host: T.unsafe(nil)); end

    # source://capybara//lib/capybara/helpers.rb#89
    def monotonic_time; end

    # source://capybara//lib/capybara/helpers.rb#17
    def normalize_whitespace(text); end

    # source://capybara//lib/capybara/helpers.rb#98
    def timer(expire_in:); end

    # source://capybara//lib/capybara/helpers.rb#32
    def to_regexp(text, exact: T.unsafe(nil), all_whitespace: T.unsafe(nil), options: T.unsafe(nil)); end

    # source://capybara//lib/capybara/helpers.rb#84
    def warn(message, uplevel: T.unsafe(nil)); end
  end
end

# source://capybara//lib/capybara/helpers.rb#102
class Capybara::Helpers::Timer
  # source://capybara//lib/capybara/helpers.rb#103
  def initialize(expire_in); end

  # source://capybara//lib/capybara/helpers.rb#108
  def expired?; end

  # source://capybara//lib/capybara/helpers.rb#116
  def stalled?; end

  private

  # source://capybara//lib/capybara/helpers.rb#122
  def current; end
end

# source://capybara//lib/capybara.rb#21
class Capybara::InfiniteRedirectError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/minitest.rb#7
module Capybara::Minitest; end

# source://capybara//lib/capybara/minitest.rb#8
module Capybara::Minitest::Assertions
  # source://capybara//lib/capybara/minitest.rb#151
  def assert_all_of_selectors(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_ancestor(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_any_of_selectors(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_button(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#302
  def assert_checked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_content(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_current_path(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_link(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#351
  def assert_matches_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_matches_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_matches_style(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#351
  def assert_matches_xpath(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_no_ancestor(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_button(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#309
  def assert_no_checked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_no_content(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_no_current_path(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_link(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_select(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_no_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_no_sibling(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_table(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_no_text(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_no_title(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#309
  def assert_no_unchecked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def assert_no_xpath(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_none_of_selectors(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#357
  def assert_not_matches_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_not_matches_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#357
  def assert_not_matches_xpath(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_select(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def assert_sibling(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_table(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_text(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def assert_title(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#302
  def assert_unchecked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#285
  def assert_xpath(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def refute_ancestor(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_button(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#309
  def refute_checked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def refute_content(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def refute_current_path(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_link(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#357
  def refute_matches_css(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def refute_matches_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#357
  def refute_matches_xpath(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_select(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def refute_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#151
  def refute_sibling(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_table(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def refute_text(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#53
  def refute_title(*args, **kwargs, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#309
  def refute_unchecked_field(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/minitest.rb#292
  def refute_xpath(*args, &optional_filter_block); end

  private

  # source://capybara//lib/capybara/minitest.rb#367
  def determine_subject(args); end

  # source://capybara//lib/capybara/minitest.rb#378
  def extract_locator(args); end
end

# source://capybara//lib/capybara.rb#15
class Capybara::ModalNotFound < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/node/finders.rb#4
module Capybara::Node; end

# source://capybara//lib/capybara/node/actions.rb#5
module Capybara::Node::Actions
  # source://capybara//lib/capybara/node/actions.rb#279
  def attach_file(locator = T.unsafe(nil), paths, make_visible: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#150
  def check(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#122
  def choose(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#57
  def click_button(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#41
  def click_link(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#25
  def click_link_or_button(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#25
  def click_on(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#88
  def fill_in(locator = T.unsafe(nil), with:, currently_with: T.unsafe(nil), fill_options: T.unsafe(nil), **find_options); end

  # source://capybara//lib/capybara/node/actions.rb#201
  def select(value = T.unsafe(nil), from: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#178
  def uncheck(locator = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#230
  def unselect(value = T.unsafe(nil), from: T.unsafe(nil), **options); end

  private

  # source://capybara//lib/capybara/node/actions.rb#364
  def _check_with_label(selector, checked, locator, allow_label_click: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/actions.rb#359
  def _reset_style(element); end

  # source://capybara//lib/capybara/node/actions.rb#353
  def _update_style(element, style); end

  # source://capybara//lib/capybara/node/actions.rb#310
  def find_select_or_datalist_input(from, options); end

  # source://capybara//lib/capybara/node/actions.rb#324
  def select_datalist_option(input, value); end

  # source://capybara//lib/capybara/node/actions.rb#337
  def while_visible(element, visible_css); end
end

# source://capybara//lib/capybara/node/actions.rb#409
Capybara::Node::Actions::CAPTURE_FILE_ELEMENT_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/node/actions.rb#403
Capybara::Node::Actions::DATALIST_OPTIONS_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/node/actions.rb#396
Capybara::Node::Actions::RESET_STYLE_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/node/actions.rb#386
Capybara::Node::Actions::UPDATE_STYLE_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/node/base.rb#25
class Capybara::Node::Base
  include ::Capybara::Node::Finders
  include ::Capybara::Node::Actions
  include ::Capybara::Node::Matchers

  # source://capybara//lib/capybara/node/base.rb#32
  def initialize(session, base); end

  # source://capybara//lib/capybara/node/base.rb#26
  def base; end

  # source://capybara//lib/capybara/node/base.rb#106
  def find_css(css, **options); end

  # source://capybara//lib/capybara/node/base.rb#115
  def find_xpath(xpath, **options); end

  # source://capybara//lib/capybara/node/base.rb#26
  def query_scope; end

  # source://capybara//lib/capybara/node/base.rb#38
  def reload; end

  # source://capybara//lib/capybara/node/base.rb#26
  def session; end

  # source://capybara//lib/capybara/node/base.rb#124
  def session_options; end

  # source://capybara//lib/capybara/node/base.rb#76
  def synchronize(seconds = T.unsafe(nil), errors: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/base.rb#128
  def to_capybara_node; end

  protected

  # source://capybara//lib/capybara/node/base.rb#134
  def catch_error?(error, errors = T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/base.rb#139
  def driver; end
end

# source://capybara//lib/capybara/node/document.rb#12
class Capybara::Node::Document < ::Capybara::Node::Base
  include ::Capybara::Node::DocumentMatchers

  # source://capybara//lib/capybara/node/document.rb#39
  def evaluate_script(*args); end

  # source://capybara//lib/capybara/node/document.rb#35
  def execute_script(*args); end

  # source://capybara//lib/capybara/node/document.rb#15
  def inspect; end

  # source://capybara//lib/capybara/node/document.rb#43
  def scroll_to(*args, quirks: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/document.rb#23
  def text(type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/document.rb#31
  def title; end
end

# source://capybara//lib/capybara/node/document_matchers.rb#5
module Capybara::Node::DocumentMatchers
  # source://capybara//lib/capybara/node/document_matchers.rb#32
  def assert_no_title(title, **options); end

  # source://capybara//lib/capybara/node/document_matchers.rb#19
  def assert_title(title, **options); end

  # source://capybara//lib/capybara/node/document_matchers.rb#54
  def has_no_title?(title, **options); end

  # source://capybara//lib/capybara/node/document_matchers.rb#44
  def has_title?(title, **options); end

  private

  # source://capybara//lib/capybara/node/document_matchers.rb#60
  def _verify_title(title, options); end
end

# source://capybara//lib/capybara/node/element.rb#24
class Capybara::Node::Element < ::Capybara::Node::Base
  # source://capybara//lib/capybara/node/element.rb#25
  def initialize(session, base, query_scope, query); end

  # source://capybara//lib/capybara/node/element.rb#73
  def [](attribute); end

  # source://capybara//lib/capybara/node/element.rb#33
  def allow_reload!(idx = T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/element.rb#326
  def checked?; end

  # source://capybara//lib/capybara/node/element.rb#170
  def click(*keys, **options); end

  # source://capybara//lib/capybara/node/element.rb#346
  def disabled?; end

  # source://capybara//lib/capybara/node/element.rb#197
  def double_click(*keys, **options); end

  # source://capybara//lib/capybara/node/element.rb#418
  def drag_to(node, **options); end

  # source://capybara//lib/capybara/node/element.rb#437
  def drop(*args); end

  # source://capybara//lib/capybara/node/element.rb#529
  def evaluate_async_script(script, *args); end

  # source://capybara//lib/capybara/node/element.rb#512
  def evaluate_script(script, *args); end

  # source://capybara//lib/capybara/node/element.rb#495
  def execute_script(script, *args); end

  # source://capybara//lib/capybara/node/element.rb#542
  def flash; end

  # source://capybara//lib/capybara/node/element.rb#284
  def hover; end

  # source://capybara//lib/capybara/node/element.rb#586
  def initial_cache; end

  # source://capybara//lib/capybara/node/element.rb#577
  def inspect; end

  # source://capybara//lib/capybara/node/element.rb#366
  def multiple?; end

  # source://capybara//lib/capybara/node/element.rb#42
  def native; end

  # source://capybara//lib/capybara/node/element.rb#316
  def obscured?; end

  # source://capybara//lib/capybara/node/element.rb#376
  def path; end

  # source://capybara//lib/capybara/node/element.rb#356
  def readonly?; end

  # source://capybara//lib/capybara/node/element.rb#380
  def rect; end

  # source://capybara//lib/capybara/node/element.rb#560
  def reload; end

  # source://capybara//lib/capybara/node/element.rb#184
  def right_click(*keys, **options); end

  # source://capybara//lib/capybara/node/element.rb#462
  def scroll_to(pos_or_el_or_x, y = T.unsafe(nil), align: T.unsafe(nil), offset: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/element.rb#139
  def select_option(wait: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/element.rb#336
  def selected?; end

  # source://capybara//lib/capybara/node/element.rb#274
  def send_keys(*args); end

  # source://capybara//lib/capybara/node/element.rb#117
  def set(value, **options); end

  # source://capybara//lib/capybara/node/element.rb#481
  def shadow_root; end

  # source://capybara//lib/capybara/node/element.rb#86
  def style(*styles); end

  # source://capybara//lib/capybara/node/element.rb#293
  def tag_name; end

  # source://capybara//lib/capybara/node/element.rb#58
  def text(type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/element.rb#394
  def trigger(event); end

  # source://capybara//lib/capybara/node/element.rb#150
  def unselect_option(wait: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/element.rb#105
  def value; end

  # source://capybara//lib/capybara/node/element.rb#305
  def visible?; end

  private

  # source://capybara//lib/capybara/node/element.rb#604
  def perform_click_action(keys, wait: T.unsafe(nil), **options); end
end

# source://capybara//lib/capybara/node/element.rb#590
Capybara::Node::Element::STYLE_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/node/finders.rb#5
module Capybara::Node::Finders
  # source://capybara//lib/capybara/node/finders.rb#255
  def all(*args, allow_reload: T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#81
  def ancestor(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#51
  def find(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#255
  def find_all(*args, allow_reload: T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#182
  def find_button(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#196
  def find_by_id(id, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#135
  def find_field(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#155
  def find_link(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#291
  def first(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/finders.rb#104
  def sibling(*args, **options, &optional_filter_block); end

  private

  # source://capybara//lib/capybara/node/finders.rb#316
  def ambiguous?(query, result); end

  # source://capybara//lib/capybara/node/finders.rb#324
  def options_include_minimum?(opts); end

  # source://capybara//lib/capybara/node/finders.rb#328
  def parent; end

  # source://capybara//lib/capybara/node/finders.rb#320
  def prefer_exact?(query); end

  # source://capybara//lib/capybara/node/finders.rb#298
  def synced_resolve(query); end
end

# source://capybara//lib/capybara/node/matchers.rb#5
module Capybara::Node::Matchers
  # source://capybara//lib/capybara/node/matchers.rb#816
  def ==(other); end

  # source://capybara//lib/capybara/node/matchers.rb#159
  def assert_all_of_selectors(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#741
  def assert_ancestor(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#201
  def assert_any_of_selectors(*args, wait: T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#561
  def assert_matches_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#126
  def assert_matches_style(styles = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/matchers.rb#749
  def assert_no_ancestor(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#233
  def assert_no_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#792
  def assert_no_sibling(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#691
  def assert_no_text(type_or_text, *args, **opts); end

  # source://capybara//lib/capybara/node/matchers.rb#180
  def assert_none_of_selectors(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#575
  def assert_not_matches_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#109
  def assert_selector(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#784
  def assert_sibling(*args, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#139
  def assert_style(styles = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/matchers.rb#675
  def assert_text(type_or_text, *args, **opts); end

  # source://capybara//lib/capybara/node/matchers.rb#761
  def has_ancestor?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#358
  def has_button?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#423
  def has_checked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#713
  def has_content?(*args, **options); end

  # source://capybara//lib/capybara/node/matchers.rb#309
  def has_css?(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#396
  def has_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#334
  def has_link?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#769
  def has_no_ancestor?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#370
  def has_no_button?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#436
  def has_no_checked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#725
  def has_no_content?(*args, **options); end

  # source://capybara//lib/capybara/node/matchers.rb#321
  def has_no_css?(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#410
  def has_no_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#346
  def has_no_link?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#507
  def has_no_select?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#50
  def has_no_selector?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#812
  def has_no_sibling?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#541
  def has_no_table?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#725
  def has_no_text?(*args, **options); end

  # source://capybara//lib/capybara/node/matchers.rb#462
  def has_no_unchecked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#282
  def has_no_xpath?(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#495
  def has_select?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#38
  def has_selector?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#804
  def has_sibling?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#71
  def has_style?(styles = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/matchers.rb#529
  def has_table?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#713
  def has_text?(*args, **options); end

  # source://capybara//lib/capybara/node/matchers.rb#449
  def has_unchecked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#270
  def has_xpath?(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#610
  def matches_css?(css, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#588
  def matches_selector?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#63
  def matches_style?(styles = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/matchers.rb#599
  def matches_xpath?(xpath, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#644
  def not_matches_css?(css, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#622
  def not_matches_selector?(*args, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#633
  def not_matches_xpath?(xpath, **options, &optional_filter_block); end

  private

  # source://capybara//lib/capybara/node/matchers.rb#867
  def _set_query_session_options(*query_args); end

  # source://capybara//lib/capybara/node/matchers.rb#849
  def _verify_match_result(query_args, optional_filter_block); end

  # source://capybara//lib/capybara/node/matchers.rb#826
  def _verify_multiple(*args, wait: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/node/matchers.rb#834
  def _verify_selector_result(query_args, optional_filter_block, query_type = T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/matchers.rb#858
  def _verify_text(type = T.unsafe(nil), expected_text, **query_options); end

  # source://capybara//lib/capybara/node/matchers.rb#822
  def extract_selector(args); end

  # source://capybara//lib/capybara/node/matchers.rb#875
  def make_predicate(options); end
end

# source://capybara//lib/capybara/node/simple.rb#15
class Capybara::Node::Simple
  include ::Capybara::Node::Finders
  include ::Capybara::Node::Matchers
  include ::Capybara::Node::DocumentMatchers

  # source://capybara//lib/capybara/node/simple.rb#22
  def initialize(native); end

  # source://capybara//lib/capybara/node/simple.rb#194
  def ==(other); end

  # source://capybara//lib/capybara/node/simple.rb#45
  def [](name); end

  # source://capybara//lib/capybara/node/simple.rb#159
  def allow_reload!(*_arg0); end

  # source://capybara//lib/capybara/node/simple.rb#123
  def checked?; end

  # source://capybara//lib/capybara/node/simple.rb#132
  def disabled?; end

  # source://capybara//lib/capybara/node/simple.rb#175
  def find_css(css, **_options); end

  # source://capybara//lib/capybara/node/simple.rb#180
  def find_xpath(xpath, **_options); end

  # source://capybara//lib/capybara/node/simple.rb#190
  def initial_cache; end

  # source://capybara//lib/capybara/node/simple.rb#170
  def inspect; end

  # source://capybara//lib/capybara/node/simple.rb#147
  def multiple?; end

  # source://capybara//lib/capybara/node/simple.rb#20
  def native; end

  # source://capybara//lib/capybara/node/simple.rb#70
  def path; end

  # source://capybara//lib/capybara/node/simple.rb#151
  def readonly?; end

  # source://capybara//lib/capybara/node/simple.rb#143
  def selected?; end

  # source://capybara//lib/capybara/node/simple.rb#185
  def session_options; end

  # source://capybara//lib/capybara/node/simple.rb#155
  def synchronize(_seconds = T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/simple.rb#60
  def tag_name; end

  # source://capybara//lib/capybara/node/simple.rb#31
  def text(_type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end

  # source://capybara//lib/capybara/node/simple.rb#166
  def title; end

  # source://capybara//lib/capybara/node/simple.rb#78
  def value; end

  # source://capybara//lib/capybara/node/simple.rb#103
  def visible?(check_ancestors = T.unsafe(nil)); end

  private

  # source://capybara//lib/capybara/node/simple.rb#200
  def option_value(option); end
end

# source://capybara//lib/capybara/node/simple.rb#206
Capybara::Node::Simple::VISIBILITY_XPATH = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara.rb#20
class Capybara::NotSupportedByDriverError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/queries/base_query.rb#5
module Capybara::Queries; end

# source://capybara//lib/capybara/queries/active_element_query.rb#6
class Capybara::Queries::ActiveElementQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/active_element_query.rb#7
  def initialize(**options); end

  # source://capybara//lib/capybara/queries/active_element_query.rb#12
  def resolve_for(session); end
end

# source://capybara//lib/capybara/queries/ancestor_query.rb#5
class Capybara::Queries::AncestorQuery < ::Capybara::Queries::SelectorQuery
  # source://capybara//lib/capybara/queries/ancestor_query.rb#20
  def description(applied = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/ancestor_query.rb#7
  def resolve_for(node, exact = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/queries/base_query.rb#6
class Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/base_query.rb#12
  def initialize(options); end

  # source://capybara//lib/capybara/queries/base_query.rb#36
  def expects_none?; end

  # source://capybara//lib/capybara/queries/base_query.rb#62
  def failure_message; end

  # source://capybara//lib/capybara/queries/base_query.rb#49
  def matches_count?(count); end

  # source://capybara//lib/capybara/queries/base_query.rb#66
  def negative_failure_message; end

  # source://capybara//lib/capybara/queries/base_query.rb#9
  def options; end

  # source://capybara//lib/capybara/queries/base_query.rb#16
  def session_options; end

  # source://capybara//lib/capybara/queries/base_query.rb#10
  def session_options=(_arg0); end

  # source://capybara//lib/capybara/queries/base_query.rb#20
  def wait; end

  private

  # source://capybara//lib/capybara/queries/base_query.rb#96
  def assert_valid_keys; end

  # source://capybara//lib/capybara/queries/base_query.rb#76
  def count_message; end

  # source://capybara//lib/capybara/queries/base_query.rb#72
  def count_specified?; end

  # source://capybara//lib/capybara/queries/base_query.rb#92
  def occurrences(count); end

  class << self
    # source://capybara//lib/capybara/queries/base_query.rb#24
    def wait(options, default = T.unsafe(nil)); end
  end
end

# source://capybara//lib/capybara/queries/base_query.rb#7
Capybara::Queries::BaseQuery::COUNT_KEYS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/queries/current_path_query.rb#8
class Capybara::Queries::CurrentPathQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/current_path_query.rb#9
  def initialize(expected_path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/queries/current_path_query.rb#35
  def failure_message; end

  # source://capybara//lib/capybara/queries/current_path_query.rb#39
  def negative_failure_message; end

  # source://capybara//lib/capybara/queries/current_path_query.rb#20
  def resolves_for?(session); end

  private

  # source://capybara//lib/capybara/queries/current_path_query.rb#51
  def failure_message_helper(negated = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/current_path_query.rb#45
  def matches_filter_block?(url); end

  # source://capybara//lib/capybara/queries/current_path_query.rb#56
  def valid_keys; end
end

# source://capybara//lib/capybara/queries/match_query.rb#5
class Capybara::Queries::MatchQuery < ::Capybara::Queries::SelectorQuery
  # source://capybara//lib/capybara/queries/match_query.rb#6
  def visible; end

  private

  # source://capybara//lib/capybara/queries/match_query.rb#12
  def assert_valid_keys; end

  # source://capybara//lib/capybara/queries/match_query.rb#21
  def valid_keys; end
end

# source://capybara//lib/capybara/queries/selector_query.rb#7
class Capybara::Queries::SelectorQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/selector_query.rb#15
  def initialize(*args, session_options:, enable_aria_label: T.unsafe(nil), enable_aria_role: T.unsafe(nil), test_id: T.unsafe(nil), selector_format: T.unsafe(nil), order: T.unsafe(nil), **options, &filter_block); end

  # source://capybara//lib/capybara/queries/selector_query.rb#113
  def applied_description; end

  # source://capybara//lib/capybara/queries/selector_query.rb#154
  def css; end

  # source://capybara//lib/capybara/queries/selector_query.rb#64
  def description(only_applied = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/selector_query.rb#137
  def exact?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#8
  def expression; end

  # source://capybara//lib/capybara/queries/selector_query.rb#178
  def failure_message; end

  # source://capybara//lib/capybara/queries/selector_query.rb#62
  def label; end

  # source://capybara//lib/capybara/queries/selector_query.rb#8
  def locator; end

  # source://capybara//lib/capybara/queries/selector_query.rb#141
  def match; end

  # source://capybara//lib/capybara/queries/selector_query.rb#117
  def matches_filters?(node, node_filter_errors = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/selector_query.rb#61
  def name; end

  # source://capybara//lib/capybara/queries/selector_query.rb#182
  def negative_failure_message; end

  # source://capybara//lib/capybara/queries/selector_query.rb#8
  def options; end

  # source://capybara//lib/capybara/queries/selector_query.rb#159
  def resolve_for(node, exact = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/selector_query.rb#8
  def selector; end

  # source://capybara//lib/capybara/queries/selector_query.rb#172
  def supports_exact?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#129
  def visible; end

  # source://capybara//lib/capybara/queries/selector_query.rb#145
  def xpath(exact = T.unsafe(nil)); end

  private

  # source://capybara//lib/capybara/queries/selector_query.rb#230
  def applied_filters; end

  # source://capybara//lib/capybara/queries/selector_query.rb#390
  def apply_expression_filters(expression); end

  # source://capybara//lib/capybara/queries/selector_query.rb#433
  def apply_filter?(filter); end

  # source://capybara//lib/capybara/queries/selector_query.rb#344
  def assert_valid_keys; end

  # source://capybara//lib/capybara/queries/selector_query.rb#613
  def builder(expr); end

  # source://capybara//lib/capybara/queries/selector_query.rb#340
  def custom_keys; end

  # source://capybara//lib/capybara/queries/selector_query.rb#609
  def default_visibility; end

  # source://capybara//lib/capybara/queries/selector_query.rb#421
  def describe_within?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#425
  def document?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#417
  def exact_text; end

  # source://capybara//lib/capybara/queries/selector_query.rb#325
  def expression_filters; end

  # source://capybara//lib/capybara/queries/selector_query.rb#313
  def filter_set(name); end

  # source://capybara//lib/capybara/queries/selector_query.rb#362
  def filtered_expression(expr); end

  # source://capybara//lib/capybara/queries/selector_query.rb#241
  def find_nodes_by_selector_format(node, exact); end

  # source://capybara//lib/capybara/queries/selector_query.rb#234
  def find_selector(locator); end

  # source://capybara//lib/capybara/queries/selector_query.rb#220
  def first_try?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#497
  def matches_class_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#556
  def matches_exact_text_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#303
  def matches_filter_block?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#510
  def matches_focused_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#491
  def matches_id_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#437
  def matches_locator_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#278
  def matches_node_filters?(node, errors); end

  # source://capybara//lib/capybara/queries/selector_query.rb#455
  def matches_spatial_filters?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#536
  def matches_style?(node, styles); end

  # source://capybara//lib/capybara/queries/selector_query.rb#525
  def matches_style_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#443
  def matches_system_filters?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#590
  def matches_text_exactly?(node, value); end

  # source://capybara//lib/capybara/queries/selector_query.rb#547
  def matches_text_filter?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#599
  def matches_text_regexp(node, regexp); end

  # source://capybara//lib/capybara/queries/selector_query.rb#605
  def matches_text_regexp?(node, regexp); end

  # source://capybara//lib/capybara/queries/selector_query.rb#565
  def matches_visibility_filters?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#192
  def matching_text; end

  # source://capybara//lib/capybara/queries/selector_query.rb#516
  def need_to_process_classes?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#317
  def node_filters; end

  # source://capybara//lib/capybara/queries/selector_query.rb#595
  def normalize_ws; end

  # source://capybara//lib/capybara/queries/selector_query.rb#331
  def ordered_results(results); end

  # source://capybara//lib/capybara/queries/selector_query.rb#617
  def position_cache(key); end

  # source://capybara//lib/capybara/queries/selector_query.rb#621
  def rect_cache(key); end

  # source://capybara//lib/capybara/queries/selector_query.rb#188
  def selector_format; end

  # source://capybara//lib/capybara/queries/selector_query.rb#224
  def show_for_stage(only_applied); end

  # source://capybara//lib/capybara/queries/selector_query.rb#429
  def simple_root?(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#196
  def text_fragments; end

  # source://capybara//lib/capybara/queries/selector_query.rb#266
  def to_element(node); end

  # source://capybara//lib/capybara/queries/selector_query.rb#213
  def try_text_match_in_expression?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#374
  def use_default_class_filter?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#382
  def use_default_focused_filter?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#370
  def use_default_id_filter?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#378
  def use_default_style_filter?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#386
  def use_spatial_filter?; end

  # source://capybara//lib/capybara/queries/selector_query.rb#274
  def valid_keys; end

  # source://capybara//lib/capybara/queries/selector_query.rb#411
  def warn_exact_usage; end

  # source://capybara//lib/capybara/queries/selector_query.rb#200
  def xpath_text_conditions; end
end

# source://capybara//lib/capybara/queries/selector_query.rb#625
class Capybara::Queries::SelectorQuery::Rectangle
  # source://capybara//lib/capybara/queries/selector_query.rb#628
  def initialize(position); end

  # source://capybara//lib/capybara/queries/selector_query.rb#652
  def above?(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#656
  def below?(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#626
  def bottom; end

  # source://capybara//lib/capybara/queries/selector_query.rb#637
  def distance(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#626
  def left; end

  # source://capybara//lib/capybara/queries/selector_query.rb#660
  def left_of?(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#668
  def near?(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#626
  def right; end

  # source://capybara//lib/capybara/queries/selector_query.rb#664
  def right_of?(other); end

  # source://capybara//lib/capybara/queries/selector_query.rb#626
  def top; end

  protected

  # source://capybara//lib/capybara/queries/selector_query.rb#674
  def line_segments; end

  private

  # source://capybara//lib/capybara/queries/selector_query.rb#685
  def distance_segment_segment(l1p1, l1p2, l2p1, l2p2); end
end

# source://capybara//lib/capybara/queries/selector_query.rb#10
Capybara::Queries::SelectorQuery::SPATIAL_KEYS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/queries/selector_query.rb#11
Capybara::Queries::SelectorQuery::VALID_KEYS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/queries/selector_query.rb#13
Capybara::Queries::SelectorQuery::VALID_MATCH = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/queries/sibling_query.rb#5
class Capybara::Queries::SiblingQuery < ::Capybara::Queries::SelectorQuery
  # source://capybara//lib/capybara/queries/sibling_query.rb#19
  def description(applied = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/sibling_query.rb#7
  def resolve_for(node, exact = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/queries/style_query.rb#6
class Capybara::Queries::StyleQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/style_query.rb#7
  def initialize(expected_styles, session_options:, **options); end

  # source://capybara//lib/capybara/queries/style_query.rb#29
  def failure_message; end

  # source://capybara//lib/capybara/queries/style_query.rb#17
  def resolves_for?(node); end

  private

  # source://capybara//lib/capybara/queries/style_query.rb#36
  def stringify_keys(hsh); end

  # source://capybara//lib/capybara/queries/style_query.rb#40
  def valid_keys; end
end

# source://capybara//lib/capybara/queries/text_query.rb#6
class Capybara::Queries::TextQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/text_query.rb#7
  def initialize(type = T.unsafe(nil), expected_text, session_options:, **options); end

  # source://capybara//lib/capybara/queries/text_query.rb#41
  def description; end

  # source://capybara//lib/capybara/queries/text_query.rb#33
  def failure_message; end

  # source://capybara//lib/capybara/queries/text_query.rb#37
  def negative_failure_message; end

  # source://capybara//lib/capybara/queries/text_query.rb#27
  def resolve_for(node); end

  private

  # source://capybara//lib/capybara/queries/text_query.rb#55
  def build_message(report_on_invisible); end

  # source://capybara//lib/capybara/queries/text_query.rb#71
  def case_insensitive_message; end

  # source://capybara//lib/capybara/queries/text_query.rb#102
  def check_case_insensitive?; end

  # source://capybara//lib/capybara/queries/text_query.rb#98
  def check_visible_text?; end

  # source://capybara//lib/capybara/queries/text_query.rb#111
  def default_type; end

  # source://capybara//lib/capybara/queries/text_query.rb#51
  def exact?; end

  # source://capybara//lib/capybara/queries/text_query.rb#79
  def invisible_message; end

  # source://capybara//lib/capybara/queries/text_query.rb#106
  def text(node: T.unsafe(nil), query_type: T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/text_query.rb#90
  def valid_keys; end

  # source://capybara//lib/capybara/queries/text_query.rb#94
  def valid_types; end
end

# source://capybara//lib/capybara/queries/title_query.rb#6
class Capybara::Queries::TitleQuery < ::Capybara::Queries::BaseQuery
  # source://capybara//lib/capybara/queries/title_query.rb#7
  def initialize(expected_title, **options); end

  # source://capybara//lib/capybara/queries/title_query.rb#19
  def failure_message; end

  # source://capybara//lib/capybara/queries/title_query.rb#23
  def negative_failure_message; end

  # source://capybara//lib/capybara/queries/title_query.rb#15
  def resolves_for?(node); end

  private

  # source://capybara//lib/capybara/queries/title_query.rb#29
  def failure_message_helper(negated = T.unsafe(nil)); end

  # source://capybara//lib/capybara/queries/title_query.rb#34
  def valid_keys; end
end

# source://capybara//lib/capybara.rb#447
module Capybara::RackTest; end

# source://capybara//lib/capybara/rack_test/browser.rb#3
class Capybara::RackTest::Browser
  include ::Rack::Test::Methods

  # source://capybara//lib/capybara/rack_test/browser.rb#9
  def initialize(driver); end

  # source://capybara//lib/capybara/rack_test/browser.rb#14
  def app; end

  # source://capybara//lib/capybara/rack_test/browser.rb#83
  def build_uri(path); end

  # source://capybara//lib/capybara/rack_test/browser.rb#7
  def current_host; end

  # source://capybara//lib/capybara/rack_test/browser.rb#7
  def current_host=(_arg0); end

  # source://capybara//lib/capybara/rack_test/browser.rb#99
  def current_url; end

  # source://capybara//lib/capybara/rack_test/browser.rb#116
  def dom; end

  # source://capybara//lib/capybara/rack_test/browser.rb#6
  def driver; end

  # source://capybara//lib/capybara/rack_test/browser.rb#120
  def find(format, selector); end

  # source://capybara//lib/capybara/rack_test/browser.rb#47
  def follow(method, path, **attributes); end

  # source://capybara//lib/capybara/rack_test/browser.rb#128
  def html; end

  # source://capybara//lib/capybara/rack_test/browser.rb#138
  def last_request; end

  # source://capybara//lib/capybara/rack_test/browser.rb#144
  def last_response; end

  # source://capybara//lib/capybara/rack_test/browser.rb#18
  def options; end

  # source://capybara//lib/capybara/rack_test/browser.rb#73
  def process(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/browser.rb#53
  def process_and_follow_redirects(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/browser.rb#29
  def refresh; end

  # source://capybara//lib/capybara/rack_test/browser.rb#112
  def reset_cache!; end

  # source://capybara//lib/capybara/rack_test/browser.rb#107
  def reset_host!; end

  # source://capybara//lib/capybara/rack_test/browser.rb#34
  def submit(method, path, attributes, content_type: T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/browser.rb#134
  def title; end

  # source://capybara//lib/capybara/rack_test/browser.rb#22
  def visit(path, **attributes); end

  protected

  # source://capybara//lib/capybara/rack_test/browser.rb#152
  def base_href; end

  # source://capybara//lib/capybara/rack_test/browser.rb#156
  def base_relative_uri_for(uri); end

  # source://capybara//lib/capybara/rack_test/browser.rb#171
  def build_rack_mock_session; end

  # source://capybara//lib/capybara/rack_test/browser.rb#176
  def request_path; end

  # source://capybara//lib/capybara/rack_test/browser.rb#182
  def safe_last_request; end

  private

  # source://capybara//lib/capybara/rack_test/browser.rb#190
  def fragment_or_script?(path); end

  # source://capybara//lib/capybara/rack_test/browser.rb#194
  def referer_url; end
end

# source://capybara//lib/capybara/rack_test/css_handlers.rb#3
class Capybara::RackTest::CSSHandlers < ::BasicObject
  include ::Kernel

  # source://capybara//lib/capybara/rack_test/css_handlers.rb#6
  def disabled(list); end

  # source://capybara//lib/capybara/rack_test/css_handlers.rb#10
  def enabled(list); end
end

# source://capybara//lib/capybara/rack_test/driver.rb#9
class Capybara::RackTest::Driver < ::Capybara::Driver::Base
  # source://capybara//lib/capybara/rack_test/driver.rb#17
  def initialize(app, **options); end

  # source://capybara//lib/capybara/rack_test/driver.rb#15
  def app; end

  # source://capybara//lib/capybara/rack_test/driver.rb#25
  def browser; end

  # source://capybara//lib/capybara/rack_test/driver.rb#61
  def current_url; end

  # source://capybara//lib/capybara/rack_test/driver.rb#104
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/driver.rb#89
  def dom; end

  # source://capybara//lib/capybara/rack_test/driver.rb#77
  def find_css(selector); end

  # source://capybara//lib/capybara/rack_test/driver.rb#73
  def find_xpath(selector); end

  # source://capybara//lib/capybara/rack_test/driver.rb#57
  def follow(method, path, **attributes); end

  # source://capybara//lib/capybara/rack_test/driver.rb#29
  def follow_redirects?; end

  # source://capybara//lib/capybara/rack_test/driver.rb#101
  def get(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/driver.rb#105
  def header(key, value); end

  # source://capybara//lib/capybara/rack_test/driver.rb#85
  def html; end

  # source://capybara//lib/capybara/rack_test/driver.rb#107
  def invalid_element_errors; end

  # source://capybara//lib/capybara/rack_test/driver.rb#15
  def options; end

  # source://capybara//lib/capybara/rack_test/driver.rb#102
  def post(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/driver.rb#103
  def put(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/driver.rb#33
  def redirect_limit; end

  # source://capybara//lib/capybara/rack_test/driver.rb#49
  def refresh; end

  # source://capybara//lib/capybara/rack_test/driver.rb#41
  def request; end

  # source://capybara//lib/capybara/rack_test/driver.rb#97
  def reset!; end

  # source://capybara//lib/capybara/rack_test/driver.rb#37
  def response; end

  # source://capybara//lib/capybara/rack_test/driver.rb#65
  def response_headers; end

  # source://capybara//lib/capybara/rack_test/driver.rb#69
  def status_code; end

  # source://capybara//lib/capybara/rack_test/driver.rb#53
  def submit(method, path, attributes); end

  # source://capybara//lib/capybara/rack_test/driver.rb#93
  def title; end

  # source://capybara//lib/capybara/rack_test/driver.rb#45
  def visit(path, **attributes); end
end

# source://capybara//lib/capybara/rack_test/driver.rb#10
Capybara::RackTest::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://capybara//lib/capybara/rack_test/errors.rb#3
module Capybara::RackTest::Errors; end

# source://capybara//lib/capybara/rack_test/errors.rb#4
class Capybara::RackTest::Errors::StaleElementReferenceError < ::StandardError; end

# source://capybara//lib/capybara/rack_test/form.rb#3
class Capybara::RackTest::Form < ::Capybara::RackTest::Node
  # source://capybara//lib/capybara/rack_test/form.rb#60
  def multipart?; end

  # source://capybara//lib/capybara/rack_test/form.rb#23
  def params(button); end

  # source://capybara//lib/capybara/rack_test/form.rb#54
  def submit(button); end

  private

  # source://capybara//lib/capybara/rack_test/form.rb#93
  def add_input_param(field, params); end

  # source://capybara//lib/capybara/rack_test/form.rb#126
  def add_select_param(field, params); end

  # source://capybara//lib/capybara/rack_test/form.rb#141
  def add_textarea_param(field, params); end

  # source://capybara//lib/capybara/rack_test/form.rb#117
  def file_to_upload(filename); end

  # source://capybara//lib/capybara/rack_test/form.rb#85
  def make_params; end

  # source://capybara//lib/capybara/rack_test/form.rb#76
  def merge_param!(params, key, value); end

  # source://capybara//lib/capybara/rack_test/form.rb#72
  def request_method; end

  # source://capybara//lib/capybara/rack_test/form.rb#146
  def submitter?(el); end
end

# source://capybara//lib/capybara/rack_test/form.rb#8
class Capybara::RackTest::Form::NilUploadedFile < ::Rack::Test::UploadedFile
  # source://capybara//lib/capybara/rack_test/form.rb#9
  def initialize; end

  # source://capybara//lib/capybara/rack_test/form.rb#19
  def append_to(_); end

  # source://capybara//lib/capybara/rack_test/form.rb#15
  def content_type; end

  # source://capybara//lib/capybara/rack_test/form.rb#14
  def original_filename; end

  # source://capybara//lib/capybara/rack_test/form.rb#16
  def path; end

  # source://capybara//lib/capybara/rack_test/form.rb#18
  def read; end

  # source://capybara//lib/capybara/rack_test/form.rb#20
  def set_encoding(_); end

  # source://capybara//lib/capybara/rack_test/form.rb#17
  def size; end
end

# source://capybara//lib/capybara/rack_test/form.rb#66
class Capybara::RackTest::Form::ParamsHash < ::Hash
  # source://capybara//lib/capybara/rack_test/form.rb#67
  def to_params_hash; end
end

# source://capybara//lib/capybara/rack_test/node.rb#5
class Capybara::RackTest::Node < ::Capybara::Driver::Node
  # source://capybara//lib/capybara/rack_test/node.rb#136
  def [](*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def all_text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def checked?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def disabled?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def find_css(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def find_xpath(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def path(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def readonly?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def select_option(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def selected?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def set(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def style(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def tag_name(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def unselect_option(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def value(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def visible?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/rack_test/node.rb#136
  def visible_text(*_arg0, **_arg1, &_arg2); end

  protected

  # source://capybara//lib/capybara/rack_test/node.rb#291
  def checkbox?; end

  # source://capybara//lib/capybara/rack_test/node.rb#287
  def checkbox_or_radio?(field = T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/node.rb#152
  def displayed_text(check_ancestor: T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/node.rb#303
  def input_field?; end

  # source://capybara//lib/capybara/rack_test/node.rb#295
  def radio?; end

  # source://capybara//lib/capybara/rack_test/node.rb#311
  def range?; end

  # source://capybara//lib/capybara/rack_test/node.rb#299
  def text_or_password?; end

  # source://capybara//lib/capybara/rack_test/node.rb#307
  def textarea?; end

  private

  # source://capybara//lib/capybara/rack_test/node.rb#242
  def attribute_is_not_blank?(attribute); end

  # source://capybara//lib/capybara/rack_test/node.rb#281
  def checkable?; end

  # source://capybara//lib/capybara/rack_test/node.rb#252
  def click_label; end

  # source://capybara//lib/capybara/rack_test/node.rb#176
  def deselect_options; end

  # source://capybara//lib/capybara/rack_test/node.rb#246
  def follow_link; end

  # source://capybara//lib/capybara/rack_test/node.rb#193
  def form; end

  # source://capybara//lib/capybara/rack_test/node.rb#273
  def link?; end

  # source://capybara//lib/capybara/rack_test/node.rb#185
  def select_node; end

  # source://capybara//lib/capybara/rack_test/node.rb#207
  def set_checkbox(value); end

  # source://capybara//lib/capybara/rack_test/node.rb#223
  def set_input(value); end

  # source://capybara//lib/capybara/rack_test/node.rb#201
  def set_radio(_value); end

  # source://capybara//lib/capybara/rack_test/node.rb#215
  def set_range(value); end

  # source://capybara//lib/capybara/rack_test/node.rb#172
  def stale_check; end

  # source://capybara//lib/capybara/rack_test/node.rb#180
  def string_node; end

  # source://capybara//lib/capybara/rack_test/node.rb#277
  def submits?; end

  # source://capybara//lib/capybara/rack_test/node.rb#262
  def toggle_details(details = T.unsafe(nil)); end

  # source://capybara//lib/capybara/rack_test/node.rb#189
  def type; end

  # source://capybara//lib/capybara/rack_test/node.rb#8
  def unchecked_all_text; end

  # source://capybara//lib/capybara/rack_test/node.rb#93
  def unchecked_checked?; end

  # source://capybara//lib/capybara/rack_test/node.rb#67
  def unchecked_click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/rack_test/node.rb#101
  def unchecked_disabled?; end

  # source://capybara//lib/capybara/rack_test/node.rb#126
  def unchecked_find_css(locator, **_hints); end

  # source://capybara//lib/capybara/rack_test/node.rb#122
  def unchecked_find_xpath(locator, **_hints); end

  # source://capybara//lib/capybara/rack_test/node.rb#118
  def unchecked_path; end

  # source://capybara//lib/capybara/rack_test/node.rb#111
  def unchecked_readonly?; end

  # source://capybara//lib/capybara/rack_test/node.rb#54
  def unchecked_select_option; end

  # source://capybara//lib/capybara/rack_test/node.rb#97
  def unchecked_selected?; end

  # source://capybara//lib/capybara/rack_test/node.rb#37
  def unchecked_set(value, **options); end

  # source://capybara//lib/capybara/rack_test/node.rb#29
  def unchecked_style(_styles); end

  # source://capybara//lib/capybara/rack_test/node.rb#85
  def unchecked_tag_name; end

  # source://capybara//lib/capybara/rack_test/node.rb#61
  def unchecked_unselect_option; end

  # source://capybara//lib/capybara/rack_test/node.rb#33
  def unchecked_value; end

  # source://capybara//lib/capybara/rack_test/node.rb#89
  def unchecked_visible?; end

  # source://capybara//lib/capybara/rack_test/node.rb#17
  def unchecked_visible_text; end
end

# source://capybara//lib/capybara/rack_test/node.rb#6
Capybara::RackTest::Node::BLOCK_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/rack_test/node.rb#316
Capybara::RackTest::Node::DISABLED_BY_FIELDSET_XPATH = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/rack_test/node.rb#315
Capybara::RackTest::Node::OPTION_OWNER_XPATH = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara.rb#24
class Capybara::ReadOnlyElementError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/session/config.rb#121
class Capybara::ReadOnlySessionConfig < ::SimpleDelegator
  # source://capybara//lib/capybara/session/config.rb#123
  def always_include_port=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def app_host=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def asset_host=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def automatic_label_click=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def automatic_reload=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_host=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_max_wait_time=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_normalize_ws=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_retry_interval=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_selector=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def default_set_options=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def disable_animation=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def enable_aria_label=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def enable_aria_role=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def exact=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def exact_text=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def ignore_hidden_elements=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def match=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def predicates_wait=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def raise_server_errors=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def run_server=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def save_path=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def server_errors=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def server_host=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def server_port=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def test_id=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def visible_text_only=(_); end

  # source://capybara//lib/capybara/session/config.rb#123
  def w3c_click_offset=(_); end
end

# source://capybara//lib/capybara/registration_container.rb#5
class Capybara::RegistrationContainer
  # source://capybara//lib/capybara/registration_container.rb#33
  def initialize; end

  # source://capybara//lib/capybara/registration_container.rb#10
  def [](name); end

  # source://capybara//lib/capybara/registration_container.rb#14
  def []=(name, value); end

  # source://capybara//lib/capybara/registration_container.rb#19
  def method_missing(method_name, *args, **options, &block); end

  # source://capybara//lib/capybara/registration_container.rb#6
  def names; end

  private

  # source://capybara//lib/capybara/registration_container.rb#37
  def register(name, block); end

  # source://capybara//lib/capybara/registration_container.rb#27
  def respond_to_missing?(method_name, include_all); end
end

# source://capybara//lib/capybara/result.rb#24
class Capybara::Result
  include ::Enumerable
  extend ::Forwardable

  # source://capybara//lib/capybara/result.rb#28
  def initialize(elements, query); end

  # source://capybara//lib/capybara/result.rb#53
  def [](*args); end

  # source://capybara//lib/capybara/result.rb#140
  def allow_reload!; end

  # source://capybara//lib/capybara/result.rb#53
  def at(*args); end

  # source://capybara//lib/capybara/result.rb#84
  def compare_count; end

  # source://capybara//lib/capybara/result.rb#41
  def each(&block); end

  # source://capybara//lib/capybara/result.rb#80
  def empty?; end

  # source://capybara//lib/capybara/result.rb#113
  def failure_message; end

  def index(*_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def inspect(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/result.rb#109
  def matches_count?; end

  # source://capybara//lib/capybara/result.rb#129
  def negative_failure_message; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def sample(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/result.rb#133
  def unfiltered_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def values_at(*args, **_arg1, &block); end

  private

  # source://capybara//lib/capybara/result.rb#147
  def add_to_cache(elem); end

  # source://capybara//lib/capybara/result.rb#161
  def full_results; end

  # source://capybara//lib/capybara/result.rb#181
  def lazy_select_elements(&block); end

  # source://capybara//lib/capybara/result.rb#152
  def load_up_to(num); end

  # source://capybara//lib/capybara/result.rb#166
  def rest; end
end

# source://capybara//lib/capybara.rb#22
class Capybara::ScopeError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/selector/selector.rb#4
class Capybara::Selector < ::SimpleDelegator
  # source://capybara//lib/capybara/selector/selector.rb#33
  def initialize(definition, config:, format:); end

  # source://capybara//lib/capybara/selector/selector.rb#77
  def add_error(error_msg); end

  # source://capybara//lib/capybara/selector/selector.rb#95
  def builder(expr = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selector/selector.rb#59
  def call(locator, **options); end

  # source://capybara//lib/capybara/selector/selector.rb#42
  def current_format; end

  # source://capybara//lib/capybara/selector/selector.rb#47
  def enable_aria_label; end

  # source://capybara//lib/capybara/selector/selector.rb#51
  def enable_aria_role; end

  # source://capybara//lib/capybara/selector/selector.rb#31
  def errors; end

  # source://capybara//lib/capybara/selector/selector.rb#81
  def expression_for(name, locator, config: T.unsafe(nil), format: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selector/selector.rb#42
  def format; end

  # source://capybara//lib/capybara/selector/selector.rb#55
  def test_id; end

  # source://capybara//lib/capybara/selector/selector.rb#86
  def with_filter_errors(errors); end

  private

  # source://capybara//lib/capybara/selector/selector.rb#146
  def find_by_attr(attribute, value); end

  # source://capybara//lib/capybara/selector/selector.rb#155
  def find_by_class_attr(classes); end

  # source://capybara//lib/capybara/selector/selector.rb#126
  def locate_field(xpath, locator, **_options); end

  # source://capybara//lib/capybara/selector/selector.rb#142
  def locate_label(locator); end

  # source://capybara//lib/capybara/selector/selector.rb#108
  def locator_description; end

  # source://capybara//lib/capybara/selector/selector.rb#118
  def locator_valid?(locator); end

  class << self
    # source://capybara//lib/capybara/selector/selector.rb#10
    def [](name); end

    # source://capybara//lib/capybara/selector/selector.rb#14
    def add(name, **options, &block); end

    # source://capybara//lib/capybara/selector/selector.rb#6
    def all; end

    # source://capybara//lib/capybara/selector/selector.rb#26
    def for(locator); end

    # source://capybara//lib/capybara/selector/selector.rb#22
    def remove(name); end

    # source://capybara//lib/capybara/selector/selector.rb#18
    def update(name, &block); end
  end
end

# source://capybara//lib/capybara/selector/css.rb#7
class Capybara::Selector::CSS
  class << self
    # source://capybara//lib/capybara/selector/css.rb#8
    def escape(str); end

    # source://capybara//lib/capybara/selector/css.rb#17
    def escape_char(char); end

    # source://capybara//lib/capybara/selector/css.rb#21
    def split(css); end
  end
end

# source://capybara//lib/capybara/selector/css.rb#29
Capybara::Selector::CSS::ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://capybara//lib/capybara/selector/css.rb#26
Capybara::Selector::CSS::H = T.let(T.unsafe(nil), Regexp)

# source://capybara//lib/capybara/selector/css.rb#30
Capybara::Selector::CSS::NMSTART = T.let(T.unsafe(nil), Regexp)

# source://capybara//lib/capybara/selector/css.rb#28
Capybara::Selector::CSS::NONASCII = T.let(T.unsafe(nil), Regexp)

# source://capybara//lib/capybara/selector/css.rb#25
Capybara::Selector::CSS::S = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selector/css.rb#32
class Capybara::Selector::CSS::Splitter
  # source://capybara//lib/capybara/selector/css.rb#33
  def split(css); end

  private

  # source://capybara//lib/capybara/selector/css.rb#69
  def parse_block(start, final, strio); end

  # source://capybara//lib/capybara/selector/css.rb#65
  def parse_paren(strio); end

  # source://capybara//lib/capybara/selector/css.rb#61
  def parse_square(strio); end

  # source://capybara//lib/capybara/selector/css.rb#86
  def parse_string(quote, strio); end
end

# source://capybara//lib/capybara/selector/css.rb#27
Capybara::Selector::CSS::UNICODE = T.let(T.unsafe(nil), Regexp)

# source://capybara//lib/capybara/selector/builders/css_builder.rb#8
class Capybara::Selector::CSSBuilder
  # source://capybara//lib/capybara/selector/builders/css_builder.rb#9
  def initialize(expression); end

  # source://capybara//lib/capybara/selector/builders/css_builder.rb#15
  def add_attribute_conditions(**attributes); end

  # source://capybara//lib/capybara/selector/builders/css_builder.rb#13
  def expression; end

  private

  # source://capybara//lib/capybara/selector/builders/css_builder.rb#43
  def attribute_conditions(attributes); end

  # source://capybara//lib/capybara/selector/builders/css_builder.rb#66
  def class_conditions(classes); end

  # source://capybara//lib/capybara/selector/builders/css_builder.rb#35
  def regexp_conditions(name, value); end
end

# source://capybara//lib/capybara/selector/definition.rb#11
class Capybara::Selector::Definition
  extend ::Forwardable

  # source://capybara//lib/capybara/selector/definition.rb#16
  def initialize(name, locator_type: T.unsafe(nil), raw_locator: T.unsafe(nil), supports_exact: T.unsafe(nil), &block); end

  # source://capybara//lib/capybara/selector/definition.rb#77
  def css(*allowed_filters, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#32
  def custom_filters; end

  # source://capybara//lib/capybara/selector/definition.rb#236
  def default_format; end

  # source://capybara//lib/capybara/selector/definition.rb#217
  def default_visibility(fallback = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def describe(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#190
  def describe_all_expression_filters(**opts); end

  # source://capybara//lib/capybara/selector/definition.rb#180
  def describe_expression_filters(&block); end

  # source://capybara//lib/capybara/selector/definition.rb#200
  def describe_node_filters(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def description(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def expression_filter(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#41
  def expression_filters; end

  # source://capybara//lib/capybara/selector/definition.rb#12
  def expressions; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def filter(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#174
  def filter_set(name, filters_to_use = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selector/definition.rb#104
  def label(label = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selector/definition.rb#168
  def locator_filter(*types, **options, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#247
  def locator_types; end

  # source://capybara//lib/capybara/selector/definition.rb#90
  def match(&block); end

  # source://capybara//lib/capybara/selector/definition.rb#127
  def match?(locator); end

  # source://capybara//lib/capybara/selector/definition.rb#12
  def name; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def node_filter(*args, **_arg1, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#37
  def node_filters; end

  # source://capybara//lib/capybara/selector/definition.rb#227
  def raw_locator?; end

  # source://capybara//lib/capybara/selector/definition.rb#232
  def supports_exact?; end

  # source://capybara//lib/capybara/selector/definition.rb#213
  def visible(default_visibility = T.unsafe(nil), &block); end

  # source://capybara//lib/capybara/selector/definition.rb#59
  def xpath(*allowed_filters, &block); end

  private

  # source://capybara//lib/capybara/selector/definition.rb#268
  def expression(type, allowed_filters, &block); end

  # source://capybara//lib/capybara/selector/definition.rb#255
  def handled_custom_options(filter, options); end

  # source://capybara//lib/capybara/selector/definition.rb#261
  def parameter_names(block); end
end

# source://capybara//lib/capybara/selector/filter_set.rb#7
class Capybara::Selector::FilterSet
  # source://capybara//lib/capybara/selector/filter_set.rb#10
  def initialize(name, &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#29
  def describe(what = T.unsafe(nil), &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#42
  def description(node_filters: T.unsafe(nil), expression_filters: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selector/filter_set.rb#51
  def descriptions; end

  # source://capybara//lib/capybara/selector/filter_set.rb#25
  def expression_filter(name, *types, **options, &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#8
  def expression_filters; end

  # source://capybara//lib/capybara/selector/filter_set.rb#18
  def filter(names, *types, **options, &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#56
  def import(name, filters = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selector/filter_set.rb#18
  def node_filter(names, *types, **options, &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#8
  def node_filters; end

  protected

  # source://capybara//lib/capybara/selector/filter_set.rb#97
  def expression_filter_descriptions; end

  # source://capybara//lib/capybara/selector/filter_set.rb#93
  def node_filter_descriptions; end

  # source://capybara//lib/capybara/selector/filter_set.rb#89
  def undeclared_descriptions; end

  private

  # source://capybara//lib/capybara/selector/filter_set.rb#110
  def add_filter(name, filter_class, *types, matcher: T.unsafe(nil), **options, &block); end

  # source://capybara//lib/capybara/selector/filter_set.rb#103
  def options_with_defaults(options); end

  class << self
    # source://capybara//lib/capybara/selector/filter_set.rb#74
    def [](name); end

    # source://capybara//lib/capybara/selector/filter_set.rb#78
    def add(name, &block); end

    # source://capybara//lib/capybara/selector/filter_set.rb#70
    def all; end

    # source://capybara//lib/capybara/selector/filter_set.rb#82
    def remove(name); end
  end
end

# source://capybara//lib/capybara/selector/filters/base.rb#5
module Capybara::Selector::Filters; end

# source://capybara//lib/capybara/selector/filters/base.rb#6
class Capybara::Selector::Filters::Base
  # source://capybara//lib/capybara/selector/filters/base.rb#7
  def initialize(name, matcher, block, **options); end

  # source://capybara//lib/capybara/selector/filters/base.rb#35
  def boolean?; end

  # source://capybara//lib/capybara/selector/filters/base.rb#19
  def default; end

  # source://capybara//lib/capybara/selector/filters/base.rb#15
  def default?; end

  # source://capybara//lib/capybara/selector/filters/base.rb#27
  def format; end

  # source://capybara//lib/capybara/selector/filters/base.rb#39
  def handles_option?(option_name); end

  # source://capybara//lib/capybara/selector/filters/base.rb#31
  def matcher?; end

  # source://capybara//lib/capybara/selector/filters/base.rb#23
  def skip?(value); end

  private

  # source://capybara//lib/capybara/selector/filters/base.rb#49
  def apply(subject, name, value, skip_value, ctx); end

  # source://capybara//lib/capybara/selector/filters/base.rb#65
  def filter_context(context); end

  # source://capybara//lib/capybara/selector/filters/base.rb#69
  def valid_value?(value); end
end

# source://capybara//lib/capybara/selector/filters/expression_filter.rb#8
class Capybara::Selector::Filters::ExpressionFilter < ::Capybara::Selector::Filters::Base
  # source://capybara//lib/capybara/selector/filters/expression_filter.rb#9
  def apply_filter(expr, name, value, selector); end
end

# source://capybara//lib/capybara/selector/filters/expression_filter.rb#14
class Capybara::Selector::Filters::IdentityExpressionFilter < ::Capybara::Selector::Filters::ExpressionFilter
  # source://capybara//lib/capybara/selector/filters/expression_filter.rb#15
  def initialize(name); end

  # source://capybara//lib/capybara/selector/filters/expression_filter.rb#18
  def apply_filter(expr, _name, _value, _ctx); end

  # source://capybara//lib/capybara/selector/filters/expression_filter.rb#16
  def default?; end

  # source://capybara//lib/capybara/selector/filters/expression_filter.rb#17
  def matcher?; end
end

# source://capybara//lib/capybara/selector/filters/locator_filter.rb#8
class Capybara::Selector::Filters::LocatorFilter < ::Capybara::Selector::Filters::NodeFilter
  # source://capybara//lib/capybara/selector/filters/locator_filter.rb#9
  def initialize(block, **options); end

  # source://capybara//lib/capybara/selector/filters/locator_filter.rb#13
  def matches?(node, value, context = T.unsafe(nil), exact:); end

  private

  # source://capybara//lib/capybara/selector/filters/locator_filter.rb#21
  def apply(subject, value, skip_value, ctx, **options); end
end

# source://capybara//lib/capybara/selector/filters/node_filter.rb#8
class Capybara::Selector::Filters::NodeFilter < ::Capybara::Selector::Filters::Base
  # source://capybara//lib/capybara/selector/filters/node_filter.rb#9
  def initialize(name, matcher, block, **options); end

  # source://capybara//lib/capybara/selector/filters/node_filter.rb#23
  def matches?(node, name, value, context = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/selector/regexp_disassembler.rb#8
class Capybara::Selector::RegexpDisassembler
  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#9
  def initialize(regexp); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#13
  def alternated_substrings; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#21
  def substrings; end

  private

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#81
  def collapse(strs); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#68
  def combine(strs); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#87
  def extract_strings(expression, alternation: T.unsafe(nil)); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#61
  def process(alternation:); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#30
  def remove_and_covered(strings); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#45
  def remove_or_covered(or_series); end
end

# source://capybara//lib/capybara/selector/regexp_disassembler.rb#92
class Capybara::Selector::RegexpDisassembler::Expression
  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#93
  def initialize(exp); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#97
  def extract_strings(process_alternatives); end

  protected

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#113
  def alternation?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#156
  def alternative_strings; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#161
  def ignore?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#117
  def optional?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#148
  def optional_strings; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#152
  def repeated_strings(process_alternatives); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#125
  def strings(process_alternatives); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#121
  def terminal?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#137
  def terminal_strings; end

  private

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#200
  def alternatives; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#204
  def each; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#180
  def fixed_repeat?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#168
  def indeterminate?; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#176
  def max_repeat; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#172
  def min_repeat; end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#194
  def options_set(strs); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#188
  def repeat_set(str); end

  # source://capybara//lib/capybara/selector/regexp_disassembler.rb#184
  def type; end
end

# source://capybara//lib/capybara/selector/builders/xpath_builder.rb#8
class Capybara::Selector::XPathBuilder
  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#9
  def initialize(expression); end

  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#15
  def add_attribute_conditions(**conditions); end

  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#13
  def expression; end

  private

  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#30
  def attribute_conditions(attributes); end

  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#47
  def class_conditions(classes); end

  # source://capybara//lib/capybara/selector/builders/xpath_builder.rb#62
  def regexp_to_xpath_conditions(regexp); end
end

# source://capybara//lib/capybara.rb#448
module Capybara::Selenium; end

# source://capybara//lib/capybara/selenium/patches/logs.rb#5
module Capybara::Selenium::ChromeLogs
  # source://capybara//lib/capybara/selenium/patches/logs.rb#21
  def available_log_types; end

  # source://capybara//lib/capybara/selenium/patches/logs.rb#17
  def commands(command); end

  # source://capybara//lib/capybara/selenium/patches/logs.rb#28
  def log(type); end
end

# source://capybara//lib/capybara/selenium/patches/logs.rb#11
Capybara::Selenium::ChromeLogs::COMMANDS = T.let(T.unsafe(nil), Hash)

# source://capybara//lib/capybara/selenium/patches/logs.rb#6
Capybara::Selenium::ChromeLogs::LOG_MSG = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#6
class Capybara::Selenium::ChromeNode < ::Capybara::Selenium::Node
  include ::Capybara::Selenium::Node::Html5Drag
  include ::Capybara::Selenium::Node::FileInputClickEmulation

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#39
  def click(*_arg0, **_arg1); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#52
  def disabled?; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#35
  def drop(*args); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#56
  def select_option; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#76
  def send_keys(*args); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#17
  def set_file(value); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#10
  def set_text(value, clear: T.unsafe(nil), **_unused); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#64
  def visible?; end

  private

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#113
  def browser_version(to_float: T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#120
  def chromedriver_fixed_actions_key_state?; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#124
  def chromedriver_supports_displayed_endpoint?; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#128
  def chromedriver_version; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#107
  def file_errors; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#132
  def native_displayed?; end

  # source://capybara//lib/capybara/selenium/nodes/chrome_node.rb#96
  def perform_legacy_drag(element, drop_modifiers); end
end

# source://capybara//lib/capybara/selenium/driver.rb#6
class Capybara::Selenium::Driver < ::Capybara::Driver::Base
  include ::Capybara::Selenium::Find

  # source://capybara//lib/capybara/selenium/driver.rb#92
  def initialize(app, **options); end

  # source://capybara//lib/capybara/selenium/driver.rb#273
  def accept_modal(_type, **options); end

  # source://capybara//lib/capybara/selenium/driver.rb#151
  def active_element; end

  # source://capybara//lib/capybara/selenium/driver.rb#17
  def app; end

  # source://capybara//lib/capybara/selenium/driver.rb#65
  def browser; end

  # source://capybara//lib/capybara/selenium/driver.rb#244
  def close_window(handle); end

  # source://capybara//lib/capybara/selenium/driver.rb#129
  def current_url; end

  # source://capybara//lib/capybara/selenium/driver.rb#214
  def current_window_handle; end

  # source://capybara//lib/capybara/selenium/driver.rb#284
  def dismiss_modal(_type, **options); end

  # source://capybara//lib/capybara/selenium/driver.rb#145
  def evaluate_async_script(script, *args); end

  # source://capybara//lib/capybara/selenium/driver.rb#140
  def evaluate_script(script, *args); end

  # source://capybara//lib/capybara/selenium/driver.rb#136
  def execute_script(script, *args); end

  # source://capybara//lib/capybara/selenium/driver.rb#187
  def frame_obscured_at?(x:, y:); end

  # source://capybara//lib/capybara/selenium/driver.rb#238
  def fullscreen_window(handle); end

  # source://capybara//lib/capybara/selenium/driver.rb#111
  def go_back; end

  # source://capybara//lib/capybara/selenium/driver.rb#115
  def go_forward; end

  # source://capybara//lib/capybara/selenium/driver.rb#119
  def html; end

  # source://capybara//lib/capybara/selenium/driver.rb#306
  def invalid_element_errors; end

  # source://capybara//lib/capybara/selenium/driver.rb#231
  def maximize_window(handle); end

  # source://capybara//lib/capybara/selenium/driver.rb#134
  def needs_server?; end

  # source://capybara//lib/capybara/selenium/driver.rb#332
  def no_such_window_error; end

  # source://capybara//lib/capybara/selenium/driver.rb#256
  def open_new_window(kind = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver.rb#17
  def options; end

  # source://capybara//lib/capybara/selenium/driver.rb#292
  def quit; end

  # source://capybara//lib/capybara/selenium/driver.rb#107
  def refresh; end

  # source://capybara//lib/capybara/selenium/driver.rb#164
  def reset!; end

  # source://capybara//lib/capybara/selenium/driver.rb#225
  def resize_window_to(handle, width, height); end

  # source://capybara//lib/capybara/selenium/driver.rb#160
  def save_screenshot(path, **_options); end

  # source://capybara//lib/capybara/selenium/driver.rb#155
  def send_keys(*args); end

  # source://capybara//lib/capybara/selenium/driver.rb#199
  def switch_to_frame(frame); end

  # source://capybara//lib/capybara/selenium/driver.rb#269
  def switch_to_window(handle); end

  # source://capybara//lib/capybara/selenium/driver.rb#125
  def title; end

  # source://capybara//lib/capybara/selenium/driver.rb#103
  def visit(path); end

  # source://capybara//lib/capybara/selenium/driver.rb#133
  def wait?; end

  # source://capybara//lib/capybara/selenium/driver.rb#252
  def window_handles; end

  # source://capybara//lib/capybara/selenium/driver.rb#218
  def window_size(handle); end

  private

  # source://capybara//lib/capybara/selenium/driver.rb#542
  def accept_unhandled_reset_alert; end

  # source://capybara//lib/capybara/selenium/driver.rb#503
  def bridge; end

  # source://capybara//lib/capybara/selenium/driver.rb#499
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver.rb#350
  def clear_browser_state; end

  # source://capybara//lib/capybara/selenium/driver.rb#359
  def clear_browser_state_errors; end

  # source://capybara//lib/capybara/selenium/driver.rb#395
  def clear_local_storage; end

  # source://capybara//lib/capybara/selenium/driver.rb#381
  def clear_session_storage; end

  # source://capybara//lib/capybara/selenium/driver.rb#374
  def clear_storage; end

  # source://capybara//lib/capybara/selenium/driver.rb#370
  def delete_all_cookies; end

  # source://capybara//lib/capybara/selenium/driver.rb#495
  def find_context; end

  # source://capybara//lib/capybara/selenium/driver.rb#433
  def find_modal(text: T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/driver.rb#456
  def find_modal_errors; end

  # source://capybara//lib/capybara/selenium/driver.rb#417
  def modal_error; end

  # source://capybara//lib/capybara/selenium/driver.rb#346
  def native_active_element; end

  # source://capybara//lib/capybara/selenium/driver.rb#342
  def native_args(args); end

  # source://capybara//lib/capybara/selenium/driver.rb#409
  def navigate_with_accept(url); end

  # source://capybara//lib/capybara/selenium/driver.rb#524
  def reset_browser_state; end

  # source://capybara//lib/capybara/selenium/driver.rb#338
  def selenium_4?; end

  # source://capybara//lib/capybara/selenium/driver.rb#514
  def setup_exit_handler; end

  # source://capybara//lib/capybara/selenium/driver.rb#470
  def silenced_unknown_error_message?(msg); end

  # source://capybara//lib/capybara/selenium/driver.rb#474
  def silenced_unknown_error_messages; end

  # source://capybara//lib/capybara/selenium/driver.rb#507
  def specialize_driver; end

  # source://capybara//lib/capybara/selenium/driver.rb#363
  def unhandled_alert_errors; end

  # source://capybara//lib/capybara/selenium/driver.rb#478
  def unwrap_script_result(arg); end

  # source://capybara//lib/capybara/selenium/driver.rb#529
  def wait_for_empty_page(timer); end

  # source://capybara//lib/capybara/selenium/driver.rb#460
  def with_legacy_error(errors, legacy_error); end

  # source://capybara//lib/capybara/selenium/driver.rb#421
  def within_given_window(handle); end

  class << self
    # source://capybara//lib/capybara/selenium/driver.rb#22
    def load_selenium; end

    # source://capybara//lib/capybara/selenium/driver.rb#59
    def register_specialization(browser_name, specialization); end

    # source://capybara//lib/capybara/selenium/driver.rb#20
    def selenium_webdriver_version; end

    # source://capybara//lib/capybara/selenium/driver.rb#57
    def specializations; end
  end
end

# source://capybara//lib/capybara/selenium/driver.rb#15
Capybara::Selenium::Driver::CAPS_VERSION = T.let(T.unsafe(nil), Gem::Requirement)

# source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#6
module Capybara::Selenium::Driver::ChromeDriver
  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#14
  def fullscreen_window(handle); end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#36
  def reset!; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#25
  def resize_window_to(handle, width, height); end

  private

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#105
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#91
  def cdp_unsupported_errors; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#109
  def chromedriver_version; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#65
  def clear_all_storage?; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#77
  def clear_storage; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#84
  def delete_all_cookies; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#95
  def execute_cdp(cmd, params = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#73
  def storage_clears; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#59
  def storage_types_to_clear; end

  # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#69
  def uniform_storage_clear?; end

  class << self
    # source://capybara//lib/capybara/selenium/driver_specializations/chrome_driver.rb#7
    def extended(base); end
  end
end

# source://capybara//lib/capybara/selenium/driver.rb#9
Capybara::Selenium::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#5
module Capybara::Selenium::Driver::EdgeDriver
  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#57
  def download_path=(path); end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#12
  def fullscreen_window(handle); end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#36
  def reset!; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#25
  def resize_window_to(handle, width, height); end

  private

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#111
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#101
  def cdp_unsupported_errors; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#74
  def clear_all_storage?; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#86
  def clear_storage; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#92
  def delete_all_cookies; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#115
  def edgedriver_version; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#105
  def execute_cdp(cmd, params = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#82
  def storage_clears; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#68
  def storage_types_to_clear; end

  # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#78
  def uniform_storage_clear?; end

  class << self
    # source://capybara//lib/capybara/selenium/driver_specializations/edge_driver.rb#6
    def extended(base); end
  end
end

# source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#5
module Capybara::Selenium::Driver::FirefoxDriver
  class << self
    # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#6
    def extended(driver); end

    # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#12
    def w3c?(driver); end
  end
end

# source://capybara//lib/capybara/selenium/driver_specializations/internet_explorer_driver.rb#5
module Capybara::Selenium::Driver::InternetExplorerDriver
  # source://capybara//lib/capybara/selenium/driver_specializations/internet_explorer_driver.rb#6
  def switch_to_frame(frame); end

  private

  # source://capybara//lib/capybara/selenium/driver_specializations/internet_explorer_driver.rb#18
  def build_node(native_node, initial_cache = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/selenium/driver.rb#14
Capybara::Selenium::Driver::SPECIAL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/selenium/driver_specializations/safari_driver.rb#5
module Capybara::Selenium::Driver::SafariDriver
  # source://capybara//lib/capybara/selenium/driver_specializations/safari_driver.rb#6
  def switch_to_frame(frame); end

  private

  # source://capybara//lib/capybara/selenium/driver_specializations/safari_driver.rb#18
  def build_node(native_node, initial_cache = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#18
module Capybara::Selenium::Driver::W3CFirefoxDriver
  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#59
  def refresh; end

  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#41
  def reset!; end

  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#30
  def resize_window_to(handle, width, height); end

  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#68
  def switch_to_frame(frame); end

  private

  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#84
  def browser_version; end

  # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#80
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  class << self
    # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#20
    def extended(driver); end

    # source://capybara//lib/capybara/selenium/driver_specializations/firefox_driver.rb#25
    def pause_broken?(sel_driver); end
  end
end

# source://capybara//lib/capybara/selenium/nodes/edge_node.rb#5
class Capybara::Selenium::EdgeNode < ::Capybara::Selenium::Node
  include ::Capybara::Selenium::Node::Html5Drag

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#41
  def click(*_arg0); end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#52
  def disabled?; end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#35
  def drop(*args); end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#58
  def select_option; end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#17
  def set_file(value); end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#8
  def set_text(value, clear: T.unsafe(nil), **_unused); end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#68
  def visible?; end

  private

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#88
  def browser_version; end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#95
  def chrome_edge?; end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#82
  def file_errors; end

  # source://capybara//lib/capybara/selenium/nodes/edge_node.rb#99
  def native_displayed?; end
end

# source://capybara//lib/capybara/selenium/extensions/find.rb#5
module Capybara::Selenium::Find
  # source://capybara//lib/capybara/selenium/extensions/find.rb#10
  def find_css(selector, uses_visibility: T.unsafe(nil), texts: T.unsafe(nil), styles: T.unsafe(nil), position: T.unsafe(nil), **_options); end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#6
  def find_xpath(selector, uses_visibility: T.unsafe(nil), styles: T.unsafe(nil), position: T.unsafe(nil), **_options); end

  private

  # source://capybara//lib/capybara/selenium/extensions/find.rb#54
  def build_hints_js(uses_visibility, styles, position); end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#96
  def es_context; end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#44
  def filter_by_text(elements, texts); end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#16
  def find_by(format, selector, uses_visibility:, texts:, styles:, position:); end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#27
  def gather_hints(elements, uses_visibility:, styles:, position:); end

  # source://capybara//lib/capybara/selenium/extensions/find.rb#100
  def is_displayed_atom; end
end

# source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#6
class Capybara::Selenium::FirefoxNode < ::Capybara::Selenium::Node
  include ::Capybara::Selenium::Node::Html5Drag
  include ::Capybara::Selenium::Node::FileInputClickEmulation

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#10
  def click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#22
  def disabled?; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#56
  def drop(*args); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#43
  def focused?; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#60
  def hover; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#67
  def select_option; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#47
  def send_keys(*args); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#26
  def set_file(value); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#75
  def visible?; end

  private

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#100
  def _send_keys(keys, actions = T.unsafe(nil), down_keys = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#133
  def browser_version; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#89
  def native_displayed?; end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#93
  def perform_with_options(click_options); end

  # source://capybara//lib/capybara/selenium/nodes/firefox_node.rb#125
  def upload(local_file); end
end

# source://capybara//lib/capybara/selenium/nodes/ie_node.rb#5
class Capybara::Selenium::IENode < ::Capybara::Selenium::Node
  # source://capybara//lib/capybara/selenium/nodes/ie_node.rb#6
  def disabled?; end
end

# source://capybara//lib/capybara/selenium/node.rb#8
class Capybara::Selenium::Node < ::Capybara::Driver::Node
  include ::Capybara::Selenium::Find
  include ::Capybara::Selenium::Scroll

  # source://capybara//lib/capybara/selenium/node.rb#27
  def [](name); end

  # source://capybara//lib/capybara/selenium/node.rb#18
  def all_text; end

  # source://capybara//lib/capybara/selenium/node.rb#194
  def checked?; end

  # source://capybara//lib/capybara/selenium/node.rb#108
  def click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/node.rb#204
  def content_editable?; end

  # source://capybara//lib/capybara/selenium/node.rb#197
  def disabled?; end

  # source://capybara//lib/capybara/selenium/node.rb#148
  def double_click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/node.rb#165
  def drag_to(element, drop_modifiers: T.unsafe(nil), **_arg2); end

  # source://capybara//lib/capybara/selenium/node.rb#178
  def drop(*_); end

  # source://capybara//lib/capybara/selenium/node.rb#161
  def hover; end

  # source://capybara//lib/capybara/selenium/node.rb#193
  def multiple?; end

  # source://capybara//lib/capybara/selenium/node.rb#212
  def obscured?(x: T.unsafe(nil), y: T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/node.rb#208
  def path; end

  # source://capybara//lib/capybara/selenium/node.rb#192
  def readonly?; end

  # source://capybara//lib/capybara/selenium/node.rb#219
  def rect; end

  # source://capybara//lib/capybara/selenium/node.rb#131
  def right_click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/node.rb#98
  def select_option; end

  # source://capybara//lib/capybara/selenium/node.rb#194
  def selected?; end

  # source://capybara//lib/capybara/selenium/node.rb#157
  def send_keys(*args); end

  # source://capybara//lib/capybara/selenium/node.rb#61
  def set(value, **options); end

  # source://capybara//lib/capybara/selenium/node.rb#223
  def shadow_root; end

  # source://capybara//lib/capybara/selenium/node.rb#41
  def style(styles); end

  # source://capybara//lib/capybara/selenium/node.rb#182
  def tag_name; end

  # source://capybara//lib/capybara/selenium/node.rb#102
  def unselect_option; end

  # source://capybara//lib/capybara/selenium/node.rb#33
  def value; end

  # source://capybara//lib/capybara/selenium/node.rb#191
  def visible?; end

  # source://capybara//lib/capybara/selenium/node.rb#12
  def visible_text; end

  protected

  # source://capybara//lib/capybara/selenium/node.rb#232
  def scroll_if_needed; end

  # source://capybara//lib/capybara/selenium/node.rb#239
  def scroll_to_center; end

  private

  # source://capybara//lib/capybara/selenium/node.rb#485
  def action_pause(action, duration); end

  # source://capybara//lib/capybara/selenium/node.rb#417
  def action_with_modifiers(click_options); end

  # source://capybara//lib/capybara/selenium/node.rb#520
  def attrs(*attr_names); end

  # source://capybara//lib/capybara/selenium/node.rb#301
  def auto_rapid_set_length; end

  # source://capybara//lib/capybara/selenium/node.rb#270
  def boolean_attr(val); end

  # source://capybara//lib/capybara/selenium/node.rb#468
  def bridge; end

  # source://capybara//lib/capybara/selenium/node.rb#464
  def browser; end

  # source://capybara//lib/capybara/selenium/node.rb#472
  def browser_action; end

  # source://capybara//lib/capybara/selenium/node.rb#516
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  # source://capybara//lib/capybara/selenium/node.rb#476
  def capabilities; end

  # source://capybara//lib/capybara/selenium/node.rb#508
  def each_key(keys, &block); end

  # source://capybara//lib/capybara/selenium/node.rb#512
  def find_context; end

  # source://capybara//lib/capybara/selenium/node.rb#454
  def modifiers_down(actions, keys); end

  # source://capybara//lib/capybara/selenium/node.rb#459
  def modifiers_up(actions, keys); end

  # source://capybara//lib/capybara/selenium/node.rb#532
  def native_id; end

  # source://capybara//lib/capybara/selenium/node.rb#497
  def normalize_keys(keys); end

  # source://capybara//lib/capybara/selenium/node.rb#305
  def perform_with_options(click_options, &block); end

  # source://capybara//lib/capybara/selenium/node.rb#275
  def select_node; end

  # source://capybara//lib/capybara/selenium/node.rb#343
  def set_color(value); end

  # source://capybara//lib/capybara/selenium/node.rb#393
  def set_content_editable(value); end

  # source://capybara//lib/capybara/selenium/node.rb#319
  def set_date(value); end

  # source://capybara//lib/capybara/selenium/node.rb#335
  def set_datetime_local(value); end

  # source://capybara//lib/capybara/selenium/node.rb#365
  def set_file(value); end

  # source://capybara//lib/capybara/selenium/node.rb#347
  def set_range(value); end

  # source://capybara//lib/capybara/selenium/node.rb#279
  def set_text(value, clear: T.unsafe(nil), rapid: T.unsafe(nil), **_unused); end

  # source://capybara//lib/capybara/selenium/node.rb#327
  def set_time(value); end

  # source://capybara//lib/capybara/selenium/node.rb#538
  def shadow_root?; end

  # source://capybara//lib/capybara/selenium/node.rb#256
  def sibling_index(parent, node, selector); end

  # source://capybara//lib/capybara/selenium/node.rb#351
  def update_value_js(value); end

  # source://capybara//lib/capybara/selenium/node.rb#480
  def w3c?; end

  # source://capybara//lib/capybara/selenium/node.rb#375
  def with_file_detector; end
end

# source://capybara//lib/capybara/selenium/node.rb#636
class Capybara::Selenium::Node::ClickOptions
  # source://capybara//lib/capybara/selenium/node.rb#639
  def initialize(keys, options); end

  # source://capybara//lib/capybara/selenium/node.rb#652
  def center_offset?; end

  # source://capybara//lib/capybara/selenium/node.rb#648
  def coords; end

  # source://capybara//lib/capybara/selenium/node.rb#644
  def coords?; end

  # source://capybara//lib/capybara/selenium/node.rb#660
  def delay; end

  # source://capybara//lib/capybara/selenium/node.rb#656
  def empty?; end

  # source://capybara//lib/capybara/selenium/node.rb#637
  def keys; end

  # source://capybara//lib/capybara/selenium/node.rb#637
  def options; end
end

# source://capybara//lib/capybara/selenium/extensions/file_input_click_emulation.rb#4
module Capybara::Selenium::Node::FileInputClickEmulation
  # source://capybara//lib/capybara/selenium/extensions/file_input_click_emulation.rb#5
  def click(keys = T.unsafe(nil), **options); end

  private

  # source://capybara//lib/capybara/selenium/extensions/file_input_click_emulation.rb#19
  def attaching_file?; end

  # source://capybara//lib/capybara/selenium/extensions/file_input_click_emulation.rb#23
  def emulate_click; end

  # source://capybara//lib/capybara/selenium/extensions/file_input_click_emulation.rb#15
  def visible_file_field?; end
end

# source://capybara//lib/capybara/selenium/node.rb#542
Capybara::Selenium::Node::GET_XPATH_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#4
module Capybara::Selenium::Node::Html5Drag
  # source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#7
  def drag_to(element, html5: T.unsafe(nil), delay: T.unsafe(nil), drop_modifiers: T.unsafe(nil)); end

  private

  # source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#36
  def html5_drop(*args); end

  # source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#31
  def perform_html5_drag(element, delay, drop_modifiers); end

  # source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#22
  def perform_legacy_drag(element, drop_modifiers); end
end

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#86
Capybara::Selenium::Node::Html5Drag::ATTACH_FILE = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#65
Capybara::Selenium::Node::Html5Drag::DROP_FILE = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#49
Capybara::Selenium::Node::Html5Drag::DROP_STRING = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#117
Capybara::Selenium::Node::Html5Drag::HTML5_DRAG_DROP_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#104
Capybara::Selenium::Node::Html5Drag::LEGACY_DRAG_CHECK = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/html5_drag.rb#97
Capybara::Selenium::Node::Html5Drag::MOUSEDOWN_TRACKER = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#7
class Capybara::Selenium::Node::ModifierKeysStack
  # source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#8
  def initialize; end

  # source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#12
  def include?(key); end

  # source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#24
  def pop; end

  # source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#16
  def press(key); end

  # source://capybara//lib/capybara/selenium/extensions/modifier_keys_stack.rb#20
  def push; end
end

# source://capybara//lib/capybara/selenium/node.rb#574
Capybara::Selenium::Node::OBSCURED_OR_OFFSET_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/node.rb#591
Capybara::Selenium::Node::RAPID_APPEND_TEXT = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/selenium/node.rb#602
class Capybara::Selenium::Node::SettableValue
  # source://capybara//lib/capybara/selenium/node.rb#605
  def initialize(value); end

  # source://capybara//lib/capybara/selenium/node.rb#613
  def dateable?; end

  # source://capybara//lib/capybara/selenium/node.rb#621
  def timeable?; end

  # source://capybara//lib/capybara/selenium/node.rb#617
  def to_date_str; end

  # source://capybara//lib/capybara/selenium/node.rb#629
  def to_datetime_str; end

  # source://capybara//lib/capybara/selenium/node.rb#609
  def to_s; end

  # source://capybara//lib/capybara/selenium/node.rb#625
  def to_time_str; end

  # source://capybara//lib/capybara/selenium/node.rb#603
  def value; end
end

# source://capybara//lib/capybara/selenium/nodes/safari_node.rb#6
class Capybara::Selenium::SafariNode < ::Capybara::Selenium::Node
  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#9
  def click(keys = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#53
  def disabled?; end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#86
  def hover; end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#28
  def select_option; end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#63
  def send_keys(*args); end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#57
  def set_file(value); end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#72
  def set_text(value, clear: T.unsafe(nil), **_unused); end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#37
  def unselect_option; end

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#42
  def visible_text; end

  private

  # source://capybara//lib/capybara/selenium/nodes/safari_node.rb#93
  def _send_keys(keys, actions = T.unsafe(nil), down_keys = T.unsafe(nil)); end
end

# source://capybara//lib/capybara/selenium/nodes/safari_node.rb#113
Capybara::Selenium::SafariNode::MODIFIER_KEYS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/selenium/extensions/scroll.rb#5
module Capybara::Selenium::Scroll
  # source://capybara//lib/capybara/selenium/extensions/scroll.rb#6
  def scroll_by(x, y); end

  # source://capybara//lib/capybara/selenium/extensions/scroll.rb#18
  def scroll_to(element, location, position = T.unsafe(nil)); end

  private

  # source://capybara//lib/capybara/selenium/extensions/scroll.rb#32
  def scroll_element_to_location(element, location); end

  # source://capybara//lib/capybara/selenium/extensions/scroll.rb#64
  def scroll_to_coords(x, y); end

  # source://capybara//lib/capybara/selenium/extensions/scroll.rb#54
  def scroll_to_location(location); end
end

# source://capybara//lib/capybara/selenium/extensions/scroll.rb#48
Capybara::Selenium::Scroll::SCROLL_POSITIONS = T.let(T.unsafe(nil), Hash)

# source://capybara//lib/capybara/server/middleware.rb#4
class Capybara::Server
  # source://capybara//lib/capybara/server.rb#21
  def initialize(app, *deprecated_options, port: T.unsafe(nil), host: T.unsafe(nil), reportable_errors: T.unsafe(nil), extra_middleware: T.unsafe(nil)); end

  # source://capybara//lib/capybara/server.rb#19
  def app; end

  # source://capybara//lib/capybara/server.rb#91
  def base_url; end

  # source://capybara//lib/capybara/server.rb#72
  def boot; end

  # source://capybara//lib/capybara/server.rb#45
  def error; end

  # source://capybara//lib/capybara/server.rb#19
  def host; end

  # source://capybara//lib/capybara/server.rb#19
  def port; end

  # source://capybara//lib/capybara/server.rb#41
  def reset_error!; end

  # source://capybara//lib/capybara/server.rb#53
  def responsive?; end

  # source://capybara//lib/capybara/server.rb#49
  def using_ssl?; end

  # source://capybara//lib/capybara/server.rb#63
  def wait_for_pending_requests; end

  private

  # source://capybara//lib/capybara/server.rb#109
  def find_available_port(host); end

  # source://capybara//lib/capybara/server.rb#97
  def middleware; end

  # source://capybara//lib/capybara/server.rb#105
  def pending_requests?; end

  # source://capybara//lib/capybara/server.rb#101
  def port_key; end

  class << self
    # source://capybara//lib/capybara/server.rb#14
    def ports; end
  end
end

# source://capybara//lib/capybara/server/animation_disabler.rb#5
class Capybara::Server::AnimationDisabler
  # source://capybara//lib/capybara/server/animation_disabler.rb#17
  def initialize(app); end

  # source://capybara//lib/capybara/server/animation_disabler.rb#25
  def call(env); end

  private

  # source://capybara//lib/capybara/server/animation_disabler.rb#51
  def directive_nonces(headers); end

  # source://capybara//lib/capybara/server/animation_disabler.rb#40
  def disable_css_markup; end

  # source://capybara//lib/capybara/server/animation_disabler.rb#40
  def disable_js_markup; end

  # source://capybara//lib/capybara/server/animation_disabler.rb#42
  def html_content?(headers); end

  # source://capybara//lib/capybara/server/animation_disabler.rb#46
  def insert_disable(html, nonces); end

  class << self
    # source://capybara//lib/capybara/server/animation_disabler.rb#6
    def selector_for(css_or_bool); end
  end
end

# source://capybara//lib/capybara/server/animation_disabler.rb#65
Capybara::Server::AnimationDisabler::DISABLE_CSS_MARKUP_TEMPLATE = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/server/animation_disabler.rb#74
Capybara::Server::AnimationDisabler::DISABLE_JS_MARKUP_TEMPLATE = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/server/checker.rb#5
class Capybara::Server::Checker
  # source://capybara//lib/capybara/server/checker.rb#8
  def initialize(host, port); end

  # source://capybara//lib/capybara/server/checker.rb#13
  def request(&block); end

  # source://capybara//lib/capybara/server/checker.rb#21
  def ssl?; end

  private

  # source://capybara//lib/capybara/server/checker.rb#27
  def http_request(&block); end

  # source://capybara//lib/capybara/server/checker.rb#31
  def https_request(&block); end

  # source://capybara//lib/capybara/server/checker.rb#35
  def make_request(**options, &block); end

  # source://capybara//lib/capybara/server/checker.rb#39
  def ssl_options; end
end

# source://capybara//lib/capybara/server/checker.rb#6
Capybara::Server::Checker::TRY_HTTPS_ERRORS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/server/middleware.rb#5
class Capybara::Server::Middleware
  # source://capybara//lib/capybara/server/middleware.rb#31
  def initialize(app, server_errors, extra_middleware = T.unsafe(nil)); end

  # source://capybara//lib/capybara/server/middleware.rb#52
  def call(env); end

  # source://capybara//lib/capybara/server/middleware.rb#48
  def clear_error; end

  # source://capybara//lib/capybara/server/middleware.rb#29
  def error; end

  # source://capybara//lib/capybara/server/middleware.rb#40
  def pending_requests; end

  # source://capybara//lib/capybara/server/middleware.rb#44
  def pending_requests?; end
end

# source://capybara//lib/capybara/server/middleware.rb#6
class Capybara::Server::Middleware::Counter
  # source://capybara//lib/capybara/server/middleware.rb#7
  def initialize; end

  # source://capybara//lib/capybara/server/middleware.rb#16
  def decrement(uri); end

  # source://capybara//lib/capybara/server/middleware.rb#12
  def increment(uri); end

  # source://capybara//lib/capybara/server/middleware.rb#20
  def positive?; end

  # source://capybara//lib/capybara/server/middleware.rb#24
  def value; end
end

# source://capybara//lib/capybara/session.rb#38
class Capybara::Session
  include ::Capybara::SessionMatchers

  # source://capybara//lib/capybara/session.rb#78
  def initialize(mode, app = T.unsafe(nil)); end

  # source://capybara//lib/capybara/session.rb#658
  def accept_alert(text = T.unsafe(nil), **options, &blk); end

  # source://capybara//lib/capybara/session.rb#668
  def accept_confirm(text = T.unsafe(nil), **options, &blk); end

  # source://capybara//lib/capybara/session.rb#689
  def accept_prompt(text = T.unsafe(nil), **options, &blk); end

  # source://capybara//lib/capybara/session.rb#322
  def active_element; end

  # source://capybara//lib/capybara/session.rb#771
  def all(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#75
  def app; end

  # source://capybara//lib/capybara/session.rb#771
  def assert_all_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_any_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_no_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_no_text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#780
  def assert_no_title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_none_of_selectors(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def assert_text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#780
  def assert_title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def attach_file(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#196
  def body; end

  # source://capybara//lib/capybara/session.rb#771
  def check(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def choose(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#129
  def cleanup!; end

  # source://capybara//lib/capybara/session.rb#771
  def click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def click_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def click_link(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def click_link_or_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def click_on(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#828
  def config; end

  # source://capybara//lib/capybara/session.rb#818
  def configure; end

  # source://capybara//lib/capybara/session.rb#221
  def current_host; end

  # source://capybara//lib/capybara/session.rb#206
  def current_path; end

  # source://capybara//lib/capybara/session.rb#790
  def current_scope; end

  # source://capybara//lib/capybara/session.rb#230
  def current_url; end

  # source://capybara//lib/capybara/session.rb#459
  def current_window; end

  # source://capybara//lib/capybara/session.rb#678
  def dismiss_confirm(text = T.unsafe(nil), **options, &blk); end

  # source://capybara//lib/capybara/session.rb#699
  def dismiss_prompt(text = T.unsafe(nil), **options, &blk); end

  # source://capybara//lib/capybara/session.rb#765
  def document; end

  # source://capybara//lib/capybara/session.rb#771
  def double_click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#99
  def driver; end

  # source://capybara//lib/capybara/session.rb#632
  def evaluate_async_script(script, *args); end

  # source://capybara//lib/capybara/session.rb#618
  def evaluate_script(script, *args); end

  # source://capybara//lib/capybara/session.rb#603
  def execute_script(script, *args); end

  # source://capybara//lib/capybara/session.rb#771
  def fill_in(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find_all(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find_button(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find_by_id(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find_field(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def find_link(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def first(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#296
  def go_back; end

  # source://capybara//lib/capybara/session.rb#304
  def go_forward; end

  # source://capybara//lib/capybara/session.rb#771
  def has_button?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_checked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_content?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_css?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_link?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_button?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_checked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_content?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_css?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_link?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_select?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_selector?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_table?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_text?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#780
  def has_no_title?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_unchecked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_no_xpath?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_select?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_selector?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_table?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_text?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#780
  def has_title?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_unchecked_field?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def has_xpath?(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#196
  def html; end

  # source://capybara//lib/capybara/session.rb#786
  def inspect; end

  # source://capybara//lib/capybara/session.rb#75
  def mode; end

  # source://capybara//lib/capybara/session.rb#483
  def open_new_window(kind = T.unsafe(nil)); end

  # source://capybara//lib/capybara/session.rb#771
  def query(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#146
  def quit; end

  # source://capybara//lib/capybara/session.rb#157
  def raise_server_error!; end

  # source://capybara//lib/capybara/session.rb#287
  def refresh; end

  # source://capybara//lib/capybara/session.rb#771
  def refute_selector(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#129
  def reset!; end

  # source://capybara//lib/capybara/session.rb#129
  def reset_session!; end

  # source://capybara//lib/capybara/session.rb#178
  def response_headers; end

  # source://capybara//lib/capybara/session.rb#771
  def right_click(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#731
  def save_and_open_page(path = T.unsafe(nil)); end

  # source://capybara//lib/capybara/session.rb#761
  def save_and_open_screenshot(path = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/session.rb#715
  def save_page(path = T.unsafe(nil)); end

  # source://capybara//lib/capybara/session.rb#746
  def save_screenshot(path = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/session.rb#771
  def scroll_by(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def scroll_to(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def select(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#312
  def send_keys(*args, **kw_args); end

  # source://capybara//lib/capybara/session.rb#75
  def server; end

  # source://capybara//lib/capybara/session.rb#836
  def server_url; end

  # source://capybara//lib/capybara/session.rb#196
  def source; end

  # source://capybara//lib/capybara/session.rb#188
  def status_code; end

  # source://capybara//lib/capybara/session.rb#407
  def switch_to_frame(frame); end

  # source://capybara//lib/capybara/session.rb#511
  def switch_to_window(window = T.unsafe(nil), **options, &window_locator); end

  # source://capybara//lib/capybara/session.rb#76
  def synchronized; end

  # source://capybara//lib/capybara/session.rb#76
  def synchronized=(_arg0); end

  # source://capybara//lib/capybara/session.rb#771
  def text(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#780
  def title(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def uncheck(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#771
  def unselect(*_arg0, **_arg1, &_arg2); end

  # source://capybara//lib/capybara/session.rb#799
  def using_wait_time(seconds, &block); end

  # source://capybara//lib/capybara/session.rb#260
  def visit(visit_uri); end

  # source://capybara//lib/capybara/session.rb#580
  def window_opened_by(**options); end

  # source://capybara//lib/capybara/session.rb#470
  def windows; end

  # source://capybara//lib/capybara/session.rb#361
  def within(*args, **kw_args); end

  # source://capybara//lib/capybara/session.rb#361
  def within_element(*args, **kw_args); end

  # source://capybara//lib/capybara/session.rb#378
  def within_fieldset(locator, &block); end

  # source://capybara//lib/capybara/session.rb#447
  def within_frame(*args, **kw_args); end

  # source://capybara//lib/capybara/session.rb#388
  def within_table(locator, &block); end

  # source://capybara//lib/capybara/session.rb#544
  def within_window(window_or_proc); end

  private

  # source://capybara//lib/capybara/session.rb#901
  def _find_frame(*args, **kw_args); end

  # source://capybara//lib/capybara/session.rb#917
  def _switch_to_window(window = T.unsafe(nil), **options, &window_locator); end

  # source://capybara//lib/capybara/session.rb#937
  def _switch_to_window_by_locator; end

  # source://capybara//lib/capybara/session.rb#848
  def accept_modal(type, text_or_options, options, &blk); end

  # source://capybara//lib/capybara/session.rb#897
  def adjust_server_port(uri); end

  # source://capybara//lib/capybara/session.rb#875
  def default_fn(extension); end

  # source://capybara//lib/capybara/session.rb#852
  def dismiss_modal(type, text_or_options, options, &blk); end

  # source://capybara//lib/capybara/session.rb#844
  def driver_args(args); end

  # source://capybara//lib/capybara/session.rb#884
  def element_script_result(arg); end

  # source://capybara//lib/capybara/session.rb#856
  def modal_options(text = T.unsafe(nil), **options); end

  # source://capybara//lib/capybara/session.rb#862
  def open_file(path); end

  # source://capybara//lib/capybara/session.rb#869
  def prepare_path(path, extension); end

  # source://capybara//lib/capybara/session.rb#880
  def scopes; end

  # source://capybara//lib/capybara/session.rb#945
  def synchronize_windows(options, &block); end

  class << self
    # source://capybara//lib/capybara/session.rb#824
    def instance_created?; end
  end
end

# source://capybara//lib/capybara/session.rb#57
Capybara::Session::DOCUMENT_METHODS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session.rb#73
Capybara::Session::DSL_METHODS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session.rb#70
Capybara::Session::MODAL_METHODS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session.rb#41
Capybara::Session::NODE_METHODS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session.rb#60
Capybara::Session::SESSION_METHODS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session/config.rb#6
class Capybara::SessionConfig
  # source://capybara//lib/capybara/session/config.rb#13
  def always_include_port; end

  # source://capybara//lib/capybara/session/config.rb#13
  def always_include_port=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def app_host; end

  # source://capybara//lib/capybara/session/config.rb#85
  def app_host=(url); end

  # source://capybara//lib/capybara/session/config.rb#13
  def asset_host; end

  # source://capybara//lib/capybara/session/config.rb#13
  def asset_host=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def automatic_label_click; end

  # source://capybara//lib/capybara/session/config.rb#13
  def automatic_label_click=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def automatic_reload; end

  # source://capybara//lib/capybara/session/config.rb#13
  def automatic_reload=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_host; end

  # source://capybara//lib/capybara/session/config.rb#94
  def default_host=(url); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_max_wait_time; end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_max_wait_time=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_normalize_ws; end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_normalize_ws=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_retry_interval; end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_retry_interval=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_selector; end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_selector=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_set_options; end

  # source://capybara//lib/capybara/session/config.rb#13
  def default_set_options=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def disable_animation; end

  # source://capybara//lib/capybara/session/config.rb#13
  def disable_animation=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def enable_aria_label; end

  # source://capybara//lib/capybara/session/config.rb#13
  def enable_aria_label=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def enable_aria_role; end

  # source://capybara//lib/capybara/session/config.rb#13
  def enable_aria_role=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def exact; end

  # source://capybara//lib/capybara/session/config.rb#13
  def exact=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def exact_text; end

  # source://capybara//lib/capybara/session/config.rb#13
  def exact_text=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def ignore_hidden_elements; end

  # source://capybara//lib/capybara/session/config.rb#13
  def ignore_hidden_elements=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def match; end

  # source://capybara//lib/capybara/session/config.rb#13
  def match=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def predicates_wait; end

  # source://capybara//lib/capybara/session/config.rb#13
  def predicates_wait=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def raise_server_errors; end

  # source://capybara//lib/capybara/session/config.rb#13
  def raise_server_errors=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def run_server; end

  # source://capybara//lib/capybara/session/config.rb#13
  def run_server=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def save_path; end

  # source://capybara//lib/capybara/session/config.rb#13
  def save_path=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def server_errors; end

  # source://capybara//lib/capybara/session/config.rb#80
  def server_errors=(errors); end

  # source://capybara//lib/capybara/session/config.rb#75
  def server_host; end

  # source://capybara//lib/capybara/session/config.rb#13
  def server_host=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def server_port; end

  # source://capybara//lib/capybara/session/config.rb#13
  def server_port=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def test_id; end

  # source://capybara//lib/capybara/session/config.rb#111
  def test_id=(id); end

  # source://capybara//lib/capybara/session/config.rb#13
  def visible_text_only; end

  # source://capybara//lib/capybara/session/config.rb#13
  def visible_text_only=(_arg0); end

  # source://capybara//lib/capybara/session/config.rb#13
  def w3c_click_offset; end

  # source://capybara//lib/capybara/session/config.rb#13
  def w3c_click_offset=(_arg0); end

  private

  # source://capybara//lib/capybara/session/config.rb#115
  def initialize_copy(other); end
end

# source://capybara//lib/capybara/session/config.rb#7
Capybara::SessionConfig::OPTIONS = T.let(T.unsafe(nil), Array)

# source://capybara//lib/capybara/session/matchers.rb#4
module Capybara::SessionMatchers
  # source://capybara//lib/capybara/session/matchers.rb#22
  def assert_current_path(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/session/matchers.rb#38
  def assert_no_current_path(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/session/matchers.rb#53
  def has_current_path?(path, **options, &optional_filter_block); end

  # source://capybara//lib/capybara/session/matchers.rb#66
  def has_no_current_path?(path, **options, &optional_filter_block); end

  private

  # source://capybara//lib/capybara/session/matchers.rb#72
  def _verify_current_path(path, filter_block, **options); end

  # source://capybara//lib/capybara/session/matchers.rb#80
  def make_predicate(options); end
end

# source://capybara//lib/capybara.rb#19
class Capybara::UnselectNotAllowed < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/version.rb#4
Capybara::VERSION = T.let(T.unsafe(nil), String)

# source://capybara//lib/capybara/window.rb#22
class Capybara::Window
  # source://capybara//lib/capybara/window.rb#30
  def initialize(session, handle); end

  # source://capybara//lib/capybara/window.rb#115
  def ==(other); end

  # source://capybara//lib/capybara/window.rb#67
  def close; end

  # source://capybara//lib/capybara/window.rb#44
  def closed?; end

  # source://capybara//lib/capybara/window.rb#50
  def current?; end

  # source://capybara//lib/capybara/window.rb#115
  def eql?(other); end

  # source://capybara//lib/capybara/window.rb#38
  def exists?; end

  # source://capybara//lib/capybara/window.rb#111
  def fullscreen; end

  # source://capybara//lib/capybara/window.rb#24
  def handle; end

  # source://capybara//lib/capybara/window.rb#120
  def hash; end

  # source://capybara//lib/capybara/window.rb#124
  def inspect; end

  # source://capybara//lib/capybara/window.rb#100
  def maximize; end

  # source://capybara//lib/capybara/window.rb#88
  def resize_to(width, height); end

  # source://capybara//lib/capybara/window.rb#27
  def session; end

  # source://capybara//lib/capybara/window.rb#77
  def size; end

  private

  # source://capybara//lib/capybara/window.rb#130
  def wait_for_stable_size(seconds = T.unsafe(nil)); end
end

# source://capybara//lib/capybara.rb#23
class Capybara::WindowError < ::Capybara::CapybaraError; end

# source://capybara//lib/capybara/selector/xpath_extensions.rb#3
module XPath
  class << self
    # source://xpath/3.2.0/lib/xpath.rb#15
    def generate; end
  end
end

# source://capybara//lib/capybara/selector/xpath_extensions.rb#12
module XPath::DSL
  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def !(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def !=(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def %(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def &(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def *(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#62
  def +(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def /(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def <(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def <=(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def ==(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def >(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def >=(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#45
  def [](expression); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def ancestor(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def ancestor_or_self(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def and(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#21
  def anywhere(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#25
  def attr(expression); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def attribute(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#17
  def axis(name, *element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#58
  def binary_operator(name, rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def boolean(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def ceiling(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#13
  def child(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def concat(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def contains(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#147
  def contains_word(word); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def count(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#33
  def css(selector); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#5
  def current; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#9
  def descendant(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def descendant_or_self(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def divide(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#143
  def ends_with(suffix); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def equals(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def false(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def floor(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def following(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def following_sibling(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#37
  def function(name, *arguments); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def gt(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def gte(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def id(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def inverse(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#54
  def is(expression); end

  # source://capybara//lib/capybara/selector/xpath_extensions.rb#13
  def join(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def lang(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#67
  def last; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def local_name(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#154
  def lowercase; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def lt(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def lte(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#41
  def method(name, *arguments); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def minus(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def mod(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def multiply(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def n(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def namespace(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def namespace_uri(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#166
  def next_sibling(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def normalize(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def normalize_space(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def not(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def not_equals(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def number(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#162
  def one_of(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def or(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def parent(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def plus(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#71
  def position; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def preceding(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def preceding_sibling(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#170
  def previous_sibling(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#95
  def qname; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def round(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def self(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#136
  def self_axis(*element_names); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def starts_with(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def string(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def string_length(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def substring(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def substring_after(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def substring_before(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def sum(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#29
  def text; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def translate(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def true(*args); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#62
  def union(*expressions); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#158
  def uppercase; end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#45
  def where(expression); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#122
  def |(rhs); end

  # source://xpath/3.2.0/lib/xpath/dsl.rb#90
  def ~(*args); end
end

# source://capybara//lib/capybara/selector/xpath_extensions.rb#4
class XPath::Renderer
  # source://xpath/3.2.0/lib/xpath/renderer.rb#9
  def initialize(type); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#55
  def anywhere(element_names); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#63
  def attribute(current, name); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#51
  def axis(current, name, element_names); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#71
  def binary_operator(name, left, right); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#47
  def child(current, element_names); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#18
  def convert_argument(argument); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#95
  def css(current, selector); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#43
  def descendant(current, element_names); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#106
  def function(name, *arguments); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#75
  def is(one, two); end

  # source://capybara//lib/capybara/selector/xpath_extensions.rb#5
  def join(*expressions); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#91
  def literal(node); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#13
  def render(node); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#28
  def string_literal(string); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#87
  def text(current); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#39
  def this_node; end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#102
  def union(*expressions); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#83
  def variable(name); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#59
  def where(on, condition); end

  private

  # source://xpath/3.2.0/lib/xpath/renderer.rb#122
  def valid_xml_name?(name); end

  # source://xpath/3.2.0/lib/xpath/renderer.rb#112
  def with_element_conditions(expression, element_names); end

  class << self
    # source://xpath/3.2.0/lib/xpath/renderer.rb#5
    def render(node, type); end
  end
end
