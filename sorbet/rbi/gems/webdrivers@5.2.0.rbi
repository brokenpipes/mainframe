# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webdrivers` gem.
# Please instead update this file by running `bin/tapioca gem webdrivers`.

# source://webdrivers//lib/webdrivers/network.rb#5
module Webdrivers
  class << self
    # source://webdrivers//lib/webdrivers/common.rb#35
    def cache_time; end

    # source://webdrivers//lib/webdrivers/common.rb#28
    def cache_time=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#64
    def configure; end

    # source://webdrivers//lib/webdrivers/common.rb#44
    def install_dir; end

    # source://webdrivers//lib/webdrivers/common.rb#28
    def install_dir=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#48
    def logger; end

    # source://webdrivers//lib/webdrivers/common.rb#68
    def net_http_ssl_fix; end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_addr; end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_addr=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_pass; end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_pass=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_port; end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_port=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_user; end

    # source://webdrivers//lib/webdrivers/common.rb#27
    def proxy_user=(_arg0); end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#20
class Webdrivers::BrowserNotFound < ::StandardError; end

# source://webdrivers//lib/webdrivers/chrome_finder.rb#7
class Webdrivers::ChromeFinder
  class << self
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#17
    def location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#9
    def version; end

    private

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#90
    def linux_location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#126
    def linux_version(location); end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#75
    def mac_location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#132
    def mac_version(location); end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#26
    def user_defined_location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#38
    def win_location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#116
    def win_version(location); end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#53
    def wsl_location; end

    # source://webdrivers//lib/webdrivers/chrome_finder.rb#122
    def wsl_version(location); end
  end
end

# source://webdrivers//lib/webdrivers/chromedriver.rb#8
class Webdrivers::Chromedriver < ::Webdrivers::Common
  class << self
    # source://webdrivers//lib/webdrivers/chromedriver.rb#59
    def base_url; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#50
    def browser_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#50
    def chrome_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#14
    def current_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#29
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/chromedriver.rb#100
    def apple_filename(driver_version); end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#90
    def apple_m1_compatible?(driver_version); end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#141
    def browser_build_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#141
    def chrome_build_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#128
    def current_build_version; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#108
    def direct_url(driver_version); end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#112
    def driver_filename(driver_version); end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#86
    def file_name; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#65
    def latest_point_release(version); end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#148
    def sufficient_binary?; end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#74
class Webdrivers::Common
  class << self
    # source://webdrivers//lib/webdrivers/common.rb#115
    def driver_path; end

    # source://webdrivers//lib/webdrivers/common.rb#104
    def remove; end

    # source://webdrivers//lib/webdrivers/common.rb#82
    def required_version; end

    # source://webdrivers//lib/webdrivers/common.rb#76
    def required_version=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#90
    def update; end

    private

    # source://webdrivers//lib/webdrivers/common.rb#147
    def binary_version; end

    # source://webdrivers//lib/webdrivers/common.rb#133
    def correct_binary?; end

    # source://webdrivers//lib/webdrivers/common.rb#125
    def download_url; end

    # source://webdrivers//lib/webdrivers/common.rb#121
    def download_version; end

    # source://webdrivers//lib/webdrivers/common.rb#129
    def exists?; end

    # source://webdrivers//lib/webdrivers/common.rb#143
    def normalize_version(version); end

    # source://webdrivers//lib/webdrivers/common.rb#139
    def sufficient_binary?; end

    # source://webdrivers//lib/webdrivers/common.rb#160
    def with_cache(file_name, driver_build = T.unsafe(nil), browser_build = T.unsafe(nil)); end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#11
class Webdrivers::ConnectionError < ::StandardError; end

# source://webdrivers//lib/webdrivers/common.rb#23
Webdrivers::DEFAULT_CACHE_TIME = T.let(T.unsafe(nil), Integer)

# source://webdrivers//lib/webdrivers/common.rb#24
Webdrivers::DEFAULT_INSTALL_DIR = T.let(T.unsafe(nil), String)

# source://webdrivers//lib/webdrivers/edge_finder.rb#7
class Webdrivers::EdgeFinder
  class << self
    # source://webdrivers//lib/webdrivers/edge_finder.rb#17
    def location; end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#9
    def version; end

    private

    # source://webdrivers//lib/webdrivers/edge_finder.rb#71
    def linux_location; end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#89
    def linux_version(location); end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#55
    def mac_location; end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#93
    def mac_version(location); end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#26
    def user_defined_location; end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#38
    def win_location; end

    # source://webdrivers//lib/webdrivers/edge_finder.rb#85
    def win_version(location); end
  end
end

# source://webdrivers//lib/webdrivers/edgedriver.rb#9
class Webdrivers::Edgedriver < ::Webdrivers::Chromedriver
  class << self
    # source://webdrivers//lib/webdrivers/edgedriver.rb#24
    def base_url; end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#16
    def browser_version; end

    private

    # source://webdrivers//lib/webdrivers/edgedriver.rb#68
    def apple_m1_compatible?(driver_version); end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#92
    def direct_url(driver_version); end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#78
    def driver_filename(driver_version); end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#44
    def failed_to_find_message(version); end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#64
    def file_name; end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#30
    def latest_point_release(version); end
  end
end

# source://webdrivers//lib/webdrivers/geckodriver.rb#7
class Webdrivers::Geckodriver < ::Webdrivers::Common
  class << self
    # source://webdrivers//lib/webdrivers/geckodriver.rb#35
    def base_url; end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#13
    def current_version; end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#27
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/geckodriver.rb#45
    def direct_url(version); end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#41
    def file_name; end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#49
    def platform_ext; end
  end
end

# source://webdrivers//lib/webdrivers/iedriver.rb#8
class Webdrivers::IEdriver < ::Webdrivers::Common
  class << self
    # source://webdrivers//lib/webdrivers/iedriver.rb#36
    def base_url; end

    # source://webdrivers//lib/webdrivers/iedriver.rb#14
    def current_version; end

    # source://webdrivers//lib/webdrivers/iedriver.rb#28
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/iedriver.rb#46
    def direct_url(version); end

    # source://webdrivers//lib/webdrivers/iedriver.rb#59
    def download_manifest; end

    # source://webdrivers//lib/webdrivers/iedriver.rb#50
    def downloads; end

    # source://webdrivers//lib/webdrivers/iedriver.rb#42
    def file_name; end
  end
end

# source://webdrivers//lib/webdrivers/logger.rb#15
class Webdrivers::Logger < ::Selenium::WebDriver::Logger
  # source://webdrivers//lib/webdrivers/logger.rb#16
  def initialize; end
end

# source://webdrivers//lib/webdrivers/network.rb#9
class Webdrivers::Network
  class << self
    # source://webdrivers//lib/webdrivers/network.rb#11
    def get(url, limit = T.unsafe(nil)); end

    # source://webdrivers//lib/webdrivers/network.rb#29
    def get_response(url, limit = T.unsafe(nil)); end

    # source://webdrivers//lib/webdrivers/network.rb#23
    def get_url(url, limit = T.unsafe(nil)); end

    # source://webdrivers//lib/webdrivers/network.rb#49
    def http; end

    # source://webdrivers//lib/webdrivers/network.rb#58
    def using_proxy; end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#17
class Webdrivers::NetworkError < ::StandardError; end

# source://webdrivers//lib/webdrivers/railtie.rb#6
class Webdrivers::Railtie < ::Rails::Railtie; end

# source://webdrivers//lib/webdrivers/system.rb#17
class Webdrivers::System
  class << self
    # source://webdrivers//lib/webdrivers/system.rb#151
    def apple_m1_architecture?; end

    # source://webdrivers//lib/webdrivers/system.rb#180
    def bitsize; end

    # source://webdrivers//lib/webdrivers/system.rb#41
    def cache_version(file_name, version); end

    # source://webdrivers//lib/webdrivers/system.rb#49
    def cached_version(file_name); end

    # source://webdrivers//lib/webdrivers/system.rb#184
    def call(process, arg = T.unsafe(nil)); end

    # source://webdrivers//lib/webdrivers/system.rb#93
    def decompress_file(tempfile, file_name, target); end

    # source://webdrivers//lib/webdrivers/system.rb#19
    def delete(file); end

    # source://webdrivers//lib/webdrivers/system.rb#60
    def download(url, target); end

    # source://webdrivers//lib/webdrivers/system.rb#70
    def download_file(url, target); end

    # source://webdrivers//lib/webdrivers/system.rb#87
    def exists?(file); end

    # source://webdrivers//lib/webdrivers/system.rb#37
    def install_dir; end

    # source://webdrivers//lib/webdrivers/system.rb#139
    def platform; end

    # source://webdrivers//lib/webdrivers/system.rb#168
    def to_win32_path(path); end

    # source://webdrivers//lib/webdrivers/system.rb#176
    def to_wsl_path(path); end

    # source://webdrivers//lib/webdrivers/system.rb#109
    def untarbz2_file(filename); end

    # source://webdrivers//lib/webdrivers/system.rb#115
    def untargz_file(source, target); end

    # source://webdrivers//lib/webdrivers/system.rb#126
    def unzip_file(filename, driver_name); end

    # source://webdrivers//lib/webdrivers/system.rb#53
    def valid_cache?(file_name); end

    # source://webdrivers//lib/webdrivers/system.rb#162
    def wsl_v1?; end
  end
end

# source://webdrivers//lib/webdrivers/version.rb#4
Webdrivers::VERSION = T.let(T.unsafe(nil), String)

# source://webdrivers//lib/webdrivers/common.rb#14
class Webdrivers::VersionError < ::StandardError; end
