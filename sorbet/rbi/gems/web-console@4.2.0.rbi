# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `web-console` gem.
# Please instead update this file by running `bin/tapioca gem web-console`.

# source://web-console//lib/web_console/source_location.rb#3
class SourceLocation
  # source://web-console//lib/web_console/source_location.rb#4
  def initialize(binding); end

  # source://web-console//lib/web_console/source_location.rb#10
  def lineno; end

  # source://web-console//lib/web_console/source_location.rb#9
  def path; end
end

# source://web-console//lib/web_console.rb#6
module WebConsole
  extend ::ActiveSupport::Autoload

  class << self
    # source://web-console//lib/web_console.rb#28
    def logger; end
  end
end

# source://web-console//lib/web_console/context.rb#5
class WebConsole::Context
  # source://web-console//lib/web_console/context.rb#6
  def initialize(binding); end

  # source://web-console//lib/web_console/context.rb#15
  def extract(input = T.unsafe(nil)); end

  private

  # source://web-console//lib/web_console/context.rb#41
  def eval(cmd); end

  # source://web-console//lib/web_console/context.rb#30
  def global; end

  # source://web-console//lib/web_console/context.rb#34
  def local(input); end
end

# source://web-console//lib/web_console/context.rb#21
WebConsole::Context::GLOBAL_OBJECTS = T.let(T.unsafe(nil), Array)

# source://web-console//lib/web_console/errors.rb#8
class WebConsole::DoubleRenderError < ::WebConsole::Error; end

# source://web-console//lib/web_console/errors.rb#5
class WebConsole::Error < ::StandardError; end

# source://web-console//lib/web_console/evaluator.rb#9
class WebConsole::Evaluator
  # source://web-console//lib/web_console/evaluator.rb#17
  def initialize(binding = T.unsafe(nil)); end

  # source://web-console//lib/web_console/evaluator.rb#11
  def cleaner; end

  # source://web-console//lib/web_console/evaluator.rb#21
  def eval(input); end

  private

  # source://web-console//lib/web_console/evaluator.rb#34
  def format_exception(exc); end

  class << self
    # source://web-console//lib/web_console/evaluator.rb#11
    def cleaner; end
  end
end

# source://web-console//lib/web_console/exception_mapper.rb#4
class WebConsole::ExceptionMapper
  # source://web-console//lib/web_console/exception_mapper.rb#23
  def initialize(exception); end

  # source://web-console//lib/web_console/exception_mapper.rb#33
  def [](index); end

  # source://web-console//lib/web_console/exception_mapper.rb#5
  def exc; end

  # source://web-console//lib/web_console/exception_mapper.rb#29
  def first; end

  private

  # source://web-console//lib/web_console/exception_mapper.rb#39
  def guess_binding_for_index(index); end

  # source://web-console//lib/web_console/exception_mapper.rb#49
  def guess_the_first_application_binding; end

  class << self
    # source://web-console//lib/web_console/exception_mapper.rb#17
    def find_binding(mappers, exception_object_id); end

    # source://web-console//lib/web_console/exception_mapper.rb#7
    def follow(exc); end
  end
end

# source://web-console//lib/web_console/injector.rb#5
class WebConsole::Injector
  # source://web-console//lib/web_console/injector.rb#6
  def initialize(body, headers); end

  # source://web-console//lib/web_console/injector.rb#15
  def inject(content); end
end

# source://web-console//lib/web_console/interceptor.rb#2
module WebConsole::Interceptor
  class << self
    # source://web-console//lib/web_console/interceptor.rb#3
    def call(request, exception); end
  end
end

# source://web-console//lib/web_console/middleware.rb#6
class WebConsole::Middleware
  # source://web-console//lib/web_console/middleware.rb#12
  def initialize(app); end

  # source://web-console//lib/web_console/middleware.rb#16
  def call(env); end

  # source://web-console//lib/web_console/middleware.rb#9
  def mount_point; end

  # source://web-console//lib/web_console/middleware.rb#9
  def mount_point=(val); end

  # source://web-console//lib/web_console/middleware.rb#10
  def whiny_requests; end

  # source://web-console//lib/web_console/middleware.rb#10
  def whiny_requests=(val); end

  private

  # source://web-console//lib/web_console/middleware.rb#54
  def acceptable_content_type?(headers); end

  # source://web-console//lib/web_console/middleware.rb#85
  def binding_change_re; end

  # source://web-console//lib/web_console/middleware.rb#131
  def call_app(env); end

  # source://web-console//lib/web_console/middleware.rb#111
  def change_stack_trace(id, request); end

  # source://web-console//lib/web_console/middleware.rb#72
  def create_regular_or_whiny_request(env); end

  # source://web-console//lib/web_console/middleware.rb#95
  def id_for_repl_session_stack_frame_change(request); end

  # source://web-console//lib/web_console/middleware.rb#89
  def id_for_repl_session_update(request); end

  # source://web-console//lib/web_console/middleware.rb#58
  def json_response(opts = T.unsafe(nil)); end

  # source://web-console//lib/web_console/middleware.rb#66
  def json_response_with_session(id, request, opts = T.unsafe(nil)); end

  # source://web-console//lib/web_console/middleware.rb#77
  def repl_sessions_re; end

  # source://web-console//lib/web_console/middleware.rb#125
  def respond_with_unacceptable_request; end

  # source://web-console//lib/web_console/middleware.rb#119
  def respond_with_unavailable_session(id); end

  # source://web-console//lib/web_console/middleware.rb#81
  def update_re; end

  # source://web-console//lib/web_console/middleware.rb#101
  def update_repl_session(id, request); end

  class << self
    # source://web-console//lib/web_console/middleware.rb#9
    def mount_point; end

    # source://web-console//lib/web_console/middleware.rb#9
    def mount_point=(val); end

    # source://web-console//lib/web_console/middleware.rb#10
    def whiny_requests; end

    # source://web-console//lib/web_console/middleware.rb#10
    def whiny_requests=(val); end
  end
end

# source://web-console//lib/web_console/middleware.rb#7
WebConsole::Middleware::TEMPLATES_PATH = T.let(T.unsafe(nil), String)

# source://web-console//lib/web_console/permissions.rb#6
class WebConsole::Permissions
  # source://web-console//lib/web_console/permissions.rb#10
  def initialize(networks = T.unsafe(nil)); end

  # source://web-console//lib/web_console/permissions.rb#14
  def include?(network); end

  # source://web-console//lib/web_console/permissions.rb#20
  def to_s; end

  private

  # source://web-console//lib/web_console/permissions.rb#30
  def coerce_network_to_ipaddr(network); end

  # source://web-console//lib/web_console/permissions.rb#38
  def human_readable_ipaddr(ipaddr); end

  # source://web-console//lib/web_console/permissions.rb#26
  def normalize_networks(networks); end
end

# source://web-console//lib/web_console/permissions.rb#8
WebConsole::Permissions::ALWAYS_PERMITTED_NETWORKS = T.let(T.unsafe(nil), Array)

# source://web-console//lib/web_console/railtie.rb#6
class WebConsole::Railtie < ::Rails::Railtie
  # source://web-console//lib/web_console/railtie.rb#59
  def web_console_permissions; end
end

# source://web-console//lib/web_console/request.rb#4
class WebConsole::Request < ::ActionDispatch::Request
  # source://web-console//lib/web_console/request.rb#5
  def permissions; end

  # source://web-console//lib/web_console/request.rb#5
  def permissions=(val); end

  # source://web-console//lib/web_console/request.rb#7
  def permitted?; end

  # source://web-console//lib/web_console/request.rb#11
  def strict_remote_ip; end

  class << self
    # source://web-console//lib/web_console/request.rb#5
    def permissions; end

    # source://web-console//lib/web_console/request.rb#5
    def permissions=(val); end
  end
end

# source://web-console//lib/web_console/request.rb#19
class WebConsole::Request::GetSecureIp < ::ActionDispatch::RemoteIp::GetIp
  # source://web-console//lib/web_console/request.rb#20
  def initialize(req, proxies); end

  # source://web-console//lib/web_console/request.rb#31
  def filter_proxies(ips); end
end

# source://web-console//lib/web_console/session.rb#13
class WebConsole::Session
  # source://web-console//lib/web_console/session.rb#44
  def initialize(exception_mappers); end

  # source://web-console//lib/web_console/session.rb#70
  def context(objpath); end

  # source://web-console//lib/web_console/session.rb#56
  def eval(input); end

  # source://web-console//lib/web_console/session.rb#42
  def id; end

  # source://web-console//lib/web_console/session.rb#14
  def inmemory_storage; end

  # source://web-console//lib/web_console/session.rb#63
  def switch_binding_to(index, exception_object_id); end

  private

  # source://web-console//lib/web_console/session.rb#76
  def store_into_memory; end

  class << self
    # source://web-console//lib/web_console/session.rb#21
    def find(id); end

    # source://web-console//lib/web_console/session.rb#32
    def from(storage); end

    # source://web-console//lib/web_console/session.rb#14
    def inmemory_storage; end
  end
end

# source://web-console//lib/web_console/template.rb#8
class WebConsole::Template
  # source://web-console//lib/web_console/template.rb#12
  def initialize(env, session); end

  # source://web-console//lib/web_console/template.rb#19
  def render(template); end

  # source://web-console//lib/web_console/template.rb#10
  def template_paths; end

  # source://web-console//lib/web_console/template.rb#10
  def template_paths=(val); end

  class << self
    # source://web-console//lib/web_console/template.rb#10
    def template_paths; end

    # source://web-console//lib/web_console/template.rb#10
    def template_paths=(val); end
  end
end

# source://web-console//lib/web_console/view.rb#4
class WebConsole::View < ::ActionView::Base
  # source://web-console//lib/web_console/view.rb#9
  def only_on_error_page(*args); end

  # source://web-console//lib/web_console/view.rb#14
  def only_on_regular_page(*args); end

  # source://web-console//lib/web_console/view.rb#41
  def render(*_arg0); end

  # source://web-console//lib/web_console/view.rb#33
  def render_inlined_string(template); end

  # source://web-console//lib/web_console/view.rb#23
  def render_javascript(template); end

  # source://web-console//lib/web_console/view.rb#54
  def t(key, options = T.unsafe(nil)); end
end

# source://web-console//lib/web_console/whiny_request.rb#8
class WebConsole::WhinyRequest < ::SimpleDelegator
  # source://web-console//lib/web_console/whiny_request.rb#9
  def permitted?; end

  private

  # source://web-console//lib/web_console/whiny_request.rb#25
  def logger; end

  # source://web-console//lib/web_console/whiny_request.rb#29
  def request; end

  # source://web-console//lib/web_console/whiny_request.rb#18
  def whine_unless(condition); end
end
