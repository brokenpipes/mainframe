# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `puma` gem.
# Please instead update this file by running `bin/tapioca gem puma`.

# source://puma//lib/puma/detect.rb#7
module Puma
  class << self
    # source://puma//lib/puma.rb#42
    def abstract_unix_socket?; end

    # source://puma//lib/puma/detect.rb#39
    def forkable?; end

    # source://puma//lib/puma/detect.rb#21
    def jruby?; end

    # source://puma//lib/puma/detect.rb#34
    def mri?; end

    # source://puma//lib/puma/detect.rb#25
    def osx?; end

    # source://puma//lib/puma.rb#73
    def set_thread_name(name); end

    # source://puma//lib/puma.rb#38
    def ssl?; end

    # source://puma//lib/puma.rb#62
    def stats; end

    # source://puma//lib/puma.rb#68
    def stats_hash; end

    # source://puma//lib/puma.rb#57
    def stats_object=(val); end

    # source://puma//lib/puma/detect.rb#29
    def windows?; end
  end
end

# source://puma//lib/puma/binder.rb#26
class Puma::Binder
  include ::Puma::Const

  # source://puma//lib/puma/binder.rb#31
  def initialize(events, conf = T.unsafe(nil)); end

  # source://puma//lib/puma/binder.rb#67
  def activated_sockets; end

  # source://puma//lib/puma/binder.rb#360
  def add_ssl_listener(host, port, ctx, optimize_for_latency = T.unsafe(nil), backlog = T.unsafe(nil)); end

  # source://puma//lib/puma/binder.rb#332
  def add_tcp_listener(host, port, optimize_for_latency = T.unsafe(nil), backlog = T.unsafe(nil)); end

  # source://puma//lib/puma/binder.rb#411
  def add_unix_listener(path, umask = T.unsafe(nil), mode = T.unsafe(nil), backlog = T.unsafe(nil)); end

  # source://puma//lib/puma/binder.rb#76
  def close; end

  # source://puma//lib/puma/binder.rb#458
  def close_listeners; end

  # source://puma//lib/puma/binder.rb#82
  def connected_ports; end

  # source://puma//lib/puma/binder.rb#100
  def create_activated_fds(env_hash); end

  # source://puma//lib/puma/binder.rb#87
  def create_inherited_fds(env_hash); end

  # source://puma//lib/puma/binder.rb#72
  def env(sock); end

  # source://puma//lib/puma/binder.rb#67
  def envs; end

  # source://puma//lib/puma/binder.rb#391
  def inherit_ssl_listener(fd, ctx); end

  # source://puma//lib/puma/binder.rb#353
  def inherit_tcp_listener(host, port, fd); end

  # source://puma//lib/puma/binder.rb#446
  def inherit_unix_listener(path, fd); end

  # source://puma//lib/puma/binder.rb#67
  def inherited_fds; end

  # source://puma//lib/puma/binder.rb#64
  def ios; end

  # source://puma//lib/puma/binder.rb#70
  def ios=(_arg0); end

  # source://puma//lib/puma/binder.rb#67
  def listeners; end

  # source://puma//lib/puma/binder.rb#70
  def listeners=(_arg0); end

  # source://puma//lib/puma/binder.rb#309
  def localhost_authority; end

  # source://puma//lib/puma/binder.rb#313
  def localhost_authority_context; end

  # source://puma//lib/puma/binder.rb#155
  def parse(binds, logger, log_msg = T.unsafe(nil)); end

  # source://puma//lib/puma/binder.rb#67
  def proto_env; end

  # source://puma//lib/puma/binder.rb#468
  def redirects_for_restart; end

  # source://puma//lib/puma/binder.rb#475
  def redirects_for_restart_env; end

  # source://puma//lib/puma/binder.rb#128
  def synthesize_binds_from_activated_fs(binds, only_matching); end

  # source://puma//lib/puma/binder.rb#67
  def unix_paths; end

  private

  # source://puma//lib/puma/binder.rb#490
  def loc_addr_str(io); end

  # source://puma//lib/puma/binder.rb#484
  def loopback_addresses; end

  # source://puma//lib/puma/binder.rb#500
  def socket_activation_fd(int); end
end

# source://puma//lib/puma/binder.rb#29
Puma::Binder::RACK_VERSION = T.let(T.unsafe(nil), Array)

# source://puma//lib/puma/client.rb#41
class Puma::Client
  include ::Puma::Const
  extend ::Forwardable

  # source://puma//lib/puma/client.rb#62
  def initialize(io, env = T.unsafe(nil)); end

  # source://puma//lib/puma/client.rb#98
  def body; end

  # source://puma//lib/puma/client.rb#120
  def call; end

  # source://puma//lib/puma/client.rb#288
  def can_close?; end

  # source://puma//lib/puma/client.rb#177
  def close; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def closed?(*args, **_arg1, &block); end

  # source://puma//lib/puma/client.rb#249
  def eagerly_finish; end

  # source://puma//lib/puma/client.rb#98
  def env; end

  # source://puma//lib/puma/client.rb#293
  def expect_proxy_proto=(val); end

  # source://puma//lib/puma/client.rb#255
  def finish(timeout); end

  # source://puma//lib/puma/client.rb#98
  def hijacked; end

  # source://puma//lib/puma/client.rb#126
  def in_data_phase; end

  # source://puma//lib/puma/client.rb#114
  def inspect; end

  # source://puma//lib/puma/client.rb#98
  def io; end

  # source://puma//lib/puma/client.rb#109
  def io_ok?; end

  # source://puma//lib/puma/client.rb#103
  def listener; end

  # source://puma//lib/puma/client.rb#103
  def listener=(_arg0); end

  # source://puma//lib/puma/client.rb#272
  def peerip; end

  # source://puma//lib/puma/client.rb#101
  def peerip=(_arg0); end

  # source://puma//lib/puma/client.rb#98
  def ready; end

  # source://puma//lib/puma/client.rb#103
  def remote_addr_header; end

  # source://puma//lib/puma/client.rb#103
  def remote_addr_header=(_arg0); end

  # source://puma//lib/puma/client.rb#139
  def reset(fast_check = T.unsafe(nil)); end

  # source://puma//lib/puma/client.rb#130
  def set_timeout(val); end

  # source://puma//lib/puma/client.rb#98
  def tempfile; end

  # source://puma//lib/puma/client.rb#135
  def timeout; end

  # source://puma//lib/puma/client.rb#260
  def timeout!; end

  # source://puma//lib/puma/client.rb#98
  def timeout_at; end

  # source://puma//lib/puma/client.rb#98
  def to_io; end

  # source://puma//lib/puma/client.rb#209
  def try_to_finish; end

  # source://puma//lib/puma/client.rb#187
  def try_to_parse_proxy_protocol; end

  # source://puma//lib/puma/client.rb#265
  def write_error(status_code); end

  private

  # source://puma//lib/puma/client.rb#480
  def decode_chunk(chunk); end

  # source://puma//lib/puma/client.rb#388
  def read_body; end

  # source://puma//lib/puma/client.rb#433
  def read_chunked_body; end

  # source://puma//lib/puma/client.rb#577
  def set_ready; end

  # source://puma//lib/puma/client.rb#306
  def setup_body; end

  # source://puma//lib/puma/client.rb#458
  def setup_chunked_body(body); end

  # source://puma//lib/puma/client.rb#476
  def write_chunk(str); end
end

# source://puma//lib/puma/client.rb#44
Puma::Client::ALLOWED_TRANSFER_ENCODING = T.let(T.unsafe(nil), Array)

# source://puma//lib/puma/client.rb#47
Puma::Client::CHUNK_SIZE_INVALID = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/client.rb#48
Puma::Client::CHUNK_VALID_ENDING = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/client.rb#51
Puma::Client::CONTENT_LENGTH_VALUE_INVALID = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/client.rb#57
Puma::Client::EmptyBody = T.let(T.unsafe(nil), Puma::NullIO)

# source://puma//lib/puma/client.rb#53
Puma::Client::TE_ERR_MSG = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/cluster/worker_handle.rb#4
class Puma::Cluster < ::Puma::Runner
  # source://puma//lib/puma/cluster.rb#20
  def initialize(cli, events); end

  # source://puma//lib/puma/cluster.rb#149
  def all_workers_booted?; end

  # source://puma//lib/puma/cluster.rb#153
  def check_workers; end

  # source://puma//lib/puma/cluster.rb#132
  def cull_start_index(diff); end

  # source://puma//lib/puma/cluster.rb#108
  def cull_workers; end

  # source://puma//lib/puma/cluster.rb#276
  def fork_worker!; end

  # source://puma//lib/puma/cluster.rb#233
  def halt; end

  # source://puma//lib/puma/cluster.rb#142
  def next_worker_index; end

  # source://puma//lib/puma/cluster.rb#212
  def phased_restart; end

  # source://puma//lib/puma/cluster.rb#271
  def preload?; end

  # source://puma//lib/puma/cluster.rb#57
  def redirect_io; end

  # source://puma//lib/puma/cluster.rb#238
  def reload_worker_directory; end

  # source://puma//lib/puma/cluster.rb#207
  def restart; end

  # source://puma//lib/puma/cluster.rb#336
  def run; end

  # source://puma//lib/puma/cluster.rb#285
  def setup_signals; end

  # source://puma//lib/puma/cluster.rb#94
  def spawn_worker(idx, master); end

  # source://puma//lib/puma/cluster.rb#63
  def spawn_workers; end

  # source://puma//lib/puma/cluster.rb#45
  def start_phased_restart; end

  # source://puma//lib/puma/cluster.rb#247
  def stats; end

  # source://puma//lib/puma/cluster.rb#221
  def stop; end

  # source://puma//lib/puma/cluster.rb#226
  def stop_blocked; end

  # source://puma//lib/puma/cluster.rb#30
  def stop_workers; end

  # source://puma//lib/puma/cluster.rb#185
  def worker(index, master); end

  # source://puma//lib/puma/cluster.rb#122
  def workers_to_cull(diff); end

  private

  # source://puma//lib/puma/cluster.rb#497
  def single_worker_warning; end

  # source://puma//lib/puma/cluster.rb#532
  def timeout_workers; end

  # source://puma//lib/puma/cluster.rb#508
  def wait_workers; end
end

# source://puma//lib/puma/cluster/worker.rb#11
class Puma::Cluster::Worker < ::Puma::Runner
  # source://puma//lib/puma/cluster/worker.rb#14
  def initialize(index:, master:, launcher:, pipes:, server: T.unsafe(nil)); end

  # source://puma//lib/puma/cluster/worker.rb#12
  def index; end

  # source://puma//lib/puma/cluster/worker.rb#12
  def master; end

  # source://puma//lib/puma/cluster/worker.rb#28
  def run; end

  private

  # source://puma//lib/puma/cluster/worker.rb#149
  def spawn_worker(idx); end
end

# source://puma//lib/puma/cluster/worker_handle.rb#10
class Puma::Cluster::WorkerHandle
  # source://puma//lib/puma/cluster/worker_handle.rb#11
  def initialize(idx, pid, phase, options); end

  # source://puma//lib/puma/cluster/worker_handle.rb#38
  def boot!; end

  # source://puma//lib/puma/cluster/worker_handle.rb#30
  def booted?; end

  # source://puma//lib/puma/cluster/worker_handle.rb#88
  def hup; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def index; end

  # source://puma//lib/puma/cluster/worker_handle.rb#83
  def kill; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def last_checkin; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def last_status; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def phase; end

  # source://puma//lib/puma/cluster/worker_handle.rb#28
  def phase=(_arg0); end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def pid; end

  # source://puma//lib/puma/cluster/worker_handle.rb#28
  def pid=(_arg0); end

  # source://puma//lib/puma/cluster/worker_handle.rb#51
  def ping!(status); end

  # source://puma//lib/puma/cluster/worker_handle.rb#62
  def ping_timeout; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def signal; end

  # source://puma//lib/puma/cluster/worker_handle.rb#25
  def started_at; end

  # source://puma//lib/puma/cluster/worker_handle.rb#70
  def term; end

  # source://puma//lib/puma/cluster/worker_handle.rb#43
  def term!; end

  # source://puma//lib/puma/cluster/worker_handle.rb#47
  def term?; end

  # source://puma//lib/puma/cluster/worker_handle.rb#34
  def uptime; end
end

# source://puma//lib/puma/configuration.rb#9
module Puma::ConfigDefault; end

# source://puma//lib/puma/configuration.rb#10
Puma::ConfigDefault::DefaultRackup = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/configuration.rb#12
Puma::ConfigDefault::DefaultTCPHost = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/configuration.rb#13
Puma::ConfigDefault::DefaultTCPPort = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/configuration.rb#14
Puma::ConfigDefault::DefaultWorkerCheckInterval = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/configuration.rb#16
Puma::ConfigDefault::DefaultWorkerShutdownTimeout = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/configuration.rb#15
Puma::ConfigDefault::DefaultWorkerTimeout = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/configuration.rb#138
class Puma::Configuration
  include ::Puma::ConfigDefault

  # source://puma//lib/puma/configuration.rb#141
  def initialize(user_options = T.unsafe(nil), default_options = T.unsafe(nil), &block); end

  # source://puma//lib/puma/configuration.rb#269
  def app; end

  # source://puma//lib/puma/configuration.rb#258
  def app_configured?; end

  # source://puma//lib/puma/configuration.rb#239
  def clamp; end

  # source://puma//lib/puma/configuration.rb#224
  def config_files; end

  # source://puma//lib/puma/configuration.rb#161
  def configure; end

  # source://puma//lib/puma/configuration.rb#185
  def default_max_threads; end

  # source://puma//lib/puma/configuration.rb#282
  def environment; end

  # source://puma//lib/puma/configuration.rb#286
  def environment_str; end

  # source://puma//lib/puma/configuration.rb#305
  def final_options; end

  # source://puma//lib/puma/configuration.rb#175
  def flatten; end

  # source://puma//lib/puma/configuration.rb#179
  def flatten!; end

  # source://puma//lib/puma/configuration.rb#218
  def load; end

  # source://puma//lib/puma/configuration.rb#290
  def load_plugin(name); end

  # source://puma//lib/puma/configuration.rb#159
  def options; end

  # source://puma//lib/puma/configuration.rb#159
  def plugins; end

  # source://puma//lib/puma/configuration.rb#189
  def puma_default_options; end

  # source://puma//lib/puma/configuration.rb#262
  def rackup; end

  # source://puma//lib/puma/configuration.rb#294
  def run_hooks(key, arg, events); end

  private

  # source://puma//lib/puma/configuration.rb#318
  def infer_tag; end

  # source://puma//lib/puma/configuration.rb#169
  def initialize_copy(other); end

  # source://puma//lib/puma/configuration.rb#345
  def load_rackup; end

  # source://puma//lib/puma/configuration.rb#324
  def rack_builder; end

  class << self
    # source://puma//lib/puma/configuration.rb#363
    def random_token; end

    # source://puma//lib/puma/configuration.rb#309
    def temp_path; end
  end
end

# source://puma//lib/puma/configuration.rb#244
class Puma::Configuration::ConfigMiddleware
  # source://puma//lib/puma/configuration.rb#245
  def initialize(config, app); end

  # source://puma//lib/puma/configuration.rb#250
  def call(env); end
end

# source://puma//lib/puma/client.rb#24
class Puma::ConnectionError < ::RuntimeError; end

# source://puma//lib/puma/const.rb#101
module Puma::Const; end

# source://puma//lib/puma/const.rb#248
Puma::Const::BANNED_HEADER_KEY = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/const.rb#187
Puma::Const::CGI_VER = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#228
Puma::Const::CHUNKED = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#155
Puma::Const::CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#214
Puma::Const::CLOSE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#226
Puma::Const::CLOSE_CHUNKED = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#104
Puma::Const::CODE_NAME = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#230
Puma::Const::COLON = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#222
Puma::Const::CONNECTION_CLOSE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#223
Puma::Const::CONNECTION_KEEP_ALIVE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#133
Puma::Const::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#217
Puma::Const::CONTENT_LENGTH2 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#218
Puma::Const::CONTENT_LENGTH_S = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#208
Puma::Const::CONTINUE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#241
Puma::Const::DQUOTE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#238
Puma::Const::EARLY_HINTS = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#139
Puma::Const::ERROR_RESPONSE = T.let(T.unsafe(nil), Hash)

# source://puma//lib/puma/const.rb#108
Puma::Const::FAST_TRACK_KA_TIMEOUT = T.let(T.unsafe(nil), Float)

# source://puma//lib/puma/const.rb#116
Puma::Const::FIRST_DATA_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#186
Puma::Const::GATEWAY_INTERFACE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#190
Puma::Const::HALT_COMMAND = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#165
Puma::Const::HEAD = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#235
Puma::Const::HIJACK = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#236
Puma::Const::HIJACK_IO = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#234
Puma::Const::HIJACK_P = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#200
Puma::Const::HTTP = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#201
Puma::Const::HTTPS = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#203
Puma::Const::HTTPS_KEY = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#212
Puma::Const::HTTP_10_200 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#183
Puma::Const::HTTP_11 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#210
Puma::Const::HTTP_11_100 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#211
Puma::Const::HTTP_11_200 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#206
Puma::Const::HTTP_CONNECTION = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#207
Puma::Const::HTTP_EXPECT = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#242
Puma::Const::HTTP_HEADER_DELIMITER = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#176
Puma::Const::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#205
Puma::Const::HTTP_VERSION = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#169
Puma::Const::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#172
Puma::Const::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#171
Puma::Const::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#170
Puma::Const::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#243
Puma::Const::ILLEGAL_HEADER_KEY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/const.rb#245
Puma::Const::ILLEGAL_HEADER_VALUE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/const.rb#215
Puma::Const::KEEP_ALIVE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#167
Puma::Const::LINE_END = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#179
Puma::Const::LOCALHOST = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#180
Puma::Const::LOCALHOST_IP = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#162
Puma::Const::MAX_BODY = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#127
Puma::Const::MAX_FAST_INLINE = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#159
Puma::Const::MAX_HEADER = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#232
Puma::Const::NEWLINE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#135
Puma::Const::PATH_INFO = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#112
Puma::Const::PERSISTENT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/const.rb#178
Puma::Const::PORT_443 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#177
Puma::Const::PORT_80 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#250
Puma::Const::PROXY_PROTOCOL_V1_REGEX = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/const.rb#197
Puma::Const::PUMA_CONFIG = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#198
Puma::Const::PUMA_PEERCERT = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#106
Puma::Const::PUMA_SERVER_STRING = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#196
Puma::Const::PUMA_SOCKET = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#137
Puma::Const::PUMA_TMP_BASE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#103
Puma::Const::PUMA_VERSION = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#132
Puma::Const::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#195
Puma::Const::RACK_AFTER_REPLY = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#193
Puma::Const::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#194
Puma::Const::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#168
Puma::Const::REMOTE_ADDR = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#164
Puma::Const::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#131
Puma::Const::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#130
Puma::Const::REQUEST_URI = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#191
Puma::Const::RESTART_COMMAND = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#174
Puma::Const::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#175
Puma::Const::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#182
Puma::Const::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#185
Puma::Const::SERVER_SOFTWARE = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#189
Puma::Const::STOP_COMMAND = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#219
Puma::Const::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#220
Puma::Const::TRANSFER_ENCODING2 = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#225
Puma::Const::TRANSFER_ENCODING_CHUNKED = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#103
Puma::Const::VERSION = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/const.rb#120
Puma::Const::WRITE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/dsl.rb#35
class Puma::DSL
  include ::Puma::ConfigDefault

  # source://puma//lib/puma/dsl.rb#77
  def initialize(options, config); end

  # source://puma//lib/puma/dsl.rb#84
  def _load_from(path); end

  # source://puma//lib/puma/dsl.rb#93
  def _offer_plugins; end

  # source://puma//lib/puma/dsl.rb#167
  def activate_control_app(url = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#610
  def after_worker_boot(&block); end

  # source://puma//lib/puma/dsl.rb#610
  def after_worker_fork(&block); end

  # source://puma//lib/puma/dsl.rb#145
  def app(obj = T.unsafe(nil), &block); end

  # source://puma//lib/puma/dsl.rb#548
  def before_fork(&block); end

  # source://puma//lib/puma/dsl.rb#225
  def bind(url); end

  # source://puma//lib/puma/dsl.rb#256
  def bind_to_activated_sockets(bind = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#283
  def clean_thread_locals(which = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#230
  def clear_binds!; end

  # source://puma//lib/puma/dsl.rb#376
  def debug; end

  # source://puma//lib/puma/dsl.rb#108
  def default_host; end

  # source://puma//lib/puma/dsl.rb#660
  def directory(dir); end

  # source://puma//lib/puma/dsl.rb#292
  def drain_on_shutdown(which = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#397
  def early_hints(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#303
  def environment(environment); end

  # source://puma//lib/puma/dsl.rb#737
  def extra_runtime_dependencies(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#277
  def first_data_timeout(seconds); end

  # source://puma//lib/puma/dsl.rb#315
  def force_shutdown_after(val = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#941
  def fork_worker(after_requests = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#116
  def get(key, default = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#112
  def inject(&blk); end

  # source://puma//lib/puma/dsl.rb#984
  def io_selector_backend(backend); end

  # source://puma//lib/puma/dsl.rb#194
  def load(file); end

  # source://puma//lib/puma/dsl.rb#414
  def log_formatter(&block); end

  # source://puma//lib/puma/dsl.rb#370
  def log_requests(which = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#681
  def lowlevel_error_handler(obj = T.unsafe(nil), &block); end

  # source://puma//lib/puma/dsl.rb#965
  def max_fast_inline(num_of_requests); end

  # source://puma//lib/puma/dsl.rb#988
  def mutate_stdout_and_stderr_to_sync_on_write(enabled = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#958
  def nakayoshi_fork(enabled = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#635
  def on_refork(&block); end

  # source://puma//lib/puma/dsl.rb#337
  def on_restart(&block); end

  # source://puma//lib/puma/dsl.rb#563
  def on_worker_boot(&block); end

  # source://puma//lib/puma/dsl.rb#595
  def on_worker_fork(&block); end

  # source://puma//lib/puma/dsl.rb#580
  def on_worker_shutdown(&block); end

  # source://puma//lib/puma/dsl.rb#649
  def out_of_band(&block); end

  # source://puma//lib/puma/dsl.rb#271
  def persistent_timeout(seconds); end

  # source://puma//lib/puma/dsl.rb#356
  def pidfile(path); end

  # source://puma//lib/puma/dsl.rb#122
  def plugin(name); end

  # source://puma//lib/puma/dsl.rb#264
  def port(port, host = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#670
  def preload_app!(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#704
  def prune_bundler(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#851
  def queue_requests(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#364
  def quiet(which = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#393
  def rack_url_scheme(scheme = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#386
  def rackup(path); end

  # source://puma//lib/puma/dsl.rb#720
  def raise_exception_on_sigterm(answer = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#348
  def restart_command(cmd); end

  # source://puma//lib/puma/dsl.rb#104
  def set_default_host(host); end

  # source://puma//lib/puma/dsl.rb#899
  def set_remote_address(val = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#859
  def shutdown_debug(val = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#530
  def silence_single_worker_warning; end

  # source://puma//lib/puma/dsl.rb#480
  def ssl_bind(host, port, opts = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#490
  def state_path(path); end

  # source://puma//lib/puma/dsl.rb#500
  def state_permission(permission); end

  # source://puma//lib/puma/dsl.rb#408
  def stdout_redirect(stdout = T.unsafe(nil), stderr = T.unsafe(nil), append = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#750
  def tag(string); end

  # source://puma//lib/puma/dsl.rb#430
  def threads(min, max); end

  # source://puma//lib/puma/dsl.rb#873
  def wait_for_less_busy_worker(val = T.unsafe(nil)); end

  # source://puma//lib/puma/dsl.rb#800
  def worker_boot_timeout(timeout); end

  # source://puma//lib/puma/dsl.rb#763
  def worker_check_interval(interval); end

  # source://puma//lib/puma/dsl.rb#827
  def worker_culling_strategy(strategy); end

  # source://puma//lib/puma/dsl.rb#809
  def worker_shutdown_timeout(timeout); end

  # source://puma//lib/puma/dsl.rb#779
  def worker_timeout(timeout); end

  # source://puma//lib/puma/dsl.rb#512
  def workers(count); end

  private

  # source://puma//lib/puma/dsl.rb#996
  def add_pem_values_to_options_store(opts); end

  class << self
    # source://puma//lib/puma/dsl.rb#41
    def ssl_bind_str(host, port, opts); end
  end
end

# source://puma//lib/puma/error_logger.rb#9
class Puma::ErrorLogger
  include ::Puma::Const

  # source://puma//lib/puma/error_logger.rb#16
  def initialize(ioerr); end

  # source://puma//lib/puma/error_logger.rb#45
  def debug(options = T.unsafe(nil)); end

  # source://puma//lib/puma/error_logger.rb#33
  def info(options = T.unsafe(nil)); end

  # source://puma//lib/puma/error_logger.rb#12
  def ioerr; end

  # source://puma//lib/puma/error_logger.rb#71
  def request_dump(req); end

  # source://puma//lib/puma/error_logger.rb#87
  def request_headers(req); end

  # source://puma//lib/puma/error_logger.rb#92
  def request_parsed?(req); end

  # source://puma//lib/puma/error_logger.rb#76
  def request_title(req); end

  # source://puma//lib/puma/error_logger.rb#59
  def title(options = T.unsafe(nil)); end

  private

  # source://puma//lib/puma/error_logger.rb#98
  def log(str); end

  class << self
    # source://puma//lib/puma/error_logger.rb#22
    def stdio; end
  end
end

# source://puma//lib/puma/error_logger.rb#14
Puma::ErrorLogger::REQUEST_FORMAT = T.let(T.unsafe(nil), String)

# source://puma//lib/puma/events.rb#13
class Puma::Events
  # source://puma//lib/puma/events.rb#28
  def initialize(stdout, stderr); end

  # source://puma//lib/puma/events.rb#95
  def connection_error(error, req, text = T.unsafe(nil)); end

  # source://puma//lib/puma/events.rb#75
  def debug(str); end

  # source://puma//lib/puma/events.rb#131
  def debug_error(error, req = T.unsafe(nil), text = T.unsafe(nil)); end

  # source://puma//lib/puma/events.rb#81
  def error(str); end

  # source://puma//lib/puma/events.rb#44
  def fire(hook, *args); end

  # source://puma//lib/puma/events.rb#147
  def fire_on_booted!; end

  # source://puma//lib/puma/events.rb#151
  def fire_on_restart!; end

  # source://puma//lib/puma/events.rb#155
  def fire_on_stopped!; end

  # source://puma//lib/puma/events.rb#86
  def format(str); end

  # source://puma//lib/puma/events.rb#40
  def formatter; end

  # source://puma//lib/puma/events.rb#40
  def formatter=(_arg0); end

  # source://puma//lib/puma/events.rb#64
  def log(str); end

  # source://puma//lib/puma/events.rb#135
  def on_booted(&block); end

  # source://puma//lib/puma/events.rb#139
  def on_restart(&block); end

  # source://puma//lib/puma/events.rb#143
  def on_stopped(&block); end

  # source://puma//lib/puma/events.rb#103
  def parse_error(error, req); end

  # source://puma//lib/puma/events.rb#50
  def register(hook, obj = T.unsafe(nil), &blk); end

  # source://puma//lib/puma/events.rb#111
  def ssl_error(error, ssl_socket); end

  # source://puma//lib/puma/events.rb#39
  def stderr; end

  # source://puma//lib/puma/events.rb#39
  def stdout; end

  # source://puma//lib/puma/events.rb#122
  def unknown_error(error, req = T.unsafe(nil), text = T.unsafe(nil)); end

  # source://puma//lib/puma/events.rb#71
  def write(str); end

  class << self
    # source://puma//lib/puma/events.rb#172
    def null; end

    # source://puma//lib/puma/events.rb#168
    def stdio; end

    # source://puma//lib/puma/events.rb#164
    def strings; end
  end
end

# source://puma//lib/puma/events.rb#159
Puma::Events::DEFAULT = T.let(T.unsafe(nil), Puma::Events)

# source://puma//lib/puma/events.rb#14
class Puma::Events::DefaultFormatter
  # source://puma//lib/puma/events.rb#15
  def call(str); end
end

# source://puma//lib/puma/events.rb#20
class Puma::Events::PidFormatter
  # source://puma//lib/puma/events.rb#21
  def call(str); end
end

# source://puma//lib/puma/detect.rb#9
Puma::HAS_FORK = T.let(T.unsafe(nil), TrueClass)

# source://puma//lib/puma.rb#24
Puma::HAS_SSL = T.let(T.unsafe(nil), TrueClass)

# source://puma//lib/puma.rb#26
Puma::HAS_UNIX_SOCKET = T.let(T.unsafe(nil), TrueClass)

# source://puma//lib/puma/const.rb#18
Puma::HTTP_STATUS_CODES = T.let(T.unsafe(nil), Hash)

class Puma::HttpParser
  def initialize; end

  def body; end
  def error?; end
  def execute(_arg0, _arg1, _arg2); end
  def finish; end
  def finished?; end
  def nread; end
  def reset; end
end

class Puma::HttpParserError < ::IOError; end

# source://puma//lib/puma/client.rb#26
class Puma::HttpParserError501 < ::IOError; end

# source://puma//lib/puma/io_buffer.rb#4
class Puma::IOBuffer < ::String
  # source://puma//lib/puma/io_buffer.rb#5
  def append(*args); end

  def reset; end
end

# source://puma//lib/puma/detect.rb#11
Puma::IS_JRUBY = T.let(T.unsafe(nil), FalseClass)

# source://puma//lib/puma/detect.rb#19
Puma::IS_MRI = T.let(T.unsafe(nil), TrueClass)

# source://puma//lib/puma/detect.rb#13
Puma::IS_OSX = T.let(T.unsafe(nil), TrueClass)

# source://puma//lib/puma/detect.rb#15
Puma::IS_WINDOWS = T.let(T.unsafe(nil), FalseClass)

# source://puma//lib/puma/json_serialization.rb#20
module Puma::JSONSerialization
  class << self
    # source://puma//lib/puma/json_serialization.rb#29
    def generate(value); end

    private

    # source://puma//lib/puma/json_serialization.rb#86
    def serialize_object_key(output, value); end

    # source://puma//lib/puma/json_serialization.rb#71
    def serialize_string(output, value); end

    # source://puma//lib/puma/json_serialization.rb#38
    def serialize_value(output, value); end
  end
end

# source://puma//lib/puma/json_serialization.rb#22
Puma::JSONSerialization::BACKSLASH = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/json_serialization.rb#24
Puma::JSONSerialization::CHAR_TO_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/json_serialization.rb#23
Puma::JSONSerialization::CONTROL_CHAR_TO_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/json_serialization.rb#21
Puma::JSONSerialization::QUOTE = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/json_serialization.rb#26
class Puma::JSONSerialization::SerializationError < ::StandardError; end

# source://puma//lib/puma/launcher.rb#17
class Puma::Launcher
  # source://puma//lib/puma/launcher.rb#44
  def initialize(conf, launcher_args = T.unsafe(nil)); end

  # source://puma//lib/puma/launcher.rb#102
  def binder; end

  # source://puma//lib/puma/launcher.rb#229
  def close_binder_listeners; end

  # source://puma//lib/puma/launcher.rb#102
  def config; end

  # source://puma//lib/puma/launcher.rb#215
  def connected_ports; end

  # source://puma//lib/puma/launcher.rb#130
  def delete_pidfile; end

  # source://puma//lib/puma/launcher.rb#102
  def events; end

  # source://puma//lib/puma/launcher.rb#136
  def halt; end

  # source://puma//lib/puma/launcher.rb#102
  def options; end

  # source://puma//lib/puma/launcher.rb#154
  def phased_restart; end

  # source://puma//lib/puma/launcher.rb#163
  def refork; end

  # source://puma//lib/puma/launcher.rb#148
  def restart; end

  # source://puma//lib/puma/launcher.rb#220
  def restart_args; end

  # source://puma//lib/puma/launcher.rb#102
  def restart_dir; end

  # source://puma//lib/puma/launcher.rb#174
  def run; end

  # source://puma//lib/puma/launcher.rb#105
  def stats; end

  # source://puma//lib/puma/launcher.rb#142
  def stop; end

  # source://puma//lib/puma/launcher.rb#240
  def thread_status; end

  # source://puma//lib/puma/launcher.rb#111
  def write_state; end

  private

  # source://puma//lib/puma/launcher.rb#383
  def clustered?; end

  # source://puma//lib/puma/launcher.rb#414
  def environment; end

  # source://puma//lib/puma/launcher.rb#301
  def extra_runtime_deps_directories; end

  # source://puma//lib/puma/launcher.rb#294
  def files_to_require_after_prune; end

  # source://puma//lib/puma/launcher.rb#422
  def generate_restart_data; end

  # source://puma//lib/puma/launcher.rb#392
  def graceful_stop; end

  # source://puma//lib/puma/launcher.rb#354
  def integrate_with_systemd; end

  # source://puma//lib/puma/launcher.rb#379
  def log(str); end

  # source://puma//lib/puma/launcher.rb#548
  def log_config; end

  # source://puma//lib/puma/launcher.rb#320
  def prune_bundler; end

  # source://puma//lib/puma/launcher.rb#418
  def prune_bundler?; end

  # source://puma//lib/puma/launcher.rb#313
  def puma_wild_location; end

  # source://puma//lib/puma/launcher.rb#265
  def reload_worker_directory; end

  # source://puma//lib/puma/launcher.rb#375
  def require_paths_for_gem(gem_spec); end

  # source://puma//lib/puma/launcher.rb#531
  def require_rubygems_min_version!(min_version, feature); end

  # source://puma//lib/puma/launcher.rb#269
  def restart!; end

  # source://puma//lib/puma/launcher.rb#397
  def set_process_title; end

  # source://puma//lib/puma/launcher.rb#408
  def set_rack_environment; end

  # source://puma//lib/puma/launcher.rb#467
  def setup_signals; end

  # source://puma//lib/puma/launcher.rb#371
  def spec_for_gem(gem_name); end

  # source://puma//lib/puma/launcher.rb#402
  def title; end

  # source://puma//lib/puma/launcher.rb#387
  def unsupported(str); end

  # source://puma//lib/puma/launcher.rb#539
  def with_unbundled_env; end

  # source://puma//lib/puma/launcher.rb#255
  def write_pid; end
end

# source://puma//lib/puma/launcher.rb#19
Puma::Launcher::KEYS_NOT_TO_PERSIST_IN_STATE = T.let(T.unsafe(nil), Array)

# source://puma//lib/puma/minissl.rb#12
module Puma::MiniSSL
  class << self
    def check; end
  end
end

# source://puma//lib/puma/minissl.rb#204
class Puma::MiniSSL::Context
  # source://puma//lib/puma/minissl.rb#208
  def initialize; end

  # source://puma//lib/puma/minissl.rb#241
  def ca; end

  # source://puma//lib/puma/minissl.rb#257
  def ca=(ca); end

  # source://puma//lib/puma/minissl.rb#240
  def cert; end

  # source://puma//lib/puma/minissl.rb#252
  def cert=(cert); end

  # source://puma//lib/puma/minissl.rb#242
  def cert_pem; end

  # source://puma//lib/puma/minissl.rb#262
  def cert_pem=(cert_pem); end

  # source://puma//lib/puma/minissl.rb#272
  def check; end

  # source://puma//lib/puma/minissl.rb#217
  def check_file(file, desc); end

  # source://puma//lib/puma/minissl.rb#239
  def key; end

  # source://puma//lib/puma/minissl.rb#247
  def key=(key); end

  # source://puma//lib/puma/minissl.rb#243
  def key_pem; end

  # source://puma//lib/puma/minissl.rb#267
  def key_pem=(key_pem); end

  # source://puma//lib/puma/minissl.rb#206
  def no_tlsv1; end

  # source://puma//lib/puma/minissl.rb#280
  def no_tlsv1=(tlsv1); end

  # source://puma//lib/puma/minissl.rb#206
  def no_tlsv1_1; end

  # source://puma//lib/puma/minissl.rb#287
  def no_tlsv1_1=(tlsv1_1); end

  # source://puma//lib/puma/minissl.rb#244
  def ssl_cipher_filter; end

  # source://puma//lib/puma/minissl.rb#244
  def ssl_cipher_filter=(_arg0); end

  # source://puma//lib/puma/minissl.rb#245
  def verification_flags; end

  # source://puma//lib/puma/minissl.rb#245
  def verification_flags=(_arg0); end

  # source://puma//lib/puma/minissl.rb#205
  def verify_mode; end

  # source://puma//lib/puma/minissl.rb#205
  def verify_mode=(_arg0); end
end

# source://puma//lib/puma/minissl/context_builder.rb#3
class Puma::MiniSSL::ContextBuilder
  # source://puma//lib/puma/minissl/context_builder.rb#4
  def initialize(params, events); end

  # source://puma//lib/puma/minissl/context_builder.rb#9
  def context; end

  private

  # source://puma//lib/puma/minissl/context_builder.rb#78
  def events; end

  # source://puma//lib/puma/minissl/context_builder.rb#78
  def params; end
end

class Puma::MiniSSL::Engine
  def extract; end
  def init?; end
  def inject(_arg0); end
  def peercert; end
  def read; end
  def shutdown; end
  def ssl_vers_st; end
  def write(_arg0); end

  class << self
    def client; end
    def server(_arg0); end
  end
end

# source://puma//lib/puma/minissl.rb#16
Puma::MiniSSL::HAS_TLS1_3 = T.let(T.unsafe(nil), TrueClass)

Puma::MiniSSL::OPENSSL_LIBRARY_VERSION = T.let(T.unsafe(nil), String)
Puma::MiniSSL::OPENSSL_NO_SSL3 = T.let(T.unsafe(nil), TrueClass)
Puma::MiniSSL::OPENSSL_NO_TLS1 = T.let(T.unsafe(nil), FalseClass)
Puma::MiniSSL::OPENSSL_NO_TLS1_1 = T.let(T.unsafe(nil), FalseClass)
Puma::MiniSSL::OPENSSL_VERSION = T.let(T.unsafe(nil), String)

class Puma::MiniSSL::SSLContext
  def initialize(_arg0); end
end

class Puma::MiniSSL::SSLError < ::StandardError; end

# source://puma//lib/puma/minissl.rb#324
class Puma::MiniSSL::Server
  # source://puma//lib/puma/minissl.rb#325
  def initialize(socket, ctx); end

  # source://puma//lib/puma/minissl.rb#331
  def accept; end

  # source://puma//lib/puma/minissl.rb#338
  def accept_nonblock; end

  # source://puma//lib/puma/minissl.rb#352
  def addr; end

  # source://puma//lib/puma/minissl.rb#356
  def close; end

  # source://puma//lib/puma/minissl.rb#360
  def closed?; end

  # source://puma//lib/puma/minissl.rb#346
  def to_io; end
end

# source://puma//lib/puma/minissl.rb#20
class Puma::MiniSSL::Socket
  # source://puma//lib/puma/minissl.rb#21
  def initialize(socket, engine); end

  # source://puma//lib/puma/minissl.rb#117
  def <<(data); end

  # source://puma//lib/puma/minissl.rb#164
  def close; end

  # source://puma//lib/puma/minissl.rb#32
  def closed?; end

  # source://puma//lib/puma/minissl.rb#74
  def engine_read_all; end

  # source://puma//lib/puma/minissl.rb#160
  def flush; end

  # source://puma//lib/puma/minissl.rb#180
  def peeraddr; end

  # source://puma//lib/puma/minissl.rb#185
  def peercert; end

  # source://puma//lib/puma/minissl.rb#82
  def read_nonblock(size, *_); end

  # source://puma//lib/puma/minissl.rb#57
  def readpartial(size); end

  # source://puma//lib/puma/minissl.rb#45
  def ssl_version_state; end

  # source://puma//lib/puma/minissl.rb#117
  def syswrite(data); end

  # source://puma//lib/puma/minissl.rb#28
  def to_io; end

  # source://puma//lib/puma/minissl.rb#117
  def write(data); end

  # source://puma//lib/puma/minissl.rb#156
  def write_nonblock(data, *_); end

  private

  # source://puma//lib/puma/minissl.rb#52
  def bad_tlsv1_3?; end
end

# source://puma//lib/puma/minissl.rb#300
Puma::MiniSSL::VERIFICATION_FLAGS = T.let(T.unsafe(nil), Hash)

# source://puma//lib/puma/minissl.rb#296
Puma::MiniSSL::VERIFY_FAIL_IF_NO_PEER_CERT = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/minissl.rb#294
Puma::MiniSSL::VERIFY_NONE = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/minissl.rb#295
Puma::MiniSSL::VERIFY_PEER = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/null_io.rb#7
class Puma::NullIO
  # source://puma//lib/puma/null_io.rb#28
  def close; end

  # source://puma//lib/puma/null_io.rb#57
  def closed?; end

  # source://puma//lib/puma/null_io.rb#16
  def each; end

  # source://puma//lib/puma/null_io.rb#35
  def eof?; end

  # source://puma//lib/puma/null_io.rb#52
  def flush; end

  # source://puma//lib/puma/null_io.rb#8
  def gets; end

  # source://puma//lib/puma/null_io.rb#46
  def puts(*ary); end

  # source://puma//lib/puma/null_io.rb#21
  def read(count = T.unsafe(nil), _buffer = T.unsafe(nil)); end

  # source://puma//lib/puma/null_io.rb#25
  def rewind; end

  # source://puma//lib/puma/null_io.rb#31
  def size; end

  # source://puma//lib/puma/null_io.rb#12
  def string; end

  # source://puma//lib/puma/null_io.rb#39
  def sync; end

  # source://puma//lib/puma/null_io.rb#43
  def sync=(v); end

  # source://puma//lib/puma/null_io.rb#49
  def write(*ary); end
end

# source://puma//lib/puma/plugin.rb#76
class Puma::Plugin
  # source://puma//lib/puma/plugin.rb#107
  def in_background(&blk); end

  class << self
    # source://puma//lib/puma/plugin.rb#97
    def create(&blk); end

    # source://puma//lib/puma/plugin.rb#90
    def extract_name(ary); end
  end
end

# source://puma//lib/puma/plugin.rb#81
Puma::Plugin::CALLER_FILE = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/plugin.rb#6
class Puma::PluginLoader
  # source://puma//lib/puma/plugin.rb#7
  def initialize; end

  # source://puma//lib/puma/plugin.rb#11
  def create(name); end

  # source://puma//lib/puma/plugin.rb#21
  def fire_starts(launcher); end
end

# source://puma//lib/puma/plugin.rb#30
class Puma::PluginRegistry
  # source://puma//lib/puma/plugin.rb#31
  def initialize; end

  # source://puma//lib/puma/plugin.rb#60
  def add_background(blk); end

  # source://puma//lib/puma/plugin.rb#40
  def find(name); end

  # source://puma//lib/puma/plugin.rb#64
  def fire_background; end

  # source://puma//lib/puma/plugin.rb#36
  def register(name, cls); end
end

# source://puma//lib/puma/plugin.rb#74
Puma::Plugins = T.let(T.unsafe(nil), Puma::PluginRegistry)

# source://puma//lib/puma/rack/builder.rb#6
module Puma::Rack; end

# source://puma//lib/puma/rack/builder.rb#154
class Puma::Rack::Builder
  # source://puma//lib/puma/rack/builder.rb#176
  def initialize(default_app = T.unsafe(nil), &block); end

  # source://puma//lib/puma/rack/builder.rb#283
  def call(env); end

  # source://puma//lib/puma/rack/builder.rb#270
  def map(path, &block); end

  # source://puma//lib/puma/rack/builder.rb#234
  def run(app); end

  # source://puma//lib/puma/rack/builder.rb#275
  def to_app; end

  # source://puma//lib/puma/rack/builder.rb#212
  def use(middleware, *args, &block); end

  # source://puma//lib/puma/rack/builder.rb#247
  def warmup(prc = T.unsafe(nil), &block); end

  private

  # source://puma//lib/puma/rack/builder.rb#289
  def generate_map(default_app, mapping); end

  class << self
    # source://puma//lib/puma/rack/builder.rb#189
    def app(default_app = T.unsafe(nil), &block); end

    # source://puma//lib/puma/rack/builder.rb#171
    def new_from_string(builder_script, file = T.unsafe(nil)); end

    # source://puma//lib/puma/rack/builder.rb#155
    def parse_file(config, opts = T.unsafe(nil)); end
  end
end

# source://puma//lib/puma/rack/builder.rb#7
class Puma::Rack::Options
  # source://puma//lib/puma/rack/builder.rb#101
  def handler_opts(options); end

  # source://puma//lib/puma/rack/builder.rb#8
  def parse!(args); end
end

# source://puma//lib/puma/reactor.rb#19
class Puma::Reactor
  # source://puma//lib/puma/reactor.rb#23
  def initialize(backend, &block); end

  # source://puma//lib/puma/reactor.rb#49
  def add(client); end

  # source://puma//lib/puma/reactor.rb#35
  def run(background = T.unsafe(nil)); end

  # source://puma//lib/puma/reactor.rb#58
  def shutdown; end

  private

  # source://puma//lib/puma/reactor.rb#100
  def register(client); end

  # source://puma//lib/puma/reactor.rb#69
  def select_loop; end

  # source://puma//lib/puma/reactor.rb#109
  def wakeup!(client); end
end

# source://puma//lib/puma/request.rb#13
module Puma::Request
  include ::Puma::Const

  # source://puma//lib/puma/request.rb#194
  def default_server_port(env); end

  # source://puma//lib/puma/request.rb#32
  def handle_request(client, lines, requests); end

  # source://puma//lib/puma/request.rb#242
  def normalize_env(env, client); end

  private

  # source://puma//lib/puma/request.rb#207
  def fast_write(io, str); end

  # source://puma//lib/puma/request.rb#231
  def fetch_status_code(status); end

  # source://puma//lib/puma/request.rb#303
  def illegal_header_key?(header_key); end

  # source://puma//lib/puma/request.rb#310
  def illegal_header_value?(header_value); end

  # source://puma//lib/puma/request.rb#324
  def req_env_post_parse(env); end

  # source://puma//lib/puma/request.rb#356
  def str_early_hints(headers); end

  # source://puma//lib/puma/request.rb#384
  def str_headers(env, status, headers, res_info, lines, requests, client); end
end

# source://puma//lib/puma/runner.rb#10
class Puma::Runner
  # source://puma//lib/puma/runner.rb#11
  def initialize(cli, events); end

  # source://puma//lib/puma/runner.rb#160
  def app; end

  # source://puma//lib/puma/runner.rb#77
  def close_control_listeners; end

  # source://puma//lib/puma/runner.rb#51
  def debug(str); end

  # source://puma//lib/puma/runner.rb#30
  def development?; end

  # source://puma//lib/puma/runner.rb#47
  def error(str); end

  # source://puma//lib/puma/runner.rb#143
  def load_and_bind; end

  # source://puma//lib/puma/runner.rb#38
  def log(str); end

  # source://puma//lib/puma/runner.rb#94
  def output_header(mode); end

  # source://puma//lib/puma/runner.rb#116
  def redirect_io; end

  # source://puma//lib/puma/runner.rb#112
  def redirected_io?; end

  # source://puma//lib/puma/runner.rb#82
  def ruby_engine; end

  # source://puma//lib/puma/runner.rb#55
  def start_control; end

  # source://puma//lib/puma/runner.rb#164
  def start_server; end

  # source://puma//lib/puma/runner.rb#43
  def stop_control; end

  # source://puma//lib/puma/runner.rb#34
  def test?; end

  # source://puma//lib/puma/runner.rb#21
  def wakeup!; end

  private

  # source://puma//lib/puma/runner.rb#171
  def ensure_output_directory_exists(path, io_name); end
end

# source://puma//lib/puma/const.rb#84
Puma::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://puma//lib/puma/server.rb#32
class Puma::Server
  include ::Puma::Const
  include ::Puma::Request
  extend ::Forwardable

  # source://puma//lib/puma/server.rb#74
  def initialize(app, events = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_ssl_listener(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_tcp_listener(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_unix_listener(*args, **_arg1, &block); end

  # source://puma//lib/puma/server.rb#54
  def app; end

  # source://puma//lib/puma/server.rb#54
  def app=(_arg0); end

  # source://puma//lib/puma/server.rb#45
  def auto_trim_time; end

  # source://puma//lib/puma/server.rb#50
  def auto_trim_time=(_arg0); end

  # source://puma//lib/puma/server.rb#197
  def backlog; end

  # source://puma//lib/puma/server.rb#609
  def begin_restart(sync = T.unsafe(nil)); end

  # source://puma//lib/puma/server.rb#55
  def binder; end

  # source://puma//lib/puma/server.rb#55
  def binder=(_arg0); end

  # source://puma//lib/puma/server.rb#509
  def client_error(e, client); end

  # source://puma//lib/puma/server.rb#191
  def closed_socket?(socket); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def connected_ports(*args, **_arg1, &block); end

  # source://puma//lib/puma/server.rb#164
  def cork_socket(socket); end

  # source://puma//lib/puma/server.rb#45
  def early_hints; end

  # source://puma//lib/puma/server.rb#50
  def early_hints=(_arg0); end

  # source://puma//lib/puma/server.rb#39
  def events; end

  # source://puma//lib/puma/server.rb#45
  def first_data_timeout; end

  # source://puma//lib/puma/server.rb#50
  def first_data_timeout=(_arg0); end

  # source://puma//lib/puma/server.rb#552
  def graceful_shutdown; end

  # source://puma//lib/puma/server.rb#604
  def halt(sync = T.unsafe(nil)); end

  # source://puma//lib/puma/server.rb#389
  def handle_check; end

  # source://puma//lib/puma/server.rb#312
  def handle_servers; end

  # source://puma//lib/puma/server.rb#113
  def inherit_binder(bind); end

  # source://puma//lib/puma/server.rb#45
  def leak_stack_on_error; end

  # source://puma//lib/puma/server.rb#50
  def leak_stack_on_error=(_arg0); end

  # source://puma//lib/puma/server.rb#42
  def log_writer; end

  # source://puma//lib/puma/server.rb#531
  def lowlevel_error(e, env, status = T.unsafe(nil)); end

  # source://puma//lib/puma/server.rb#40
  def max_threads; end

  # source://puma//lib/puma/server.rb#50
  def max_threads=(_arg0); end

  # source://puma//lib/puma/server.rb#40
  def min_threads; end

  # source://puma//lib/puma/server.rb#50
  def min_threads=(_arg0); end

  # source://puma//lib/puma/server.rb#45
  def persistent_timeout; end

  # source://puma//lib/puma/server.rb#50
  def persistent_timeout=(_arg0); end

  # source://puma//lib/puma/server.rb#215
  def pool_capacity; end

  # source://puma//lib/puma/server.rb#417
  def process_client(client, buffer); end

  # source://puma//lib/puma/server.rb#296
  def reactor_wakeup(client); end

  # source://puma//lib/puma/server.rb#45
  def reaping_time; end

  # source://puma//lib/puma/server.rb#50
  def reaping_time=(_arg0); end

  # source://puma//lib/puma/server.rb#41
  def requests_count; end

  # source://puma//lib/puma/server.rb#225
  def run(background = T.unsafe(nil), thread_name: T.unsafe(nil)); end

  # source://puma//lib/puma/server.rb#202
  def running; end

  # source://puma//lib/puma/server.rb#614
  def shutting_down?; end

  # source://puma//lib/puma/server.rb#625
  def stats; end

  # source://puma//lib/puma/server.rb#599
  def stop(sync = T.unsafe(nil)); end

  # source://puma//lib/puma/server.rb#38
  def thread; end

  # source://puma//lib/puma/server.rb#167
  def uncork_socket(socket); end

  # source://puma//lib/puma/server.rb#500
  def with_force_shutdown(client, &block); end

  private

  # source://puma//lib/puma/server.rb#581
  def notify_safely(message); end

  class << self
    # source://puma//lib/puma/server.rb#119
    def current; end

    private

    # source://puma//lib/puma/server.rb#131
    def closed_socket_supported?; end

    # source://puma//lib/puma/server.rb#125
    def tcp_cork_supported?; end
  end
end

# source://puma//lib/puma/server.rb#620
Puma::Server::STAT_METHODS = T.let(T.unsafe(nil), Array)

# source://puma//lib/puma/server.rb#60
Puma::Server::ThreadLocalKey = T.let(T.unsafe(nil), Symbol)

# source://puma//lib/puma/single.rb#15
class Puma::Single < ::Puma::Runner
  # source://puma//lib/puma/single.rb#31
  def halt; end

  # source://puma//lib/puma/single.rb#23
  def restart; end

  # source://puma//lib/puma/single.rb#41
  def run; end

  # source://puma//lib/puma/single.rb#17
  def stats; end

  # source://puma//lib/puma/single.rb#27
  def stop; end

  # source://puma//lib/puma/single.rb#35
  def stop_blocked; end
end

# source://puma//lib/puma/thread_pool.rb#17
class Puma::ThreadPool
  # source://puma//lib/puma/thread_pool.rb#32
  def initialize(name, min, max, *extra, &block); end

  # source://puma//lib/puma/thread_pool.rb#185
  def <<(work); end

  # source://puma//lib/puma/thread_pool.rb#327
  def auto_reap!(timeout = T.unsafe(nil)); end

  # source://puma//lib/puma/thread_pool.rb#322
  def auto_trim!(timeout = T.unsafe(nil)); end

  # source://puma//lib/puma/thread_pool.rb#82
  def backlog; end

  # source://puma//lib/puma/thread_pool.rb#93
  def busy_threads; end

  # source://puma//lib/puma/thread_pool.rb#71
  def clean_thread_locals; end

  # source://puma//lib/puma/thread_pool.rb#71
  def clean_thread_locals=(_arg0); end

  # source://puma//lib/puma/thread_pool.rb#72
  def out_of_band_hook; end

  # source://puma//lib/puma/thread_pool.rb#72
  def out_of_band_hook=(_arg0); end

  # source://puma//lib/puma/thread_pool.rb#87
  def pool_capacity; end

  # source://puma//lib/puma/thread_pool.rb#280
  def reap; end

  # source://puma//lib/puma/thread_pool.rb#350
  def shutdown(timeout = T.unsafe(nil)); end

  # source://puma//lib/puma/thread_pool.rb#70
  def spawned; end

  # source://puma//lib/puma/thread_pool.rb#268
  def trim(force = T.unsafe(nil)); end

  # source://puma//lib/puma/thread_pool.rb#70
  def trim_requested; end

  # source://puma//lib/puma/thread_pool.rb#244
  def wait_for_less_busy_worker(delay_s); end

  # source://puma//lib/puma/thread_pool.rb#227
  def wait_until_not_full; end

  # source://puma//lib/puma/thread_pool.rb#70
  def waiting; end

  # source://puma//lib/puma/thread_pool.rb#334
  def with_force_shutdown; end

  # source://puma//lib/puma/thread_pool.rb#178
  def with_mutex(&block); end

  private

  # source://puma//lib/puma/thread_pool.rb#101
  def spawn_thread; end

  # source://puma//lib/puma/thread_pool.rb#162
  def trigger_out_of_band_hook; end

  class << self
    # source://puma//lib/puma/thread_pool.rb#74
    def clean_thread_locals; end
  end
end

# source://puma//lib/puma/thread_pool.rb#295
class Puma::ThreadPool::Automaton
  # source://puma//lib/puma/thread_pool.rb#296
  def initialize(pool, timeout, thread_name, message); end

  # source://puma//lib/puma/thread_pool.rb#304
  def start!; end

  # source://puma//lib/puma/thread_pool.rb#316
  def stop; end
end

# source://puma//lib/puma/thread_pool.rb#18
class Puma::ThreadPool::ForceShutdown < ::RuntimeError; end

# source://puma//lib/puma/thread_pool.rb#24
Puma::ThreadPool::SHUTDOWN_GRACE_TIME = T.let(T.unsafe(nil), Integer)

# source://puma//lib/puma/plugin.rb#4
class Puma::UnknownPlugin < ::RuntimeError; end

# source://puma//lib/puma/reactor.rb#6
class Puma::UnsupportedBackend < ::StandardError; end

# source://puma//lib/puma/const.rb#5
class Puma::UnsupportedOption < ::RuntimeError; end

# source://puma//lib/puma/configuration.rb#48
class Puma::UserFileDefaultOptions
  # source://puma//lib/puma/configuration.rb#49
  def initialize(user_options, default_options); end

  # source://puma//lib/puma/configuration.rb#57
  def [](key); end

  # source://puma//lib/puma/configuration.rb#61
  def []=(key, value); end

  # source://puma//lib/puma/configuration.rb#73
  def all_of(key); end

  # source://puma//lib/puma/configuration.rb#55
  def default_options; end

  # source://puma//lib/puma/configuration.rb#65
  def fetch(key, default_value = T.unsafe(nil)); end

  # source://puma//lib/puma/configuration.rb#55
  def file_options; end

  # source://puma//lib/puma/configuration.rb#97
  def final_options; end

  # source://puma//lib/puma/configuration.rb#89
  def finalize_values; end

  # source://puma//lib/puma/configuration.rb#55
  def user_options; end
end

# source://puma//lib/puma/util.rb#6
module Puma::Util
  private

  # source://puma//lib/puma/util.rb#24
  def escape(s, encoding = T.unsafe(nil)); end

  # source://puma//lib/puma/util.rb#43
  def nakayoshi_gc(events); end

  # source://puma//lib/puma/util.rb#60
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  # source://puma//lib/puma/util.rb#9
  def pipe; end

  # source://puma//lib/puma/util.rb#16
  def purge_interrupt_queue; end

  # source://puma//lib/puma/util.rb#28
  def unescape(s, encoding = T.unsafe(nil)); end

  class << self
    # source://puma//lib/puma/util.rb#24
    def escape(s, encoding = T.unsafe(nil)); end

    # source://puma//lib/puma/util.rb#43
    def nakayoshi_gc(events); end

    # source://puma//lib/puma/util.rb#60
    def parse_query(qs, d = T.unsafe(nil), &unescaper); end

    # source://puma//lib/puma/util.rb#9
    def pipe; end

    # source://puma//lib/puma/util.rb#16
    def purge_interrupt_queue; end

    # source://puma//lib/puma/util.rb#28
    def unescape(s, encoding = T.unsafe(nil)); end
  end
end

# source://puma//lib/puma/util.rb#53
Puma::Util::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://puma//lib/puma/util.rb#85
class Puma::Util::HeaderHash < ::Hash
  # source://puma//lib/puma/util.rb#90
  def initialize(hash = T.unsafe(nil)); end

  # source://puma//lib/puma/util.rb#109
  def [](k); end

  # source://puma//lib/puma/util.rb#113
  def []=(k, v); end

  # source://puma//lib/puma/util.rb#120
  def delete(k); end

  # source://puma//lib/puma/util.rb#96
  def each; end

  # source://puma//lib/puma/util.rb#127
  def has_key?(k); end

  # source://puma//lib/puma/util.rb#127
  def include?(k); end

  # source://puma//lib/puma/util.rb#127
  def key?(k); end

  # source://puma//lib/puma/util.rb#127
  def member?(k); end

  # source://puma//lib/puma/util.rb#140
  def merge(other); end

  # source://puma//lib/puma/util.rb#135
  def merge!(other); end

  # source://puma//lib/puma/util.rb#145
  def replace(other); end

  # source://puma//lib/puma/util.rb#103
  def to_hash; end

  class << self
    # source://puma//lib/puma/util.rb#86
    def new(hash = T.unsafe(nil)); end
  end
end
