# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `matrix` gem.
# Please instead update this file by running `bin/tapioca gem matrix`.

# source://matrix//lib/matrix.rb#17
module ExceptionForMatrix; end

# source://matrix//lib/matrix.rb#18
class ExceptionForMatrix::ErrDimensionMismatch < ::StandardError
  # source://matrix//lib/matrix.rb#19
  def initialize(val = T.unsafe(nil)); end
end

# source://matrix//lib/matrix.rb#28
class ExceptionForMatrix::ErrNotRegular < ::StandardError
  # source://matrix//lib/matrix.rb#29
  def initialize(val = T.unsafe(nil)); end
end

# source://matrix//lib/matrix.rb#38
class ExceptionForMatrix::ErrOperationNotDefined < ::StandardError
  # source://matrix//lib/matrix.rb#39
  def initialize(vals); end
end

# source://matrix//lib/matrix.rb#48
class ExceptionForMatrix::ErrOperationNotImplemented < ::StandardError
  # source://matrix//lib/matrix.rb#49
  def initialize(vals); end
end

# source://matrix//lib/matrix/version.rb#3
class Matrix
  include ::Enumerable
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  extend ::Matrix::ConversionHelper

  # source://matrix//lib/matrix.rb#322
  def initialize(rows, column_count = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#1058
  def *(m); end

  # source://matrix//lib/matrix.rb#1237
  def **(exp); end

  # source://matrix//lib/matrix.rb#1093
  def +(m); end

  # source://matrix//lib/matrix.rb#1283
  def +@; end

  # source://matrix//lib/matrix.rb#1120
  def -(m); end

  # source://matrix//lib/matrix.rb#1292
  def -@; end

  # source://matrix//lib/matrix.rb#1147
  def /(other); end

  # source://matrix//lib/matrix.rb#1021
  def ==(other); end

  # source://matrix//lib/matrix.rb#337
  def [](i, j); end

  # source://matrix//lib/matrix.rb#351
  def []=(i, j, v); end

  # source://matrix//lib/matrix.rb#1299
  def abs; end

  # source://matrix//lib/matrix.rb#1595
  def adjoint; end

  # source://matrix//lib/matrix.rb#793
  def adjugate; end

  # source://matrix//lib/matrix.rb#973
  def antisymmetric?; end

  # source://matrix//lib/matrix.rb#1648
  def coerce(other); end

  # source://matrix//lib/matrix.rb#778
  def cofactor(row, column); end

  # source://matrix//lib/matrix.rb#810
  def cofactor_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#508
  def collect(which = T.unsafe(nil), &block); end

  # source://matrix//lib/matrix.rb#526
  def collect!(which = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#477
  def column(j); end

  # source://matrix//lib/matrix.rb#456
  def column_count; end

  # source://matrix//lib/matrix.rb#456
  def column_size; end

  # source://matrix//lib/matrix.rb#1669
  def column_vectors; end

  # source://matrix//lib/matrix.rb#315
  def combine(*matrices, &block); end

  # source://matrix//lib/matrix.rb#337
  def component(i, j); end

  # source://matrix//lib/matrix.rb#1583
  def conj; end

  # source://matrix//lib/matrix.rb#1583
  def conjugate; end

  # source://matrix//lib/matrix.rb#1317
  def det; end

  # source://matrix//lib/matrix.rb#1398
  def det_e; end

  # source://matrix//lib/matrix.rb#1317
  def determinant; end

  # source://matrix//lib/matrix.rb#1398
  def determinant_e; end

  # source://matrix//lib/matrix.rb#839
  def diagonal?; end

  # source://matrix//lib/matrix.rb#556
  def each(which = T.unsafe(nil), &block); end

  # source://matrix//lib/matrix.rb#616
  def each_with_index(which = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#1550
  def eigen; end

  # source://matrix//lib/matrix.rb#1550
  def eigensystem; end

  # source://matrix//lib/matrix.rb#337
  def element(i, j); end

  # source://matrix//lib/matrix.rb#1692
  def elements_to_f; end

  # source://matrix//lib/matrix.rb#1700
  def elements_to_i; end

  # source://matrix//lib/matrix.rb#1708
  def elements_to_r; end

  # source://matrix//lib/matrix.rb#848
  def empty?; end

  # source://matrix//lib/matrix.rb#1167
  def entrywise_product(m); end

  # source://matrix//lib/matrix.rb#1027
  def eql?(other); end

  # source://matrix//lib/matrix.rb#679
  def find_index(*args); end

  # source://matrix//lib/matrix.rb#751
  def first_minor(row, column); end

  # source://matrix//lib/matrix.rb#534
  def freeze; end

  # source://matrix//lib/matrix.rb#1167
  def hadamard_product(m); end

  # source://matrix//lib/matrix.rb#1044
  def hash; end

  # source://matrix//lib/matrix.rb#856
  def hermitian?; end

  # source://matrix//lib/matrix.rb#1412
  def hstack(*matrices); end

  # source://matrix//lib/matrix.rb#1608
  def imag; end

  # source://matrix//lib/matrix.rb#1608
  def imaginary; end

  # source://matrix//lib/matrix.rb#679
  def index(*args); end

  # source://matrix//lib/matrix.rb#1733
  def inspect; end

  # source://matrix//lib/matrix.rb#1178
  def inv; end

  # source://matrix//lib/matrix.rb#1178
  def inverse; end

  # source://matrix//lib/matrix.rb#810
  def laplace_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#866
  def lower_triangular?; end

  # source://matrix//lib/matrix.rb#1565
  def lup; end

  # source://matrix//lib/matrix.rb#1565
  def lup_decomposition; end

  # source://matrix//lib/matrix.rb#508
  def map(which = T.unsafe(nil), &block); end

  # source://matrix//lib/matrix.rb#526
  def map!(which = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#710
  def minor(*param); end

  # source://matrix//lib/matrix.rb#874
  def normal?; end

  # source://matrix//lib/matrix.rb#892
  def orthogonal?; end

  # source://matrix//lib/matrix.rb#911
  def permutation?; end

  # source://matrix//lib/matrix.rb#1425
  def rank; end

  # source://matrix//lib/matrix.rb#1456
  def rank_e; end

  # source://matrix//lib/matrix.rb#1622
  def real; end

  # source://matrix//lib/matrix.rb#932
  def real?; end

  # source://matrix//lib/matrix.rb#1632
  def rect; end

  # source://matrix//lib/matrix.rb#1632
  def rectangular; end

  # source://matrix//lib/matrix.rb#939
  def regular?; end

  # source://matrix//lib/matrix.rb#1473
  def rotate_entries(rotation = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#1493
  def round(ndigits = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#463
  def row(i, &block); end

  # source://matrix//lib/matrix.rb#448
  def row_count; end

  # source://matrix//lib/matrix.rb#448
  def row_size; end

  # source://matrix//lib/matrix.rb#1660
  def row_vectors; end

  # source://matrix//lib/matrix.rb#946
  def singular?; end

  # source://matrix//lib/matrix.rb#973
  def skew_symmetric?; end

  # source://matrix//lib/matrix.rb#953
  def square?; end

  # source://matrix//lib/matrix.rb#961
  def symmetric?; end

  # source://matrix//lib/matrix.rb#1520
  def t; end

  # source://matrix//lib/matrix.rb#1685
  def to_a; end

  # source://matrix//lib/matrix.rb#1678
  def to_matrix; end

  # source://matrix//lib/matrix.rb#1720
  def to_s; end

  # source://matrix//lib/matrix.rb#1502
  def tr; end

  # source://matrix//lib/matrix.rb#1502
  def trace; end

  # source://matrix//lib/matrix.rb#1520
  def transpose; end

  # source://matrix//lib/matrix.rb#986
  def unitary?; end

  # source://matrix//lib/matrix.rb#1003
  def upper_triangular?; end

  # source://matrix//lib/matrix.rb#1534
  def vstack(*matrices); end

  # source://matrix//lib/matrix.rb#1010
  def zero?; end

  protected

  # source://matrix//lib/matrix.rb#1257
  def power_int(exp); end

  # source://matrix//lib/matrix.rb#69
  def rows; end

  private

  # source://matrix//lib/matrix.rb#376
  def check_int(val, direction); end

  # source://matrix//lib/matrix.rb#370
  def check_range(val, direction); end

  # source://matrix//lib/matrix.rb#1368
  def determinant_bareiss; end

  # source://matrix//lib/matrix.rb#1036
  def initialize_copy(m); end

  # source://matrix//lib/matrix.rb#1184
  def inverse_from(src); end

  # source://matrix//lib/matrix.rb#330
  def new_matrix(rows, column_count = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#432
  def set_col_range(row, col_range, value); end

  # source://matrix//lib/matrix.rb#425
  def set_column_vector(row_range, col, value); end

  # source://matrix//lib/matrix.rb#351
  def set_component(i, j, v); end

  # source://matrix//lib/matrix.rb#351
  def set_element(i, j, v); end

  # source://matrix//lib/matrix.rb#387
  def set_row_and_col_range(row_range, col_range, value); end

  # source://matrix//lib/matrix.rb#411
  def set_row_range(row_range, col, value); end

  # source://matrix//lib/matrix.rb#381
  def set_value(row, col, value); end

  class << self
    # source://matrix//lib/matrix.rb#171
    def I(n); end

    # source://matrix//lib/matrix.rb#78
    def [](*rows); end

    # source://matrix//lib/matrix.rb#123
    def build(row_count, column_count = T.unsafe(nil)); end

    # source://matrix//lib/matrix.rb#209
    def column_vector(column); end

    # source://matrix//lib/matrix.rb#108
    def columns(columns); end

    # source://matrix//lib/matrix.rb#288
    def combine(*matrices); end

    # source://matrix//lib/matrix.rb#143
    def diagonal(*values); end

    # source://matrix//lib/matrix.rb#227
    def empty(row_count = T.unsafe(nil), column_count = T.unsafe(nil)); end

    # source://matrix//lib/matrix.rb#262
    def hstack(x, *matrices); end

    # source://matrix//lib/matrix.rb#171
    def identity(n); end

    # source://matrix//lib/matrix.rb#196
    def row_vector(row); end

    # source://matrix//lib/matrix.rb#90
    def rows(rows, copy = T.unsafe(nil)); end

    # source://matrix//lib/matrix.rb#161
    def scalar(n, value); end

    # source://matrix//lib/matrix.rb#171
    def unit(n); end

    # source://matrix//lib/matrix.rb#241
    def vstack(x, *matrices); end

    # source://matrix//lib/matrix.rb#185
    def zero(row_count, column_count = T.unsafe(nil)); end
  end
end

# source://matrix//lib/matrix.rb#1768
module Matrix::CoercionHelper
  private

  # source://matrix//lib/matrix.rb#1773
  def apply_through_coercion(obj, oper); end

  class << self
    # source://matrix//lib/matrix.rb#1820
    def check_int(val, count, kind); end

    # source://matrix//lib/matrix.rb#1810
    def check_range(val, count, kind); end

    # source://matrix//lib/matrix.rb#1787
    def coerce_to(obj, cls, meth); end

    # source://matrix//lib/matrix.rb#1800
    def coerce_to_int(obj); end

    # source://matrix//lib/matrix.rb#1804
    def coerce_to_matrix(obj); end
  end
end

# source://matrix//lib/matrix.rb#1743
module Matrix::ConversionHelper
  private

  # source://matrix//lib/matrix.rb#1748
  def convert_to_array(obj, copy = T.unsafe(nil)); end
end

# source://matrix//lib/matrix/eigenvalue_decomposition.rb#15
class Matrix::EigenvalueDecomposition
  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#19
  def initialize(a); end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#73
  def d; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#73
  def eigenvalue_matrix; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#59
  def eigenvalues; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#43
  def eigenvector_matrix; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#50
  def eigenvector_matrix_inv; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#67
  def eigenvectors; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#80
  def to_a; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#80
  def to_ary; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#43
  def v; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#50
  def v_inv; end

  private

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#86
  def build_eigenvectors; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#102
  def cdiv(xr, xi, yr, yi); end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#235
  def diagonalize; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#446
  def hessenberg_to_real_schur; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#354
  def reduce_to_hessenberg; end

  # source://matrix//lib/matrix/eigenvalue_decomposition.rb#117
  def tridiagonalize; end
end

# source://matrix//lib/matrix/lup_decomposition.rb#17
class Matrix::LUPDecomposition
  include ::Matrix::ConversionHelper

  # source://matrix//lib/matrix/lup_decomposition.rb#154
  def initialize(a); end

  # source://matrix//lib/matrix/lup_decomposition.rb#79
  def det; end

  # source://matrix//lib/matrix/lup_decomposition.rb#79
  def determinant; end

  # source://matrix//lib/matrix/lup_decomposition.rb#22
  def l; end

  # source://matrix//lib/matrix/lup_decomposition.rb#48
  def p; end

  # source://matrix//lib/matrix/lup_decomposition.rb#63
  def pivots; end

  # source://matrix//lib/matrix/lup_decomposition.rb#67
  def singular?; end

  # source://matrix//lib/matrix/lup_decomposition.rb#95
  def solve(b); end

  # source://matrix//lib/matrix/lup_decomposition.rb#56
  def to_a; end

  # source://matrix//lib/matrix/lup_decomposition.rb#56
  def to_ary; end

  # source://matrix//lib/matrix/lup_decomposition.rb#36
  def u; end
end

# source://matrix//lib/matrix.rb#666
Matrix::SELECTORS = T.let(T.unsafe(nil), Hash)

# source://matrix//lib/matrix.rb#1833
class Matrix::Scalar < ::Numeric
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper

  # source://matrix//lib/matrix.rb#1837
  def initialize(value); end

  # source://matrix//lib/matrix.rb#1864
  def *(other); end

  # source://matrix//lib/matrix.rb#1888
  def **(other); end

  # source://matrix//lib/matrix.rb#1842
  def +(other); end

  # source://matrix//lib/matrix.rb#1853
  def -(other); end

  # source://matrix//lib/matrix.rb#1875
  def /(other); end
end

# source://matrix//lib/matrix/version.rb#4
Matrix::VERSION = T.let(T.unsafe(nil), String)

# source://matrix//lib/matrix.rb#1966
class Vector
  include ::ExceptionForMatrix
  include ::Enumerable
  include ::Matrix::CoercionHelper
  extend ::Matrix::ConversionHelper

  # source://matrix//lib/matrix.rb#2020
  def initialize(array); end

  # source://matrix//lib/matrix.rb#2222
  def *(x); end

  # source://matrix//lib/matrix.rb#2239
  def +(v); end

  # source://matrix//lib/matrix.rb#2287
  def +@; end

  # source://matrix//lib/matrix.rb#2257
  def -(v); end

  # source://matrix//lib/matrix.rb#2291
  def -@; end

  # source://matrix//lib/matrix.rb#2275
  def /(x); end

  # source://matrix//lib/matrix.rb#2198
  def ==(other); end

  # source://matrix//lib/matrix.rb#2034
  def [](i); end

  # source://matrix//lib/matrix.rb#2049
  def []=(i, v); end

  # source://matrix//lib/matrix.rb#2407
  def angle_with(v); end

  # source://matrix//lib/matrix.rb#2467
  def coerce(other); end

  # source://matrix//lib/matrix.rb#2351
  def collect(&block); end

  # source://matrix//lib/matrix.rb#2361
  def collect!(&block); end

  # source://matrix//lib/matrix.rb#2123
  def collect2(v); end

  # source://matrix//lib/matrix.rb#2034
  def component(i); end

  # source://matrix//lib/matrix.rb#2427
  def covector; end

  # source://matrix//lib/matrix.rb#2326
  def cross(*vs); end

  # source://matrix//lib/matrix.rb#2326
  def cross_product(*vs); end

  # source://matrix//lib/matrix.rb#2303
  def dot(v); end

  # source://matrix//lib/matrix.rb#2100
  def each(&block); end

  # source://matrix//lib/matrix.rb#2109
  def each2(v); end

  # source://matrix//lib/matrix.rb#2034
  def element(i); end

  # source://matrix//lib/matrix.rb#2445
  def elements_to_f; end

  # source://matrix//lib/matrix.rb#2450
  def elements_to_i; end

  # source://matrix//lib/matrix.rb#2455
  def elements_to_r; end

  # source://matrix//lib/matrix.rb#2203
  def eql?(other); end

  # source://matrix//lib/matrix.rb#2177
  def freeze; end

  # source://matrix//lib/matrix.rb#2211
  def hash; end

  # source://matrix//lib/matrix.rb#2163
  def independent?(*vs); end

  # source://matrix//lib/matrix.rb#2303
  def inner_product(v); end

  # source://matrix//lib/matrix.rb#2490
  def inspect; end

  # source://matrix//lib/matrix.rb#2373
  def magnitude; end

  # source://matrix//lib/matrix.rb#2351
  def map(&block); end

  # source://matrix//lib/matrix.rb#2361
  def map!(&block); end

  # source://matrix//lib/matrix.rb#2382
  def map2(v, &block); end

  # source://matrix//lib/matrix.rb#2373
  def norm; end

  # source://matrix//lib/matrix.rb#2396
  def normalize; end

  # source://matrix//lib/matrix.rb#2373
  def r; end

  # source://matrix//lib/matrix.rb#2082
  def round(ndigits = T.unsafe(nil)); end

  # source://matrix//lib/matrix.rb#2089
  def size; end

  # source://matrix//lib/matrix.rb#2434
  def to_a; end

  # source://matrix//lib/matrix.rb#2441
  def to_matrix; end

  # source://matrix//lib/matrix.rb#2483
  def to_s; end

  # source://matrix//lib/matrix.rb#2170
  def zero?; end

  protected

  # source://matrix//lib/matrix.rb#1974
  def elements; end

  private

  # source://matrix//lib/matrix.rb#2185
  def initialize_copy(v); end

  # source://matrix//lib/matrix.rb#2049
  def set_component(i, v); end

  # source://matrix//lib/matrix.rb#2049
  def set_element(i, v); end

  # source://matrix//lib/matrix.rb#2067
  def set_range(range, value); end

  # source://matrix//lib/matrix.rb#2063
  def set_value(index, value); end

  class << self
    # source://matrix//lib/matrix.rb#1981
    def [](*array); end

    # source://matrix//lib/matrix.rb#1998
    def basis(size:, index:); end

    # source://matrix//lib/matrix.rb#1989
    def elements(array, copy = T.unsafe(nil)); end

    # source://matrix//lib/matrix.rb#2145
    def independent?(*vs); end

    # source://matrix//lib/matrix.rb#2011
    def zero(size); end
  end
end

# source://matrix//lib/matrix.rb#2388
class Vector::ZeroVectorError < ::StandardError; end
