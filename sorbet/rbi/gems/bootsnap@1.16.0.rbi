# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bootsnap` gem.
# Please instead update this file by running `bin/tapioca gem bootsnap`.

# source://bootsnap//lib/bootsnap/version.rb#3
module Bootsnap
  extend ::Bootsnap

  # source://bootsnap//lib/bootsnap/bundler.rb#6
  def bundler?; end

  private

  def instrumentation_enabled=(_arg0); end

  class << self
    # source://bootsnap//lib/bootsnap.rb#34
    def _instrument(event, path); end

    # source://bootsnap//lib/bootsnap.rb#122
    def absolute_path?(path); end

    # source://bootsnap//lib/bootsnap.rb#70
    def default_setup; end

    # source://bootsnap//lib/bootsnap.rb#27
    def instrumentation=(callback); end

    def instrumentation_enabled=(_arg0); end

    # source://bootsnap//lib/bootsnap.rb#14
    def log!; end

    # source://bootsnap//lib/bootsnap.rb#12
    def logger; end

    # source://bootsnap//lib/bootsnap.rb#18
    def logger=(logger); end

    def rb_get_path(_arg0); end

    # source://bootsnap//lib/bootsnap.rb#38
    def setup(cache_dir:, development_mode: T.unsafe(nil), load_path_cache: T.unsafe(nil), ignore_directories: T.unsafe(nil), readonly: T.unsafe(nil), compile_cache_iseq: T.unsafe(nil), compile_cache_yaml: T.unsafe(nil), compile_cache_json: T.unsafe(nil)); end

    # source://bootsnap//lib/bootsnap.rb#66
    def unload_cache!; end
  end
end

# source://bootsnap//lib/bootsnap/compile_cache.rb#4
module Bootsnap::CompileCache
  class << self
    # source://bootsnap//lib/bootsnap/compile_cache.rb#46
    def permission_error(path); end

    # source://bootsnap//lib/bootsnap/compile_cache.rb#13
    def setup(cache_dir:, iseq:, yaml:, json:, readonly: T.unsafe(nil)); end

    # source://bootsnap//lib/bootsnap/compile_cache.rb#55
    def supported?; end
  end
end

# source://bootsnap//lib/bootsnap/compile_cache.rb#10
class Bootsnap::CompileCache::Error < ::StandardError; end

# source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#8
module Bootsnap::CompileCache::ISeq
  class << self
    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#10
    def cache_dir; end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#12
    def cache_dir=(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#101
    def compile_option_updated; end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#59
    def fetch(path, cache_dir: T.unsafe(nil)); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#76
    def input_to_output(_data, _kwargs); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#41
    def input_to_storage(_, path); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#108
    def install!(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#68
    def precompile(path); end

    # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#48
    def storage_to_output(binary, _args); end
  end
end

# source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#80
module Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
  # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#95
  def compile_option=(hash); end

  # source://bootsnap//lib/bootsnap/compile_cache/iseq.rb#81
  def load_iseq(path); end
end

# source://bootsnap//lib/bootsnap/compile_cache/json.rb#7
module Bootsnap::CompileCache::JSON
  class << self
    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#10
    def cache_dir; end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#12
    def cache_dir=(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#48
    def init!; end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#28
    def input_to_output(data, kwargs); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#16
    def input_to_storage(payload, _); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#40
    def install!(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#9
    def msgpack_factory; end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#9
    def msgpack_factory=(_arg0); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#32
    def precompile(path); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#21
    def storage_to_output(data, kwargs); end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#9
    def supported_options; end

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#9
    def supported_options=(_arg0); end

    private

    # source://bootsnap//lib/bootsnap/compile_cache/json.rb#62
    def supports_freeze?; end
  end
end

# source://bootsnap//lib/bootsnap/compile_cache/json.rb#68
module Bootsnap::CompileCache::JSON::Patch
  # source://bootsnap//lib/bootsnap/compile_cache/json.rb#69
  def load_file(path, *args, **_arg2); end
end

module Bootsnap::CompileCache::Native
  private

  def compile_option_crc32=(_arg0); end
  def coverage_running?; end
  def fetch(_arg0, _arg1, _arg2, _arg3); end
  def precompile(_arg0, _arg1, _arg2); end
  def readonly=(_arg0); end

  class << self
    def compile_option_crc32=(_arg0); end
    def coverage_running?; end
    def fetch(_arg0, _arg1, _arg2, _arg3); end
    def precompile(_arg0, _arg1, _arg2); end
    def readonly=(_arg0); end
  end
end

# source://bootsnap//lib/bootsnap/compile_cache.rb#11
class Bootsnap::CompileCache::PermissionError < ::Bootsnap::CompileCache::Error; end

# source://bootsnap//lib/bootsnap/compile_cache.rb#5
Bootsnap::CompileCache::UNCOMPILABLE = T.let(T.unsafe(nil), BasicObject)

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#7
module Bootsnap::CompileCache::YAML
  class << self
    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#20
    def cache_dir; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#22
    def cache_dir=(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#20
    def implementation; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#57
    def init!; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#36
    def install!(cache_dir); end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#19
    def msgpack_factory; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#19
    def msgpack_factory=(_arg0); end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#124
    def patch; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#26
    def precompile(path); end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#128
    def strict_load(payload); end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#45
    def supported_internal_encoding?; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#19
    def supported_options; end

    # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#19
    def supported_options=(_arg0); end
  end
end

# source://bootsnap//lib/bootsnap/setup.rb#0
class Bootsnap::CompileCache::YAML::NoTagsVisitor < ::Psych::Visitors::NoAliasRuby
  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#69
  def visit(target); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#272
module Bootsnap::CompileCache::YAML::Psych3
  extend ::Bootsnap::CompileCache::YAML::Psych3

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#297
  def input_to_output(data, kwargs); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#275
  def input_to_storage(contents, _); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#287
  def storage_to_output(data, kwargs); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#301
module Bootsnap::CompileCache::YAML::Psych3::Patch
  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#302
  def load_file(path, *args, **_arg2); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#326
  def unsafe_load_file(path, *args, **_arg2); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#139
module Bootsnap::CompileCache::YAML::Psych4
  extend ::Bootsnap::CompileCache::YAML::Psych4

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#142
  def input_to_storage(contents, _); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#221
module Bootsnap::CompileCache::YAML::Psych4::Patch
  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#222
  def load_file(path, *args, **_arg2); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#246
  def unsafe_load_file(path, *args, **_arg2); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#181
module Bootsnap::CompileCache::YAML::Psych4::SafeLoad
  extend ::Bootsnap::CompileCache::YAML::Psych4::SafeLoad

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#216
  def input_to_output(data, kwargs); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#184
  def input_to_storage(contents, _); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#201
  def storage_to_output(data, kwargs); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#150
module Bootsnap::CompileCache::YAML::Psych4::UnsafeLoad
  extend ::Bootsnap::CompileCache::YAML::Psych4::UnsafeLoad

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#176
  def input_to_output(data, kwargs); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#153
  def input_to_storage(contents, _); end

  # source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#165
  def storage_to_output(data, kwargs); end
end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#11
Bootsnap::CompileCache::YAML::SUPPORTED_INTERNAL_ENCODINGS = T.let(T.unsafe(nil), Array)

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#8
class Bootsnap::CompileCache::YAML::Uncompilable < ::StandardError; end

# source://bootsnap//lib/bootsnap/compile_cache/yaml.rb#9
class Bootsnap::CompileCache::YAML::UnsupportedTags < ::Bootsnap::CompileCache::YAML::Uncompilable; end

# source://bootsnap//lib/bootsnap/explicit_require.rb#4
module Bootsnap::ExplicitRequire
  class << self
    # source://bootsnap//lib/bootsnap/explicit_require.rb#17
    def from_archdir(feature); end

    # source://bootsnap//lib/bootsnap/explicit_require.rb#13
    def from_rubylibdir(feature); end

    # source://bootsnap//lib/bootsnap/explicit_require.rb#9
    def from_self(feature); end

    # source://bootsnap//lib/bootsnap/explicit_require.rb#27
    def with_gems(*gems); end
  end
end

# source://bootsnap//lib/bootsnap/explicit_require.rb#5
Bootsnap::ExplicitRequire::ARCHDIR = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/explicit_require.rb#7
Bootsnap::ExplicitRequire::DLEXT = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/explicit_require.rb#6
Bootsnap::ExplicitRequire::RUBYLIBDIR = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap.rb#9
class Bootsnap::InvalidConfiguration < ::StandardError; end

# source://bootsnap//lib/bootsnap/load_path_cache.rb#4
module Bootsnap::LoadPathCache
  class << self
    # source://bootsnap//lib/bootsnap/load_path_cache.rb#27
    def enabled?; end

    # source://bootsnap//lib/bootsnap/load_path_cache.rb#27
    def load_path_cache; end

    # source://bootsnap//lib/bootsnap/load_path_cache.rb#27
    def loaded_features_index; end

    # source://bootsnap//lib/bootsnap/load_path_cache.rb#31
    def setup(cache_path:, development_mode:, ignore_directories:, readonly: T.unsafe(nil)); end

    # source://bootsnap//lib/bootsnap/load_path_cache.rb#56
    def supported?; end

    # source://bootsnap//lib/bootsnap/load_path_cache.rb#48
    def unload!; end
  end
end

# source://bootsnap//lib/bootsnap/load_path_cache.rb#22
Bootsnap::LoadPathCache::CACHED_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#7
class Bootsnap::LoadPathCache::Cache
  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#10
  def initialize(store, path_obj, development_mode: T.unsafe(nil)); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#48
  def find(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#22
  def load_dir(dir); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#108
  def push_paths(sender, *paths); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#114
  def reinitialize(path_obj = T.unsafe(nil)); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#102
  def unshift_paths(sender, *paths); end

  private

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#127
  def dir_changed?; end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#172
  def expand_path(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#203
  def maybe_append_extension(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#180
  def now; end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#137
  def push_paths_locked(*paths); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#199
  def search_index(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#176
  def stale?; end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#231
  def try_ext(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#211
  def try_index(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#155
  def unshift_paths_locked(*paths); end
end

# source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#8
Bootsnap::LoadPathCache::Cache::AGE_THRESHOLD = T.let(T.unsafe(nil), Integer)

# source://bootsnap//lib/bootsnap/load_path_cache/cache.rb#28
Bootsnap::LoadPathCache::Cache::BUILTIN_FEATURES = T.let(T.unsafe(nil), Hash)

# source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#5
module Bootsnap::LoadPathCache::ChangeObserver
  class << self
    # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#59
    def register(arr, observer); end

    # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#68
    def unregister(arr); end
  end
end

# source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#6
module Bootsnap::LoadPathCache::ChangeObserver::ArrayMixin
  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#10
  def <<(entry); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def []=(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#15
  def append(*entries); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def clear(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def collect!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def compact!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#27
  def concat(entries); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def delete(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def delete_at(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def delete_if(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def fill(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def flatten!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def insert(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def keep_if(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def map!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def pop(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#21
  def prepend(*entries); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#15
  def push(*entries); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def reject!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def replace(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def reverse!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def rotate!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def select!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def shift(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def shuffle!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def slice!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def sort!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#51
  def sort_by!(*args, &block); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#34
  def uniq!(*args); end

  # source://bootsnap//lib/bootsnap/load_path_cache/change_observer.rb#21
  def unshift(*entries); end
end

# source://bootsnap//lib/bootsnap/load_path_cache.rb#16
Bootsnap::LoadPathCache::DLEXT = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#20
Bootsnap::LoadPathCache::DLEXT2 = T.let(T.unsafe(nil), T.untyped)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#11
Bootsnap::LoadPathCache::DL_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#7
Bootsnap::LoadPathCache::DOT_RB = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#8
Bootsnap::LoadPathCache::DOT_SO = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#5
Bootsnap::LoadPathCache::FALLBACK_SCAN = T.let(T.unsafe(nil), BasicObject)

# source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#26
class Bootsnap::LoadPathCache::LoadedFeaturesIndex
  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#27
  def initialize; end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#72
  def cursor(short); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#78
  def identify(short, cursor); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#68
  def key?(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#54
  def purge(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#61
  def purge_multi(features); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#105
  def register(short, long); end

  private

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#146
  def extension_elidable?(feature); end

  # source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#150
  def strip_extension_if_elidable(feature); end
end

# source://bootsnap//lib/bootsnap/load_path_cache/loaded_features_index.rb#129
Bootsnap::LoadPathCache::LoadedFeaturesIndex::STRIP_EXTENSION = T.let(T.unsafe(nil), Regexp)

# source://bootsnap//lib/bootsnap/load_path_cache/path.rb#7
class Bootsnap::LoadPathCache::Path
  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#24
  def initialize(path, real: T.unsafe(nil)); end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#59
  def entries_and_dirs(store); end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#82
  def expanded_path; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#47
  def non_directory?; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#22
  def path; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#53
  def relative?; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#11
  def stable?; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#29
  def to_realpath; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#18
  def volatile?; end

  private

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#99
  def latest_mtime(path, dirs); end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#92
  def scan!; end

  # source://bootsnap//lib/bootsnap/load_path_cache/path.rb#123
  def stability; end
end

# source://bootsnap//lib/bootsnap/load_path_cache/path.rb#120
Bootsnap::LoadPathCache::Path::RUBY_LIBDIR = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache/path.rb#121
Bootsnap::LoadPathCache::Path::RUBY_SITEDIR = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache/path.rb#115
Bootsnap::LoadPathCache::Path::STABLE = T.let(T.unsafe(nil), Symbol)

# source://bootsnap//lib/bootsnap/load_path_cache/path.rb#116
Bootsnap::LoadPathCache::Path::VOLATILE = T.let(T.unsafe(nil), Symbol)

# source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#7
module Bootsnap::LoadPathCache::PathScanner
  class << self
    # source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#23
    def call(path); end

    # source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#21
    def ignored_directories; end

    # source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#21
    def ignored_directories=(_arg0); end

    # source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#69
    def os_path(path); end

    # source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#49
    def walk(absolute_dir_path, relative_dir_path, &block); end
  end
end

# source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#10
Bootsnap::LoadPathCache::PathScanner::ALTERNATIVE_NATIVE_EXTENSIONS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#12
Bootsnap::LoadPathCache::PathScanner::BUNDLE_PATH = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#9
Bootsnap::LoadPathCache::PathScanner::NORMALIZE_NATIVE_EXTENSIONS = T.let(T.unsafe(nil), TrueClass)

# source://bootsnap//lib/bootsnap/load_path_cache/path_scanner.rb#8
Bootsnap::LoadPathCache::PathScanner::REQUIRABLE_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://bootsnap//lib/bootsnap/load_path_cache.rb#9
Bootsnap::LoadPathCache::SLASH = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache/store.rb#9
class Bootsnap::LoadPathCache::Store
  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#16
  def initialize(store_path, readonly: T.unsafe(nil)); end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#28
  def fetch(key); end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#24
  def get(key); end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#40
  def set(key, value); end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#49
  def transaction; end

  private

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#66
  def commit_transaction; end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#112
  def default_data; end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#95
  def dump_data; end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#73
  def load_data; end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#61
  def mark_for_mutation!; end

  # source://bootsnap//lib/bootsnap/load_path_cache/store.rb#116
  def mkdir_p(path); end
end

# source://bootsnap//lib/bootsnap/load_path_cache/store.rb#11
Bootsnap::LoadPathCache::Store::CURRENT_VERSION = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/load_path_cache/store.rb#13
class Bootsnap::LoadPathCache::Store::NestedTransactionError < ::StandardError; end

# source://bootsnap//lib/bootsnap/load_path_cache/store.rb#14
class Bootsnap::LoadPathCache::Store::SetOutsideTransactionNotAllowed < ::StandardError; end

# source://bootsnap//lib/bootsnap/load_path_cache/store.rb#10
Bootsnap::LoadPathCache::Store::VERSION_KEY = T.let(T.unsafe(nil), String)

# source://bootsnap//lib/bootsnap/version.rb#4
Bootsnap::VERSION = T.let(T.unsafe(nil), String)

module JSON
  extend ::Bootsnap::CompileCache::JSON::Patch
end

# source://bootsnap//lib/bootsnap/load_path_cache/core_ext/kernel_require.rb#3
module Kernel
  private

  # source://bootsnap//lib/bootsnap/load_path_cache/core_ext/kernel_require.rb#8
  def zeitwerk_original_require(path); end

  class << self
    # source://bootsnap//lib/bootsnap/load_path_cache/core_ext/kernel_require.rb#8
    def zeitwerk_original_require(path); end
  end
end

module Psych
  extend ::Bootsnap::CompileCache::YAML::Psych4::Patch
end

class RubyVM::InstructionSequence
  extend ::Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
end
