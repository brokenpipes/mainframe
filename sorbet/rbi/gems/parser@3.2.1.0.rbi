# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `parser` gem.
# Please instead update this file by running `bin/tapioca gem parser`.

# source://parser//lib/parser.rb#19
module Parser
  class << self
    private

    # source://parser//lib/parser/current.rb#5
    def warn_syntax_deviation(feature, version); end
  end
end

# source://parser//lib/parser.rb#24
module Parser::AST; end

# source://parser//lib/parser/ast/node.rb#17
class Parser::AST::Node < ::AST::Node
  # source://parser//lib/parser/ast/node.rb#30
  def assign_properties(properties); end

  # source://parser//lib/parser/ast/node.rb#18
  def loc; end

  # source://parser//lib/parser/ast/node.rb#18
  def location; end
end

# source://parser//lib/parser/ast/processor.rb#9
class Parser::AST::Processor < ::AST::Processor
  # source://parser//lib/parser/ast/processor.rb#10
  def on_alias(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_and(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_and_asgn(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_arg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_arg_expr(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_args(node); end

  # source://parser//lib/parser/ast/processor.rb#103
  def on_argument(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_array(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_array_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_array_pattern_with_tail(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_back_ref(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_begin(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_block(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_block_pass(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_blockarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_blockarg_expr(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_break(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_case(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_case_match(node); end

  # source://parser//lib/parser/ast/processor.rb#87
  def on_casgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_class(node); end

  # source://parser//lib/parser/ast/processor.rb#79
  def on_const(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_const_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#179
  def on_csend(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_cvar(node); end

  # source://parser//lib/parser/ast/processor.rb#56
  def on_cvasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#158
  def on_def(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_defined?(node); end

  # source://parser//lib/parser/ast/processor.rb#167
  def on_defs(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_dstr(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_dsym(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_eflipflop(node); end

  # source://parser//lib/parser/ast/processor.rb#286
  def on_empty_else(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_ensure(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_erange(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_find_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_for(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_forward_arg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_forwarded_kwrestarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_forwarded_restarg(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_gvar(node); end

  # source://parser//lib/parser/ast/processor.rb#56
  def on_gvasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_hash(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_hash_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_if(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_if_guard(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_iflipflop(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_in_match(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_in_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_index(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_indexasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_irange(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_ivar(node); end

  # source://parser//lib/parser/ast/processor.rb#56
  def on_ivasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_kwarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_kwargs(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_kwbegin(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_kwoptarg(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_kwrestarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_kwsplat(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_lambda(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_lvar(node); end

  # source://parser//lib/parser/ast/processor.rb#56
  def on_lvasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_masgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_alt(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_as(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_current_line(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_pattern(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_pattern_p(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_rest(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_match_var(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_match_with_lvasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_mlhs(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_module(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_next(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_not(node); end

  # source://parser//lib/parser/ast/processor.rb#32
  def on_nth_ref(node); end

  # source://parser//lib/parser/ast/processor.rb#196
  def on_numblock(node); end

  # source://parser//lib/parser/ast/processor.rb#68
  def on_op_asgn(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_optarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_or(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_or_asgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_pair(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_pin(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_postexe(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_preexe(node); end

  # source://parser//lib/parser/ast/processor.rb#130
  def on_procarg0(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_redo(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_regexp(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_resbody(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_rescue(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_restarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_restarg_expr(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_retry(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_return(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_sclass(node); end

  # source://parser//lib/parser/ast/processor.rb#179
  def on_send(node); end

  # source://parser//lib/parser/ast/processor.rb#116
  def on_shadowarg(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_splat(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_super(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_undef(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_unless_guard(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_until(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_until_post(node); end

  # source://parser//lib/parser/ast/processor.rb#27
  def on_var(node); end

  # source://parser//lib/parser/ast/processor.rb#43
  def on_vasgn(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_when(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_while(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_while_post(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_xstr(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def on_yield(node); end

  # source://parser//lib/parser/ast/processor.rb#279
  def process_argument_node(node); end

  # source://parser//lib/parser/ast/processor.rb#10
  def process_regular_node(node); end

  # source://parser//lib/parser/ast/processor.rb#271
  def process_var_asgn_node(node); end

  # source://parser//lib/parser/ast/processor.rb#263
  def process_variable_node(node); end
end

# source://parser//lib/parser/base.rb#16
class Parser::Base < ::Racc::Parser
  # source://parser//lib/parser/base.rb#126
  def initialize(builder = T.unsafe(nil)); end

  # source://parser//lib/parser/base.rb#114
  def builder; end

  # source://parser//lib/parser/base.rb#117
  def context; end

  # source://parser//lib/parser/base.rb#119
  def current_arg_stack; end

  # source://parser//lib/parser/base.rb#113
  def diagnostics; end

  # source://parser//lib/parser/base.rb#112
  def lexer; end

  # source://parser//lib/parser/base.rb#118
  def max_numparam_stack; end

  # source://parser//lib/parser/base.rb#186
  def parse(source_buffer); end

  # source://parser//lib/parser/base.rb#204
  def parse_with_comments(source_buffer); end

  # source://parser//lib/parser/base.rb#121
  def pattern_hash_keys; end

  # source://parser//lib/parser/base.rb#120
  def pattern_variables; end

  # source://parser//lib/parser/base.rb#167
  def reset; end

  # source://parser//lib/parser/base.rb#116
  def source_buffer; end

  # source://parser//lib/parser/base.rb#115
  def static_env; end

  # source://parser//lib/parser/base.rb#233
  def tokenize(source_buffer, recover = T.unsafe(nil)); end

  private

  # source://parser//lib/parser/base.rb#257
  def check_kwarg_name(name_t); end

  # source://parser//lib/parser/base.rb#266
  def diagnostic(level, reason, arguments, location_t, highlights_ts = T.unsafe(nil)); end

  # source://parser//lib/parser/base.rb#251
  def next_token; end

  # source://parser//lib/parser/base.rb#282
  def on_error(error_token_id, error_value, value_stack); end

  class << self
    # source://parser//lib/parser/base.rb#84
    def default_parser; end

    # source://parser//lib/parser/base.rb#30
    def parse(string, file = T.unsafe(nil), line = T.unsafe(nil)); end

    # source://parser//lib/parser/base.rb#64
    def parse_file(filename); end

    # source://parser//lib/parser/base.rb#77
    def parse_file_with_comments(filename); end

    # source://parser//lib/parser/base.rb#49
    def parse_with_comments(string, file = T.unsafe(nil), line = T.unsafe(nil)); end

    private

    # source://parser//lib/parser/base.rb#97
    def setup_source_buffer(file, line, string, encoding); end
  end
end

# source://parser//lib/parser.rb#77
module Parser::Builders; end

# source://parser//lib/parser/builders/default.rb#8
class Parser::Builders::Default
  # source://parser//lib/parser/builders/default.rb#243
  def initialize; end

  # source://parser//lib/parser/builders/default.rb#696
  def __ENCODING__(__ENCODING__t); end

  # source://parser//lib/parser/builders/default.rb#348
  def __FILE__(__FILE__t); end

  # source://parser//lib/parser/builders/default.rb#312
  def __LINE__(__LINE__t); end

  # source://parser//lib/parser/builders/default.rb#622
  def accessible(node); end

  # source://parser//lib/parser/builders/default.rb#871
  def alias(alias_t, to, from); end

  # source://parser//lib/parser/builders/default.rb#910
  def arg(name_t); end

  # source://parser//lib/parser/builders/default.rb#1000
  def arg_expr(expr); end

  # source://parser//lib/parser/builders/default.rb#880
  def args(begin_t, args, end_t, check_args = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#440
  def array(begin_t, elements, end_t); end

  # source://parser//lib/parser/builders/default.rb#1583
  def array_pattern(lbrack_t, elements, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#760
  def assign(lhs, eql_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#705
  def assignable(node); end

  # source://parser//lib/parser/builders/default.rb#540
  def associate(begin_t, pairs, end_t); end

  # source://parser//lib/parser/builders/default.rb#1164
  def attr_asgn(receiver, dot_t, selector_t); end

  # source://parser//lib/parser/builders/default.rb#612
  def back_ref(token); end

  # source://parser//lib/parser/builders/default.rb#1428
  def begin(begin_t, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#1370
  def begin_body(compound_stmt, rescue_bodies = T.unsafe(nil), else_t = T.unsafe(nil), else_ = T.unsafe(nil), ensure_t = T.unsafe(nil), ensure_ = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1446
  def begin_keyword(begin_t, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#1198
  def binary_op(receiver, operator_t, arg); end

  # source://parser//lib/parser/builders/default.rb#1115
  def block(method_call, begin_t, args, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#1150
  def block_pass(amper_t, arg); end

  # source://parser//lib/parser/builders/default.rb#975
  def blockarg(amper_t, name_t); end

  # source://parser//lib/parser/builders/default.rb#1020
  def blockarg_expr(amper_t, expr); end

  # source://parser//lib/parser/builders/default.rb#1106
  def call_lambda(lambda_t); end

  # source://parser//lib/parser/builders/default.rb#1089
  def call_method(receiver, dot_t, selector_t, lparen_t = T.unsafe(nil), args = T.unsafe(nil), rparen_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1061
  def call_type_for_dot(dot_t); end

  # source://parser//lib/parser/builders/default.rb#1303
  def case(case_t, expr, when_bodies, else_t, else_body, end_t); end

  # source://parser//lib/parser/builders/default.rb#1466
  def case_match(case_t, expr, in_bodies, else_t, else_body, end_t); end

  # source://parser//lib/parser/builders/default.rb#343
  def character(char_t); end

  # source://parser//lib/parser/builders/default.rb#284
  def complex(complex_t); end

  # source://parser//lib/parser/builders/default.rb#1416
  def compstmt(statements); end

  # source://parser//lib/parser/builders/default.rb#1279
  def condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t); end

  # source://parser//lib/parser/builders/default.rb#1285
  def condition_mod(if_true, if_false, cond_t, cond); end

  # source://parser//lib/parser/builders/default.rb#679
  def const(name_t); end

  # source://parser//lib/parser/builders/default.rb#691
  def const_fetch(scope, t_colon2, name_t); end

  # source://parser//lib/parser/builders/default.rb#684
  def const_global(t_colon3, name_t); end

  # source://parser//lib/parser/builders/default.rb#756
  def const_op_assignable(node); end

  # source://parser//lib/parser/builders/default.rb#1613
  def const_pattern(const, ldelim_t, pattern, rdelim_t); end

  # source://parser//lib/parser/builders/default.rb#607
  def cvar(token); end

  # source://parser//lib/parser/builders/default.rb#388
  def dedent_string(node, dedent_level); end

  # source://parser//lib/parser/builders/default.rb#807
  def def_class(class_t, name, lt_t, superclass, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#838
  def def_endless_method(def_t, name_t, args, assignment_t, body); end

  # source://parser//lib/parser/builders/default.rb#856
  def def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body); end

  # source://parser//lib/parser/builders/default.rb#830
  def def_method(def_t, name_t, args, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#820
  def def_module(module_t, name, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#814
  def def_sclass(class_t, lshft_t, expr, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#846
  def def_singleton(def_t, definee, dot_t, name_t, args, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#237
  def emit_file_line_as_literals; end

  # source://parser//lib/parser/builders/default.rb#237
  def emit_file_line_as_literals=(_arg0); end

  # source://parser//lib/parser/builders/default.rb#265
  def false(false_t); end

  # source://parser//lib/parser/builders/default.rb#1604
  def find_pattern(lbrack_t, elements, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#276
  def float(float_t); end

  # source://parser//lib/parser/builders/default.rb#1324
  def for(for_t, iterator, in_t, iteratee, do_t, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#906
  def forward_arg(dots_t); end

  # source://parser//lib/parser/builders/default.rb#896
  def forward_only_args(begin_t, dots_t, end_t); end

  # source://parser//lib/parser/builders/default.rb#1077
  def forwarded_args(dots_t); end

  # source://parser//lib/parser/builders/default.rb#1085
  def forwarded_kwrestarg(dstar_t); end

  # source://parser//lib/parser/builders/default.rb#1081
  def forwarded_restarg(star_t); end

  # source://parser//lib/parser/builders/default.rb#602
  def gvar(token); end

  # source://parser//lib/parser/builders/default.rb#1577
  def hash_pattern(lbrace_t, kwargs, rbrace_t); end

  # source://parser//lib/parser/builders/default.rb#592
  def ident(token); end

  # source://parser//lib/parser/builders/default.rb#1493
  def if_guard(if_t, if_body); end

  # source://parser//lib/parser/builders/default.rb#1472
  def in_match(lhs, in_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#1487
  def in_pattern(in_t, pattern, guard, then_t, body); end

  # source://parser//lib/parser/builders/default.rb#1173
  def index(receiver, lbrack_t, indexes, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#1187
  def index_asgn(receiver, lbrack_t, indexes, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#272
  def integer(integer_t); end

  # source://parser//lib/parser/builders/default.rb#597
  def ivar(token); end

  # source://parser//lib/parser/builders/default.rb#1332
  def keyword_cmd(type, keyword_t, lparen_t = T.unsafe(nil), args = T.unsafe(nil), rparen_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#937
  def kwarg(name_t); end

  # source://parser//lib/parser/builders/default.rb#963
  def kwnilarg(dstar_t, nil_t); end

  # source://parser//lib/parser/builders/default.rb#944
  def kwoptarg(name_t, value); end

  # source://parser//lib/parser/builders/default.rb#951
  def kwrestarg(dstar_t, name_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#535
  def kwsplat(dstar_t, arg); end

  # source://parser//lib/parser/builders/default.rb#1272
  def logical_op(type, lhs, op_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#1310
  def loop(type, keyword_t, cond, do_t, body, end_t); end

  # source://parser//lib/parser/builders/default.rb#1315
  def loop_mod(type, body, keyword_t, cond); end

  # source://parser//lib/parser/builders/default.rb#1627
  def match_alt(left, pipe_t, right); end

  # source://parser//lib/parser/builders/default.rb#1634
  def match_as(value, assoc_t, as); end

  # source://parser//lib/parser/builders/default.rb#1513
  def match_hash_var(name_t); end

  # source://parser//lib/parser/builders/default.rb#1527
  def match_hash_var_from_str(begin_t, strings, end_t); end

  # source://parser//lib/parser/builders/default.rb#1665
  def match_label(label_type, label); end

  # source://parser//lib/parser/builders/default.rb#1641
  def match_nil_pattern(dstar_t, nil_t); end

  # source://parser//lib/parser/builders/default.rb#1220
  def match_op(receiver, match_t, arg); end

  # source://parser//lib/parser/builders/default.rb#1646
  def match_pair(label_type, label, value); end

  # source://parser//lib/parser/builders/default.rb#1477
  def match_pattern(lhs, match_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#1482
  def match_pattern_p(lhs, match_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#1566
  def match_rest(star_t, name_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1501
  def match_var(name_t); end

  # source://parser//lib/parser/builders/default.rb#1609
  def match_with_trailing_comma(match, comma_t); end

  # source://parser//lib/parser/builders/default.rb#798
  def multi_assign(lhs, eql_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#793
  def multi_lhs(begin_t, items, end_t); end

  # source://parser//lib/parser/builders/default.rb#255
  def nil(nil_t); end

  # source://parser//lib/parser/builders/default.rb#1248
  def not_op(not_t, begin_t = T.unsafe(nil), receiver = T.unsafe(nil), end_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#617
  def nth_ref(token); end

  # source://parser//lib/parser/builders/default.rb#892
  def numargs(max_numparam); end

  # source://parser//lib/parser/builders/default.rb#1031
  def objc_kwarg(kwname_t, assoc_t, name_t); end

  # source://parser//lib/parser/builders/default.rb#1045
  def objc_restarg(star_t, name = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1155
  def objc_varargs(pair, rest_of_varargs); end

  # source://parser//lib/parser/builders/default.rb#767
  def op_assign(lhs, op_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#917
  def optarg(name_t, eql_t, value); end

  # source://parser//lib/parser/builders/default.rb#488
  def pair(key, assoc_t, value); end

  # source://parser//lib/parser/builders/default.rb#505
  def pair_keyword(key_t, value); end

  # source://parser//lib/parser/builders/default.rb#521
  def pair_label(key_t); end

  # source://parser//lib/parser/builders/default.rb#493
  def pair_list_18(list); end

  # source://parser//lib/parser/builders/default.rb#513
  def pair_quoted(begin_t, parts, end_t, value); end

  # source://parser//lib/parser/builders/default.rb#225
  def parser; end

  # source://parser//lib/parser/builders/default.rb#225
  def parser=(_arg0); end

  # source://parser//lib/parser/builders/default.rb#1622
  def pin(pin_t, var); end

  # source://parser//lib/parser/builders/default.rb#1355
  def postexe(postexe_t, lbrace_t, compstmt, rbrace_t); end

  # source://parser//lib/parser/builders/default.rb#1350
  def preexe(preexe_t, lbrace_t, compstmt, rbrace_t); end

  # source://parser//lib/parser/builders/default.rb#985
  def procarg0(arg); end

  # source://parser//lib/parser/builders/default.rb#578
  def range_exclusive(lhs, dot3_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#573
  def range_inclusive(lhs, dot2_t, rhs); end

  # source://parser//lib/parser/builders/default.rb#280
  def rational(rational_t); end

  # source://parser//lib/parser/builders/default.rb#426
  def regexp_compose(begin_t, parts, end_t, options); end

  # source://parser//lib/parser/builders/default.rb#417
  def regexp_options(regopt_t); end

  # source://parser//lib/parser/builders/default.rb#1362
  def rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt); end

  # source://parser//lib/parser/builders/default.rb#926
  def restarg(star_t, name_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1009
  def restarg_expr(star_t, expr = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#587
  def self(token); end

  # source://parser//lib/parser/builders/default.rb#968
  def shadowarg(name_t); end

  # source://parser//lib/parser/builders/default.rb#445
  def splat(star_t, arg = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#319
  def string(string_t); end

  # source://parser//lib/parser/builders/default.rb#329
  def string_compose(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#324
  def string_internal(string_t); end

  # source://parser//lib/parser/builders/default.rb#355
  def symbol(symbol_t); end

  # source://parser//lib/parser/builders/default.rb#365
  def symbol_compose(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#360
  def symbol_internal(symbol_t); end

  # source://parser//lib/parser/builders/default.rb#469
  def symbols_compose(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#1290
  def ternary(cond, question_t, if_true, colon_t, if_false); end

  # source://parser//lib/parser/builders/default.rb#260
  def true(true_t); end

  # source://parser//lib/parser/builders/default.rb#294
  def unary_num(unary_t, numeric); end

  # source://parser//lib/parser/builders/default.rb#1236
  def unary_op(op_t, receiver); end

  # source://parser//lib/parser/builders/default.rb#866
  def undef_method(undef_t, names); end

  # source://parser//lib/parser/builders/default.rb#1497
  def unless_guard(unless_t, unless_body); end

  # source://parser//lib/parser/builders/default.rb#1297
  def when(when_t, patterns, then_t, body); end

  # source://parser//lib/parser/builders/default.rb#455
  def word(parts); end

  # source://parser//lib/parser/builders/default.rb#464
  def words_compose(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#381
  def xstring_compose(begin_t, parts, end_t); end

  private

  # source://parser//lib/parser/builders/default.rb#1804
  def arg_name_collides?(this_name, that_name); end

  # source://parser//lib/parser/builders/default.rb#2000
  def arg_prefix_map(op_t, name_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1974
  def binary_op_map(left_e, op_t, right_e); end

  # source://parser//lib/parser/builders/default.rb#2102
  def block_map(receiver_l, begin_t, end_t); end

  # source://parser//lib/parser/builders/default.rb#1779
  def check_assignment_to_numparam(name, loc); end

  # source://parser//lib/parser/builders/default.rb#1681
  def check_condition(cond); end

  # source://parser//lib/parser/builders/default.rb#1750
  def check_duplicate_arg(this_arg, map = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1725
  def check_duplicate_args(args, map = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1837
  def check_duplicate_pattern_key(name, loc); end

  # source://parser//lib/parser/builders/default.rb#1827
  def check_duplicate_pattern_variable(name, loc); end

  # source://parser//lib/parser/builders/default.rb#1819
  def check_lvar_name(name, loc); end

  # source://parser//lib/parser/builders/default.rb#1794
  def check_reserved_for_numparam(name, loc); end

  # source://parser//lib/parser/builders/default.rb#2259
  def collapse_string_parts?(parts); end

  # source://parser//lib/parser/builders/default.rb#1925
  def collection_map(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#2129
  def condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t); end

  # source://parser//lib/parser/builders/default.rb#1960
  def constant_map(scope, colon2_t, name_t); end

  # source://parser//lib/parser/builders/default.rb#2033
  def definition_map(keyword_t, operator_t, name_t, end_t); end

  # source://parser//lib/parser/builders/default.rb#1866
  def delimited_string_map(string_t); end

  # source://parser//lib/parser/builders/default.rb#2281
  def diagnostic(type, reason, arguments, location, highlights = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#2173
  def eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e); end

  # source://parser//lib/parser/builders/default.rb#2039
  def endless_definition_map(keyword_t, operator_t, name_t, assignment_t, body_e); end

  # source://parser//lib/parser/builders/default.rb#1921
  def expr_map(loc); end

  # source://parser//lib/parser/builders/default.rb#2154
  def for_map(keyword_t, in_t, begin_t, end_t); end

  # source://parser//lib/parser/builders/default.rb#2201
  def guard_map(keyword_t, guard_body_e); end

  # source://parser//lib/parser/builders/default.rb#2091
  def index_map(receiver_e, lbrack_t, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#1857
  def join_exprs(left_expr, right_expr); end

  # source://parser//lib/parser/builders/default.rb#2107
  def keyword_map(keyword_t, begin_t, args, end_t); end

  # source://parser//lib/parser/builders/default.rb#2124
  def keyword_mod_map(pre_e, keyword_t, post_e); end

  # source://parser//lib/parser/builders/default.rb#2010
  def kwarg_map(name_t, value_e = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#2312
  def kwargs?(node); end

  # source://parser//lib/parser/builders/default.rb#2276
  def loc(token); end

  # source://parser//lib/parser/builders/default.rb#2023
  def module_definition_map(keyword_t, name_e, operator_t, end_t); end

  # source://parser//lib/parser/builders/default.rb#1849
  def n(type, children, source_map); end

  # source://parser//lib/parser/builders/default.rb#1853
  def n0(type, source_map); end

  # source://parser//lib/parser/builders/default.rb#288
  def numeric(kind, token); end

  # source://parser//lib/parser/builders/default.rb#1891
  def pair_keyword_map(key_t, value_e); end

  # source://parser//lib/parser/builders/default.rb#1906
  def pair_quoted_map(begin_t, end_t, value_e); end

  # source://parser//lib/parser/builders/default.rb#1877
  def prefix_string_map(symbol); end

  # source://parser//lib/parser/builders/default.rb#1988
  def range_map(start_e, op_t, end_e); end

  # source://parser//lib/parser/builders/default.rb#1955
  def regexp_map(begin_t, end_t, options_e); end

  # source://parser//lib/parser/builders/default.rb#2160
  def rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e); end

  # source://parser//lib/parser/builders/default.rb#2302
  def rewrite_hash_args_to_kwargs(args); end

  # source://parser//lib/parser/builders/default.rb#2073
  def send_binary_op_map(lhs_e, selector_t, rhs_e); end

  # source://parser//lib/parser/builders/default.rb#2096
  def send_index_map(receiver_e, lbrack_t, rbrack_t); end

  # source://parser//lib/parser/builders/default.rb#2047
  def send_map(receiver_e, dot_t, selector_t, begin_t = T.unsafe(nil), args = T.unsafe(nil), end_t = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#2079
  def send_unary_op_map(selector_t, arg_e); end

  # source://parser//lib/parser/builders/default.rb#2232
  def static_regexp(parts, options); end

  # source://parser//lib/parser/builders/default.rb#2252
  def static_regexp_node(node); end

  # source://parser//lib/parser/builders/default.rb#2215
  def static_string(nodes); end

  # source://parser//lib/parser/builders/default.rb#1941
  def string_map(begin_t, parts, end_t); end

  # source://parser//lib/parser/builders/default.rb#2268
  def string_value(token); end

  # source://parser//lib/parser/builders/default.rb#2149
  def ternary_map(begin_e, question_t, mid_e, colon_t, end_e); end

  # source://parser//lib/parser/builders/default.rb#1862
  def token_map(token); end

  # source://parser//lib/parser/builders/default.rb#1978
  def unary_op_map(op_t, arg_e = T.unsafe(nil)); end

  # source://parser//lib/parser/builders/default.rb#1886
  def unquoted_map(token); end

  # source://parser//lib/parser/builders/default.rb#2290
  def validate_definee(definee); end

  # source://parser//lib/parser/builders/default.rb#1764
  def validate_no_forward_arg_after_restarg(args); end

  # source://parser//lib/parser/builders/default.rb#2264
  def value(token); end

  # source://parser//lib/parser/builders/default.rb#2067
  def var_send_map(variable_e); end

  # source://parser//lib/parser/builders/default.rb#1970
  def variable_map(name_t); end

  class << self
    # source://parser//lib/parser/builders/default.rb#97
    def emit_arg_inside_procarg0; end

    # source://parser//lib/parser/builders/default.rb#97
    def emit_arg_inside_procarg0=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#58
    def emit_encoding; end

    # source://parser//lib/parser/builders/default.rb#58
    def emit_encoding=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#126
    def emit_forward_arg; end

    # source://parser//lib/parser/builders/default.rb#126
    def emit_forward_arg=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#80
    def emit_index; end

    # source://parser//lib/parser/builders/default.rb#80
    def emit_index=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#174
    def emit_kwargs; end

    # source://parser//lib/parser/builders/default.rb#174
    def emit_kwargs=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#22
    def emit_lambda; end

    # source://parser//lib/parser/builders/default.rb#22
    def emit_lambda=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#203
    def emit_match_pattern; end

    # source://parser//lib/parser/builders/default.rb#203
    def emit_match_pattern=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#40
    def emit_procarg0; end

    # source://parser//lib/parser/builders/default.rb#40
    def emit_procarg0=(_arg0); end

    # source://parser//lib/parser/builders/default.rb#211
    def modernize; end
  end
end

# source://parser//lib/parser/clobbering_error.rb#11
class Parser::ClobberingError < ::RuntimeError; end

# source://parser//lib/parser/context.rb#18
class Parser::Context
  # source://parser//lib/parser/context.rb#29
  def initialize; end

  # source://parser//lib/parser/context.rb#43
  def in_argdef; end

  # source://parser//lib/parser/context.rb#43
  def in_argdef=(_arg0); end

  # source://parser//lib/parser/context.rb#43
  def in_block; end

  # source://parser//lib/parser/context.rb#43
  def in_block=(_arg0); end

  # source://parser//lib/parser/context.rb#43
  def in_class; end

  # source://parser//lib/parser/context.rb#43
  def in_class=(_arg0); end

  # source://parser//lib/parser/context.rb#43
  def in_def; end

  # source://parser//lib/parser/context.rb#43
  def in_def=(_arg0); end

  # source://parser//lib/parser/context.rb#43
  def in_defined; end

  # source://parser//lib/parser/context.rb#43
  def in_defined=(_arg0); end

  # source://parser//lib/parser/context.rb#45
  def in_dynamic_block?; end

  # source://parser//lib/parser/context.rb#43
  def in_kwarg; end

  # source://parser//lib/parser/context.rb#43
  def in_kwarg=(_arg0); end

  # source://parser//lib/parser/context.rb#43
  def in_lambda; end

  # source://parser//lib/parser/context.rb#43
  def in_lambda=(_arg0); end

  # source://parser//lib/parser/context.rb#33
  def reset; end
end

# source://parser//lib/parser/context.rb#19
Parser::Context::FLAGS = T.let(T.unsafe(nil), Array)

# source://parser//lib/parser/current_arg_stack.rb#14
class Parser::CurrentArgStack
  # source://parser//lib/parser/current_arg_stack.rb#17
  def initialize; end

  # source://parser//lib/parser/current_arg_stack.rb#22
  def empty?; end

  # source://parser//lib/parser/current_arg_stack.rb#34
  def pop; end

  # source://parser//lib/parser/current_arg_stack.rb#26
  def push(value); end

  # source://parser//lib/parser/current_arg_stack.rb#38
  def reset; end

  # source://parser//lib/parser/current_arg_stack.rb#30
  def set(value); end

  # source://parser//lib/parser/current_arg_stack.rb#15
  def stack; end

  # source://parser//lib/parser/current_arg_stack.rb#42
  def top; end
end

# source://parser//lib/parser/current.rb#111
Parser::CurrentRuby = Parser::Ruby32

# source://parser//lib/parser/deprecation.rb#7
module Parser::Deprecation
  # source://parser//lib/parser/deprecation.rb#9
  def warn_of_deprecation; end

  # source://parser//lib/parser/deprecation.rb#8
  def warned_of_deprecation=(_arg0); end
end

# source://parser//lib/parser/diagnostic.rb#31
class Parser::Diagnostic
  # source://parser//lib/parser/diagnostic.rb#49
  def initialize(level, reason, arguments, location, highlights = T.unsafe(nil)); end

  # source://parser//lib/parser/diagnostic.rb#39
  def arguments; end

  # source://parser//lib/parser/diagnostic.rb#40
  def highlights; end

  # source://parser//lib/parser/diagnostic.rb#39
  def level; end

  # source://parser//lib/parser/diagnostic.rb#40
  def location; end

  # source://parser//lib/parser/diagnostic.rb#69
  def message; end

  # source://parser//lib/parser/diagnostic.rb#39
  def reason; end

  # source://parser//lib/parser/diagnostic.rb#86
  def render; end

  private

  # source://parser//lib/parser/diagnostic.rb#142
  def first_line_only(range); end

  # source://parser//lib/parser/diagnostic.rb#155
  def last_line_only(range); end

  # source://parser//lib/parser/diagnostic.rb#110
  def render_line(range, ellipsis = T.unsafe(nil), range_end = T.unsafe(nil)); end
end

# source://parser//lib/parser/diagnostic/engine.rb#36
class Parser::Diagnostic::Engine
  # source://parser//lib/parser/diagnostic/engine.rb#45
  def initialize(consumer = T.unsafe(nil)); end

  # source://parser//lib/parser/diagnostic/engine.rb#39
  def all_errors_are_fatal; end

  # source://parser//lib/parser/diagnostic/engine.rb#39
  def all_errors_are_fatal=(_arg0); end

  # source://parser//lib/parser/diagnostic/engine.rb#37
  def consumer; end

  # source://parser//lib/parser/diagnostic/engine.rb#37
  def consumer=(_arg0); end

  # source://parser//lib/parser/diagnostic/engine.rb#40
  def ignore_warnings; end

  # source://parser//lib/parser/diagnostic/engine.rb#40
  def ignore_warnings=(_arg0); end

  # source://parser//lib/parser/diagnostic/engine.rb#64
  def process(diagnostic); end

  protected

  # source://parser//lib/parser/diagnostic/engine.rb#86
  def ignore?(diagnostic); end

  # source://parser//lib/parser/diagnostic/engine.rb#97
  def raise?(diagnostic); end
end

# source://parser//lib/parser/diagnostic.rb#37
Parser::Diagnostic::LEVELS = T.let(T.unsafe(nil), Array)

# source://parser//lib/parser/lexer-F1.rb#82
class Parser::Lexer
  # source://parser//lib/parser/lexer-F1.rb#8250
  def initialize(version); end

  # source://parser//lib/parser/lexer-F1.rb#8410
  def advance; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def cmdarg; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def cmdarg=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8248
  def cmdarg_stack; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def command_start; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def command_start=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8246
  def comments; end

  # source://parser//lib/parser/lexer-F1.rb#8246
  def comments=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def cond; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def cond=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8248
  def cond_stack; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def context; end

  # source://parser//lib/parser/lexer-F1.rb#8244
  def context=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8405
  def dedent_level; end

  # source://parser//lib/parser/lexer-F1.rb#8240
  def diagnostics; end

  # source://parser//lib/parser/lexer-F1.rb#8240
  def diagnostics=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8358
  def encoding; end

  # source://parser//lib/parser/lexer-F1.rb#8242
  def force_utf32; end

  # source://parser//lib/parser/lexer-F1.rb#8242
  def force_utf32=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8248
  def lambda_stack; end

  # source://parser//lib/parser/lexer-F1.rb#8248
  def paren_nest; end

  # source://parser//lib/parser/lexer-F1.rb#8392
  def pop_cmdarg; end

  # source://parser//lib/parser/lexer-F1.rb#8401
  def pop_cond; end

  # source://parser//lib/parser/lexer-F1.rb#8387
  def push_cmdarg; end

  # source://parser//lib/parser/lexer-F1.rb#8396
  def push_cond; end

  # source://parser//lib/parser/lexer-F1.rb#8281
  def reset(reset_state = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#8238
  def source_buffer; end

  # source://parser//lib/parser/lexer-F1.rb#8334
  def source_buffer=(source_buffer); end

  # source://parser//lib/parser/lexer-F1.rb#8379
  def state; end

  # source://parser//lib/parser/lexer-F1.rb#8383
  def state=(state); end

  # source://parser//lib/parser/lexer-F1.rb#8241
  def static_env; end

  # source://parser//lib/parser/lexer-F1.rb#8241
  def static_env=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8246
  def tokens; end

  # source://parser//lib/parser/lexer-F1.rb#8246
  def tokens=(_arg0); end

  # source://parser//lib/parser/lexer-F1.rb#8248
  def version; end

  protected

  # source://parser//lib/parser/lexer-F1.rb#14631
  def arg_or_cmdarg(cmd_state); end

  # source://parser//lib/parser/lexer-F1.rb#14693
  def check_ambiguous_slash(tm); end

  # source://parser//lib/parser/lexer-F1.rb#14655
  def diagnostic(type, reason, arguments = T.unsafe(nil), location = T.unsafe(nil), highlights = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14661
  def e_lbrace; end

  # source://parser//lib/parser/lexer-F1.rb#14605
  def emit(type, value = T.unsafe(nil), s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14714
  def emit_class_var(ts = T.unsafe(nil), te = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14742
  def emit_colon_with_digits(p, tm, diag_msg); end

  # source://parser//lib/parser/lexer-F1.rb#14639
  def emit_comment(s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14651
  def emit_comment_from_range(p, pe); end

  # source://parser//lib/parser/lexer-F1.rb#14621
  def emit_do(do_block = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14704
  def emit_global_var(ts = T.unsafe(nil), te = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14722
  def emit_instance_var(ts = T.unsafe(nil), te = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14730
  def emit_rbrace_rparen_rbrack; end

  # source://parser//lib/parser/lexer-F1.rb#14752
  def emit_singleton_class; end

  # source://parser//lib/parser/lexer-F1.rb#14615
  def emit_table(table, s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14670
  def numeric_literal_int; end

  # source://parser//lib/parser/lexer-F1.rb#14689
  def on_newline(p); end

  # source://parser//lib/parser/lexer-F1.rb#14601
  def range(s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14592
  def stack_pop; end

  # source://parser//lib/parser/lexer-F1.rb#14597
  def tok(s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-F1.rb#14588
  def version?(*versions); end

  class << self
    # source://parser//lib/parser/lexer-F1.rb#8186
    def lex_en_expr_arg; end

    # source://parser//lib/parser/lexer-F1.rb#8186
    def lex_en_expr_arg=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8202
    def lex_en_expr_beg; end

    # source://parser//lib/parser/lexer-F1.rb#8202
    def lex_en_expr_beg=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8190
    def lex_en_expr_cmdarg; end

    # source://parser//lib/parser/lexer-F1.rb#8190
    def lex_en_expr_cmdarg=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8182
    def lex_en_expr_dot; end

    # source://parser//lib/parser/lexer-F1.rb#8182
    def lex_en_expr_dot=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8214
    def lex_en_expr_end; end

    # source://parser//lib/parser/lexer-F1.rb#8214
    def lex_en_expr_end=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8194
    def lex_en_expr_endarg; end

    # source://parser//lib/parser/lexer-F1.rb#8194
    def lex_en_expr_endarg=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8178
    def lex_en_expr_endfn; end

    # source://parser//lib/parser/lexer-F1.rb#8178
    def lex_en_expr_endfn=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8174
    def lex_en_expr_fname; end

    # source://parser//lib/parser/lexer-F1.rb#8174
    def lex_en_expr_fname=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8206
    def lex_en_expr_labelarg; end

    # source://parser//lib/parser/lexer-F1.rb#8206
    def lex_en_expr_labelarg=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8198
    def lex_en_expr_mid; end

    # source://parser//lib/parser/lexer-F1.rb#8198
    def lex_en_expr_mid=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8210
    def lex_en_expr_value; end

    # source://parser//lib/parser/lexer-F1.rb#8210
    def lex_en_expr_value=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8170
    def lex_en_expr_variable; end

    # source://parser//lib/parser/lexer-F1.rb#8170
    def lex_en_expr_variable=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8230
    def lex_en_inside_string; end

    # source://parser//lib/parser/lexer-F1.rb#8230
    def lex_en_inside_string=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8218
    def lex_en_leading_dot; end

    # source://parser//lib/parser/lexer-F1.rb#8218
    def lex_en_leading_dot=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8226
    def lex_en_line_begin; end

    # source://parser//lib/parser/lexer-F1.rb#8226
    def lex_en_line_begin=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8222
    def lex_en_line_comment; end

    # source://parser//lib/parser/lexer-F1.rb#8222
    def lex_en_line_comment=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8165
    def lex_error; end

    # source://parser//lib/parser/lexer-F1.rb#8165
    def lex_error=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#8161
    def lex_start; end

    # source://parser//lib/parser/lexer-F1.rb#8161
    def lex_start=(_arg0); end

    private

    # source://parser//lib/parser/lexer-F1.rb#8064
    def _lex_eof_trans; end

    # source://parser//lib/parser/lexer-F1.rb#8064
    def _lex_eof_trans=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#7967
    def _lex_from_state_actions; end

    # source://parser//lib/parser/lexer-F1.rb#7967
    def _lex_from_state_actions=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#461
    def _lex_index_offsets; end

    # source://parser//lib/parser/lexer-F1.rb#461
    def _lex_index_offsets=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#558
    def _lex_indicies; end

    # source://parser//lib/parser/lexer-F1.rb#558
    def _lex_indicies=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#364
    def _lex_key_spans; end

    # source://parser//lib/parser/lexer-F1.rb#364
    def _lex_key_spans=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#7870
    def _lex_to_state_actions; end

    # source://parser//lib/parser/lexer-F1.rb#7870
    def _lex_to_state_actions=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#7722
    def _lex_trans_actions; end

    # source://parser//lib/parser/lexer-F1.rb#7722
    def _lex_trans_actions=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#87
    def _lex_trans_keys; end

    # source://parser//lib/parser/lexer-F1.rb#87
    def _lex_trans_keys=(_arg0); end

    # source://parser//lib/parser/lexer-F1.rb#7574
    def _lex_trans_targs; end

    # source://parser//lib/parser/lexer-F1.rb#7574
    def _lex_trans_targs=(_arg0); end
  end
end

# source://parser//lib/parser/lexer/dedenter.rb#5
class Parser::Lexer::Dedenter
  # source://parser//lib/parser/lexer/dedenter.rb#9
  def initialize(dedent_level); end

  # source://parser//lib/parser/lexer/dedenter.rb#36
  def dedent(string); end

  # source://parser//lib/parser/lexer/dedenter.rb#83
  def interrupt; end
end

# source://parser//lib/parser/lexer/dedenter.rb#7
Parser::Lexer::Dedenter::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://parser//lib/parser/lexer-F1.rb#14799
Parser::Lexer::ESCAPE_WHITESPACE = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-F1.rb#14785
Parser::Lexer::KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-F1.rb#14792
Parser::Lexer::KEYWORDS_BEGIN = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-F1.rb#8362
Parser::Lexer::LEX_STATES = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer/literal.rb#6
class Parser::Lexer::Literal
  # source://parser//lib/parser/lexer/literal.rb#40
  def initialize(lexer, str_type, delimiter, str_s, heredoc_e = T.unsafe(nil), indent = T.unsafe(nil), dedent_body = T.unsafe(nil), label_allowed = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer/literal.rb#114
  def backslash_delimited?; end

  # source://parser//lib/parser/lexer/literal.rb#37
  def dedent_level; end

  # source://parser//lib/parser/lexer/literal.rb#189
  def end_interp_brace_and_try_closing; end

  # source://parser//lib/parser/lexer/literal.rb#216
  def extend_content; end

  # source://parser//lib/parser/lexer/literal.rb#220
  def extend_space(ts, te); end

  # source://parser//lib/parser/lexer/literal.rb#195
  def extend_string(string, ts, te); end

  # source://parser//lib/parser/lexer/literal.rb#202
  def flush_string; end

  # source://parser//lib/parser/lexer/literal.rb#102
  def heredoc?; end

  # source://parser//lib/parser/lexer/literal.rb#37
  def heredoc_e; end

  # source://parser//lib/parser/lexer/literal.rb#166
  def infer_indent_level(line); end

  # source://parser//lib/parser/lexer/literal.rb#89
  def interpolate?; end

  # source://parser//lib/parser/lexer/literal.rb#122
  def munge_escape?(character); end

  # source://parser//lib/parser/lexer/literal.rb#132
  def nest_and_try_closing(delimiter, ts, te, lookahead = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer/literal.rb#106
  def plain_heredoc?; end

  # source://parser//lib/parser/lexer/literal.rb#98
  def regexp?; end

  # source://parser//lib/parser/lexer/literal.rb#38
  def saved_herebody_s; end

  # source://parser//lib/parser/lexer/literal.rb#38
  def saved_herebody_s=(_arg0); end

  # source://parser//lib/parser/lexer/literal.rb#110
  def squiggly_heredoc?; end

  # source://parser//lib/parser/lexer/literal.rb#185
  def start_interp_brace; end

  # source://parser//lib/parser/lexer/literal.rb#37
  def str_s; end

  # source://parser//lib/parser/lexer/literal.rb#230
  def supports_line_continuation_via_slash?; end

  # source://parser//lib/parser/lexer/literal.rb#118
  def type; end

  # source://parser//lib/parser/lexer/literal.rb#93
  def words?; end

  protected

  # source://parser//lib/parser/lexer/literal.rb#248
  def clear_buffer; end

  # source://parser//lib/parser/lexer/literal.rb#244
  def coerce_encoding(string); end

  # source://parser//lib/parser/lexer/literal.rb#236
  def delimiter?(delimiter); end

  # source://parser//lib/parser/lexer/literal.rb#264
  def emit(token, type, s, e); end

  # source://parser//lib/parser/lexer/literal.rb#259
  def emit_start_tok; end
end

# source://parser//lib/parser/lexer/literal.rb#7
Parser::Lexer::Literal::DELIMITERS = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer/literal.rb#9
Parser::Lexer::Literal::TYPES = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-F1.rb#14759
Parser::Lexer::PUNCTUATION = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-F1.rb#14779
Parser::Lexer::PUNCTUATION_BEGIN = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer/stack_state.rb#5
class Parser::Lexer::StackState
  # source://parser//lib/parser/lexer/stack_state.rb#6
  def initialize(name); end

  # source://parser//lib/parser/lexer/stack_state.rb#34
  def active?; end

  # source://parser//lib/parser/lexer/stack_state.rb#11
  def clear; end

  # source://parser//lib/parser/lexer/stack_state.rb#38
  def empty?; end

  # source://parser//lib/parser/lexer/stack_state.rb#42
  def inspect; end

  # source://parser//lib/parser/lexer/stack_state.rb#29
  def lexpop; end

  # source://parser//lib/parser/lexer/stack_state.rb#22
  def pop; end

  # source://parser//lib/parser/lexer/stack_state.rb#15
  def push(bit); end

  # source://parser//lib/parser/lexer/stack_state.rb#42
  def to_s; end
end

# source://parser//lib/parser/lexer-strings.rb#6
class Parser::LexerStrings
  # source://parser//lib/parser/lexer-strings.rb#3300
  def initialize(lexer, version); end

  # source://parser//lib/parser/lexer-strings.rb#3339
  def advance(p); end

  # source://parser//lib/parser/lexer-strings.rb#5069
  def close_interp_on_current_literal(p); end

  # source://parser//lib/parser/lexer-strings.rb#5043
  def continue_lexing(current_literal); end

  # source://parser//lib/parser/lexer-strings.rb#5092
  def dedent_level; end

  # source://parser//lib/parser/lexer-strings.rb#3295
  def herebody_s; end

  # source://parser//lib/parser/lexer-strings.rb#3295
  def herebody_s=(_arg0); end

  # source://parser//lib/parser/lexer-strings.rb#5047
  def literal; end

  # source://parser//lib/parser/lexer-strings.rb#5015
  def next_state_for_literal(literal); end

  # source://parser//lib/parser/lexer-strings.rb#5100
  def on_newline(p); end

  # source://parser//lib/parser/lexer-strings.rb#5051
  def pop_literal; end

  # source://parser//lib/parser/lexer-strings.rb#5009
  def push_literal(*args); end

  # source://parser//lib/parser/lexer-strings.rb#4999
  def read_character_constant(p); end

  # source://parser//lib/parser/lexer-strings.rb#3314
  def reset; end

  # source://parser//lib/parser/lexer-strings.rb#3298
  def source_buffer; end

  # source://parser//lib/parser/lexer-strings.rb#3298
  def source_buffer=(_arg0); end

  # source://parser//lib/parser/lexer-strings.rb#3298
  def source_pts; end

  # source://parser//lib/parser/lexer-strings.rb#3298
  def source_pts=(_arg0); end

  protected

  # source://parser//lib/parser/lexer-strings.rb#5397
  def check_ambiguous_slash(tm); end

  # source://parser//lib/parser/lexer-strings.rb#5408
  def check_invalid_escapes(p); end

  # source://parser//lib/parser/lexer-strings.rb#5136
  def cond; end

  # source://parser//lib/parser/lexer-strings.rb#5132
  def diagnostic(type, reason, arguments = T.unsafe(nil), location = T.unsafe(nil), highlights = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-strings.rb#5128
  def emit(type, value = T.unsafe(nil), s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-strings.rb#5387
  def emit_character_constant; end

  # source://parser//lib/parser/lexer-strings.rb#5364
  def emit_interp_var(interp_var_kind); end

  # source://parser//lib/parser/lexer-strings.rb#5140
  def emit_invalid_escapes?; end

  # source://parser//lib/parser/lexer-strings.rb#5291
  def encode_escape(ord); end

  # source://parser//lib/parser/lexer-strings.rb#5375
  def encode_escaped_char(p); end

  # source://parser//lib/parser/lexer-strings.rb#5112
  def eof_codepoint?(point); end

  # source://parser//lib/parser/lexer-strings.rb#5210
  def extend_interp_code(current_literal); end

  # source://parser//lib/parser/lexer-strings.rb#5225
  def extend_interp_digit_var; end

  # source://parser//lib/parser/lexer-strings.rb#5355
  def extend_interp_var(current_literal); end

  # source://parser//lib/parser/lexer-strings.rb#5234
  def extend_string_eol_check_eof(current_literal, pe); end

  # source://parser//lib/parser/lexer-strings.rb#5251
  def extend_string_eol_heredoc_intertwined(p); end

  # source://parser//lib/parser/lexer-strings.rb#5241
  def extend_string_eol_heredoc_line; end

  # source://parser//lib/parser/lexer-strings.rb#5267
  def extend_string_eol_words(current_literal, p); end

  # source://parser//lib/parser/lexer-strings.rb#5154
  def extend_string_escaped; end

  # source://parser//lib/parser/lexer-strings.rb#5287
  def extend_string_for_token_range(current_literal, string); end

  # source://parser//lib/parser/lexer-strings.rb#5279
  def extend_string_slice_end(lookahead); end

  # source://parser//lib/parser/lexer-strings.rb#5124
  def range(s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-strings.rb#5347
  def read_post_meta_or_ctrl_char(p); end

  # source://parser//lib/parser/lexer-strings.rb#5379
  def slash_c_char; end

  # source://parser//lib/parser/lexer-strings.rb#5383
  def slash_m_char; end

  # source://parser//lib/parser/lexer-strings.rb#5120
  def tok(s = T.unsafe(nil), e = T.unsafe(nil)); end

  # source://parser//lib/parser/lexer-strings.rb#5295
  def unescape_char(p); end

  # source://parser//lib/parser/lexer-strings.rb#5307
  def unicode_points(p); end

  # source://parser//lib/parser/lexer-strings.rb#5116
  def version?(*versions); end

  class << self
    # source://parser//lib/parser/lexer-strings.rb#3275
    def lex_en_character; end

    # source://parser//lib/parser/lexer-strings.rb#3275
    def lex_en_character=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3255
    def lex_en_interp_backslash_delimited; end

    # source://parser//lib/parser/lexer-strings.rb#3255
    def lex_en_interp_backslash_delimited=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3263
    def lex_en_interp_backslash_delimited_words; end

    # source://parser//lib/parser/lexer-strings.rb#3263
    def lex_en_interp_backslash_delimited_words=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3243
    def lex_en_interp_string; end

    # source://parser//lib/parser/lexer-strings.rb#3243
    def lex_en_interp_string=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3239
    def lex_en_interp_words; end

    # source://parser//lib/parser/lexer-strings.rb#3239
    def lex_en_interp_words=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3259
    def lex_en_plain_backslash_delimited; end

    # source://parser//lib/parser/lexer-strings.rb#3259
    def lex_en_plain_backslash_delimited=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3267
    def lex_en_plain_backslash_delimited_words; end

    # source://parser//lib/parser/lexer-strings.rb#3267
    def lex_en_plain_backslash_delimited_words=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3251
    def lex_en_plain_string; end

    # source://parser//lib/parser/lexer-strings.rb#3251
    def lex_en_plain_string=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3247
    def lex_en_plain_words; end

    # source://parser//lib/parser/lexer-strings.rb#3247
    def lex_en_plain_words=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3271
    def lex_en_regexp_modifiers; end

    # source://parser//lib/parser/lexer-strings.rb#3271
    def lex_en_regexp_modifiers=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3279
    def lex_en_unknown; end

    # source://parser//lib/parser/lexer-strings.rb#3279
    def lex_en_unknown=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3234
    def lex_error; end

    # source://parser//lib/parser/lexer-strings.rb#3234
    def lex_error=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3230
    def lex_start; end

    # source://parser//lib/parser/lexer-strings.rb#3230
    def lex_start=(_arg0); end

    private

    # source://parser//lib/parser/lexer-strings.rb#11
    def _lex_actions; end

    # source://parser//lib/parser/lexer-strings.rb#11
    def _lex_actions=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3184
    def _lex_eof_trans; end

    # source://parser//lib/parser/lexer-strings.rb#3184
    def _lex_eof_trans=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3138
    def _lex_from_state_actions; end

    # source://parser//lib/parser/lexer-strings.rb#3138
    def _lex_from_state_actions=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#244
    def _lex_index_offsets; end

    # source://parser//lib/parser/lexer-strings.rb#244
    def _lex_index_offsets=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#290
    def _lex_indicies; end

    # source://parser//lib/parser/lexer-strings.rb#290
    def _lex_indicies=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#198
    def _lex_key_spans; end

    # source://parser//lib/parser/lexer-strings.rb#198
    def _lex_key_spans=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3092
    def _lex_to_state_actions; end

    # source://parser//lib/parser/lexer-strings.rb#3092
    def _lex_to_state_actions=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#3029
    def _lex_trans_actions; end

    # source://parser//lib/parser/lexer-strings.rb#3029
    def _lex_trans_actions=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#76
    def _lex_trans_keys; end

    # source://parser//lib/parser/lexer-strings.rb#76
    def _lex_trans_keys=(_arg0); end

    # source://parser//lib/parser/lexer-strings.rb#2966
    def _lex_trans_targs; end

    # source://parser//lib/parser/lexer-strings.rb#2966
    def _lex_trans_targs=(_arg0); end
  end
end

# source://parser//lib/parser/lexer-strings.rb#3287
Parser::LexerStrings::ESCAPES = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-strings.rb#5414
Parser::LexerStrings::ESCAPE_WHITESPACE = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-strings.rb#3332
Parser::LexerStrings::LEX_STATES = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/lexer-strings.rb#3293
Parser::LexerStrings::REGEXP_META_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# source://parser//lib/parser/messages.rb#11
Parser::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/max_numparam_stack.rb#8
class Parser::MaxNumparamStack
  # source://parser//lib/parser/max_numparam_stack.rb#13
  def initialize; end

  # source://parser//lib/parser/max_numparam_stack.rb#17
  def empty?; end

  # source://parser//lib/parser/max_numparam_stack.rb#29
  def has_numparams?; end

  # source://parser//lib/parser/max_numparam_stack.rb#21
  def has_ordinary_params!; end

  # source://parser//lib/parser/max_numparam_stack.rb#25
  def has_ordinary_params?; end

  # source://parser//lib/parser/max_numparam_stack.rb#45
  def pop; end

  # source://parser//lib/parser/max_numparam_stack.rb#41
  def push(static:); end

  # source://parser//lib/parser/max_numparam_stack.rb#33
  def register(numparam); end

  # source://parser//lib/parser/max_numparam_stack.rb#9
  def stack; end

  # source://parser//lib/parser/max_numparam_stack.rb#37
  def top; end

  private

  # source://parser//lib/parser/max_numparam_stack.rb#51
  def set(value); end
end

# source://parser//lib/parser/max_numparam_stack.rb#11
Parser::MaxNumparamStack::ORDINARY_PARAMS = T.let(T.unsafe(nil), Integer)

# source://parser//lib/parser/messages.rb#107
module Parser::Messages
  class << self
    # source://parser//lib/parser/messages.rb#114
    def compile(reason, arguments); end
  end
end

# source://parser//lib/parser/meta.rb#5
module Parser::Meta; end

# source://parser//lib/parser/meta.rb#9
Parser::Meta::NODE_TYPES = T.let(T.unsafe(nil), Set)

# source://parser//lib/parser/rewriter.rb#14
class Parser::Rewriter < ::Parser::AST::Processor
  extend ::Parser::Deprecation

  # source://parser//lib/parser/rewriter.rb#98
  def initialize(*_arg0); end

  # source://parser//lib/parser/rewriter.rb#38
  def assignment?(node); end

  # source://parser//lib/parser/rewriter.rb#77
  def insert_after(range, content); end

  # source://parser//lib/parser/rewriter.rb#67
  def insert_before(range, content); end

  # source://parser//lib/parser/rewriter.rb#47
  def remove(range); end

  # source://parser//lib/parser/rewriter.rb#87
  def replace(range, content); end

  # source://parser//lib/parser/rewriter.rb#23
  def rewrite(source_buffer, ast); end

  # source://parser//lib/parser/rewriter.rb#57
  def wrap(range, before, after); end
end

# source://parser//lib/parser/rewriter.rb#91
Parser::Rewriter::DEPRECATION_WARNING = T.let(T.unsafe(nil), String)

# source://parser//lib/parser/ruby32.rb#14
class Parser::Ruby32 < ::Parser::Base
  # source://parser//lib/parser/ruby32.rb#8419
  def _reduce_1(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8473
  def _reduce_10(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9108
  def _reduce_100(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9117
  def _reduce_102(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9123
  def _reduce_103(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9129
  def _reduce_104(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9135
  def _reduce_105(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9141
  def _reduce_106(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9147
  def _reduce_107(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9153
  def _reduce_108(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9159
  def _reduce_109(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8479
  def _reduce_11(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9165
  def _reduce_110(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9175
  def _reduce_111(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9181
  def _reduce_112(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9191
  def _reduce_113(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9198
  def _reduce_114(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9205
  def _reduce_115(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9211
  def _reduce_116(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9217
  def _reduce_117(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9223
  def _reduce_118(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9229
  def _reduce_119(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8496
  def _reduce_12(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9235
  def _reduce_120(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9241
  def _reduce_121(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9247
  def _reduce_122(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9254
  def _reduce_123(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9261
  def _reduce_124(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9267
  def _reduce_125(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9275
  def _reduce_127(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9281
  def _reduce_128(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9287
  def _reduce_129(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8502
  def _reduce_13(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9303
  def _reduce_135(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9311
  def _reduce_137(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9317
  def _reduce_138(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9323
  def _reduce_139(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8508
  def _reduce_14(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8514
  def _reduce_15(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8520
  def _reduce_16(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8528
  def _reduce_18(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8534
  def _reduce_19(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8426
  def _reduce_2(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8540
  def _reduce_20(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8546
  def _reduce_21(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9471
  def _reduce_211(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9477
  def _reduce_212(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9483
  def _reduce_213(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9492
  def _reduce_214(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9501
  def _reduce_215(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9510
  def _reduce_216(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9519
  def _reduce_217(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9527
  def _reduce_218(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9535
  def _reduce_219(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8554
  def _reduce_22(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9541
  def _reduce_220(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9547
  def _reduce_221(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9553
  def _reduce_222(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9559
  def _reduce_223(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9565
  def _reduce_224(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9571
  def _reduce_225(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9577
  def _reduce_226(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9583
  def _reduce_227(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9589
  def _reduce_228(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9595
  def _reduce_229(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8562
  def _reduce_23(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9601
  def _reduce_230(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9607
  def _reduce_231(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9613
  def _reduce_232(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9621
  def _reduce_233(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9627
  def _reduce_234(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9633
  def _reduce_235(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9639
  def _reduce_236(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9645
  def _reduce_237(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9651
  def _reduce_238(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8568
  def _reduce_24(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9659
  def _reduce_240(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9665
  def _reduce_241(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9671
  def _reduce_242(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9677
  def _reduce_243(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9683
  def _reduce_244(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9689
  def _reduce_245(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9695
  def _reduce_246(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9701
  def _reduce_247(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9707
  def _reduce_248(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9713
  def _reduce_249(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8574
  def _reduce_25(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9719
  def _reduce_250(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9725
  def _reduce_251(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9731
  def _reduce_252(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9738
  def _reduce_253(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9745
  def _reduce_254(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9759
  def _reduce_255(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9779
  def _reduce_256(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9793
  def _reduce_257(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8581
  def _reduce_26(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9823
  def _reduce_263(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9829
  def _reduce_264(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9841
  def _reduce_268(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9847
  def _reduce_269(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8588
  def _reduce_27(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9855
  def _reduce_271(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9865
  def _reduce_272(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9871
  def _reduce_273(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9881
  def _reduce_274(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9891
  def _reduce_275(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9899
  def _reduce_277(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8594
  def _reduce_28(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9909
  def _reduce_280(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9915
  def _reduce_281(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9921
  def _reduce_282(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9927
  def _reduce_283(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9933
  def _reduce_284(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9940
  def _reduce_285(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9948
  def _reduce_286(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9954
  def _reduce_287(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9981
  def _reduce_288(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10002
  def _reduce_289(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8600
  def _reduce_29(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10008
  def _reduce_290(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10018
  def _reduce_291(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10024
  def _reduce_292(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10030
  def _reduce_293(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10036
  def _reduce_294(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10042
  def _reduce_295(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10052
  def _reduce_296(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10058
  def _reduce_297(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10064
  def _reduce_298(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10074
  def _reduce_299(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8435
  def _reduce_3(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8610
  def _reduce_30(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10082
  def _reduce_301(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10088
  def _reduce_302(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10094
  def _reduce_303(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10120
  def _reduce_314(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10126
  def _reduce_315(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10132
  def _reduce_316(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10140
  def _reduce_317(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10146
  def _reduce_318(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10152
  def _reduce_319(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8618
  def _reduce_32(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10158
  def _reduce_320(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10164
  def _reduce_321(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10170
  def _reduce_322(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10176
  def _reduce_323(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10182
  def _reduce_324(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10188
  def _reduce_325(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10194
  def _reduce_326(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10200
  def _reduce_327(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10206
  def _reduce_328(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10212
  def _reduce_329(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8624
  def _reduce_33(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10218
  def _reduce_330(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10224
  def _reduce_331(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10232
  def _reduce_332(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10238
  def _reduce_333(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10244
  def _reduce_334(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10256
  def _reduce_336(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10266
  def _reduce_338(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10275
  def _reduce_339(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8631
  def _reduce_34(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10284
  def _reduce_340(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10290
  def _reduce_341(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10296
  def _reduce_342(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10306
  def _reduce_343(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10316
  def _reduce_344(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10326
  def _reduce_345(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10332
  def _reduce_346(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10339
  def _reduce_347(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10355
  def _reduce_348(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10363
  def _reduce_349(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8642
  def _reduce_35(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10375
  def _reduce_350(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10382
  def _reduce_351(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10396
  def _reduce_352(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10408
  def _reduce_353(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10420
  def _reduce_354(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10426
  def _reduce_355(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10432
  def _reduce_356(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10438
  def _reduce_357(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10446
  def _reduce_359(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10452
  def _reduce_360(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10458
  def _reduce_361(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10465
  def _reduce_362(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10477
  def _reduce_365(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10489
  def _reduce_369(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8650
  def _reduce_37(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10502
  def _reduce_371(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10512
  def _reduce_374(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10518
  def _reduce_375(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10524
  def _reduce_376(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10530
  def _reduce_377(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10538
  def _reduce_379(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8656
  def _reduce_38(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10545
  def _reduce_380(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10553
  def _reduce_381(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10559
  def _reduce_382(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10565
  def _reduce_383(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10571
  def _reduce_384(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10581
  def _reduce_387(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10587
  def _reduce_388(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10593
  def _reduce_389(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8662
  def _reduce_39(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10599
  def _reduce_390(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10605
  def _reduce_391(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10611
  def _reduce_392(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10617
  def _reduce_393(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10623
  def _reduce_394(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10631
  def _reduce_396(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10640
  def _reduce_397(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10650
  def _reduce_398(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10658
  def _reduce_399(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8441
  def _reduce_4(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8671
  def _reduce_40(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10667
  def _reduce_400(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10677
  def _reduce_402(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10686
  def _reduce_403(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10696
  def _reduce_404(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10704
  def _reduce_405(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10713
  def _reduce_406(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10720
  def _reduce_407(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10728
  def _reduce_408(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10735
  def _reduce_409(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8680
  def _reduce_41(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10745
  def _reduce_411(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10751
  def _reduce_412(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10757
  def _reduce_413(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10766
  def _reduce_414(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10775
  def _reduce_415(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10781
  def _reduce_416(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10787
  def _reduce_417(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10793
  def _reduce_418(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10799
  def _reduce_419(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8689
  def _reduce_42(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10808
  def _reduce_421(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10817
  def _reduce_422(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10823
  def _reduce_423(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10839
  def _reduce_424(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10847
  def _reduce_425(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10857
  def _reduce_426(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10864
  def _reduce_427(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10871
  def _reduce_428(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10878
  def _reduce_429(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8697
  def _reduce_43(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10885
  def _reduce_430(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10892
  def _reduce_431(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10899
  def _reduce_432(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10907
  def _reduce_433(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10915
  def _reduce_434(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10927
  def _reduce_435(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10938
  def _reduce_436(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10946
  def _reduce_437(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10954
  def _reduce_438(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10962
  def _reduce_439(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8706
  def _reduce_44(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10968
  def _reduce_440(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10976
  def _reduce_441(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10984
  def _reduce_442(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10992
  def _reduce_443(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#10998
  def _reduce_444(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11004
  def _reduce_445(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11011
  def _reduce_446(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11018
  def _reduce_447(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11025
  def _reduce_448(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11032
  def _reduce_449(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8720
  def _reduce_45(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11039
  def _reduce_450(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11049
  def _reduce_451(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11056
  def _reduce_452(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11062
  def _reduce_453(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11073
  def _reduce_454(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11080
  def _reduce_455(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11088
  def _reduce_457(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11100
  def _reduce_458(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11108
  def _reduce_459(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8740
  def _reduce_46(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11115
  def _reduce_460(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11123
  def _reduce_462(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11129
  def _reduce_463(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11135
  def _reduce_464(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11143
  def _reduce_466(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11153
  def _reduce_467(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11159
  def _reduce_468(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11165
  def _reduce_469(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8754
  def _reduce_47(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11171
  def _reduce_470(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11179
  def _reduce_472(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11187
  def _reduce_474(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11195
  def _reduce_476(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11202
  def _reduce_477(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8774
  def _reduce_48(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11213
  def _reduce_480(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11221
  def _reduce_481(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11229
  def _reduce_482(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11237
  def _reduce_483(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11244
  def _reduce_484(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11252
  def _reduce_485(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11260
  def _reduce_486(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11268
  def _reduce_487(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11275
  def _reduce_488(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11281
  def _reduce_489(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11287
  def _reduce_490(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11293
  def _reduce_491(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11301
  def _reduce_492(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11309
  def _reduce_493(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11315
  def _reduce_494(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11321
  def _reduce_495(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11328
  def _reduce_496(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11334
  def _reduce_497(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11340
  def _reduce_498(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11346
  def _reduce_499(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8447
  def _reduce_5(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8782
  def _reduce_50(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11352
  def _reduce_500(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11360
  def _reduce_502(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11370
  def _reduce_503(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11380
  def _reduce_504(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11386
  def _reduce_505(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11392
  def _reduce_506(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11398
  def _reduce_507(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11404
  def _reduce_508(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11410
  def _reduce_509(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11416
  def _reduce_510(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11424
  def _reduce_512(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11430
  def _reduce_513(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11436
  def _reduce_514(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11442
  def _reduce_515(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11448
  def _reduce_516(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11454
  def _reduce_517(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11460
  def _reduce_518(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11466
  def _reduce_519(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11472
  def _reduce_520(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11478
  def _reduce_521(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11484
  def _reduce_522(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11490
  def _reduce_523(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11496
  def _reduce_524(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11504
  def _reduce_526(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11512
  def _reduce_528(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11518
  def _reduce_529(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8796
  def _reduce_53(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11524
  def _reduce_530(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11530
  def _reduce_531(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11542
  def _reduce_535(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11548
  def _reduce_536(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8802
  def _reduce_54(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11570
  def _reduce_545(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11578
  def _reduce_547(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11584
  def _reduce_548(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11596
  def _reduce_549(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8808
  def _reduce_55(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11603
  def _reduce_550(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11610
  def _reduce_551(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11616
  def _reduce_552(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11622
  def _reduce_553(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11628
  def _reduce_554(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11643
  def _reduce_555(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11649
  def _reduce_556(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11659
  def _reduce_559(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8814
  def _reduce_56(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11667
  def _reduce_561(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11679
  def _reduce_565(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11685
  def _reduce_566(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11691
  def _reduce_567(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11697
  def _reduce_568(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11704
  def _reduce_569(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8820
  def _reduce_57(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11711
  def _reduce_570(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11717
  def _reduce_571(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11724
  def _reduce_572(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11731
  def _reduce_573(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11737
  def _reduce_574(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11743
  def _reduce_575(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11749
  def _reduce_576(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11755
  def _reduce_577(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11761
  def _reduce_578(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11767
  def _reduce_579(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8832
  def _reduce_58(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11773
  def _reduce_580(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11779
  def _reduce_581(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11785
  def _reduce_582(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11791
  def _reduce_583(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11797
  def _reduce_584(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11803
  def _reduce_585(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11809
  def _reduce_586(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11815
  def _reduce_587(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11821
  def _reduce_588(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11827
  def _reduce_589(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8841
  def _reduce_59(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11833
  def _reduce_590(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11839
  def _reduce_591(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11845
  def _reduce_592(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11851
  def _reduce_593(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11857
  def _reduce_594(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11863
  def _reduce_595(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11870
  def _reduce_596(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11879
  def _reduce_597(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11885
  def _reduce_598(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11891
  def _reduce_599(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8453
  def _reduce_6(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8853
  def _reduce_60(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11903
  def _reduce_603(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11910
  def _reduce_604(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11917
  def _reduce_605(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11923
  def _reduce_606(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11934
  def _reduce_607(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11941
  def _reduce_608(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11948
  def _reduce_609(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11955
  def _reduce_610(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11962
  def _reduce_611(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11968
  def _reduce_612(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11974
  def _reduce_613(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11980
  def _reduce_614(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11986
  def _reduce_615(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#11994
  def _reduce_617(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12000
  def _reduce_618(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12006
  def _reduce_619(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12012
  def _reduce_620(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12018
  def _reduce_621(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12024
  def _reduce_622(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12030
  def _reduce_623(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12036
  def _reduce_624(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12042
  def _reduce_625(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12048
  def _reduce_626(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12054
  def _reduce_627(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12060
  def _reduce_628(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12066
  def _reduce_629(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8866
  def _reduce_63(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12072
  def _reduce_630(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12078
  def _reduce_631(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12084
  def _reduce_632(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12092
  def _reduce_634(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12099
  def _reduce_635(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12110
  def _reduce_637(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12118
  def _reduce_638(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12126
  def _reduce_639(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8872
  def _reduce_64(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12132
  def _reduce_640(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12138
  def _reduce_641(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12144
  def _reduce_642(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12150
  def _reduce_643(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12157
  def _reduce_644(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12163
  def _reduce_645(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12169
  def _reduce_646(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12178
  def _reduce_647(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12188
  def _reduce_648(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12196
  def _reduce_649(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8879
  def _reduce_65(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12205
  def _reduce_650(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12213
  def _reduce_651(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12222
  def _reduce_652(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12229
  def _reduce_653(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12237
  def _reduce_654(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12246
  def _reduce_655(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12253
  def _reduce_656(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12261
  def _reduce_657(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12268
  def _reduce_658(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12276
  def _reduce_659(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8889
  def _reduce_66(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12282
  def _reduce_660(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12288
  def _reduce_661(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12294
  def _reduce_662(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12300
  def _reduce_663(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12306
  def _reduce_664(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12312
  def _reduce_665(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12320
  def _reduce_667(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12330
  def _reduce_668(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12337
  def _reduce_669(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8895
  def _reduce_67(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12344
  def _reduce_670(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12350
  def _reduce_671(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12356
  def _reduce_672(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12362
  def _reduce_673(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12377
  def _reduce_674(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12385
  def _reduce_675(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12393
  def _reduce_676(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12400
  def _reduce_677(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12407
  def _reduce_678(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12413
  def _reduce_679(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8902
  def _reduce_68(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12419
  def _reduce_680(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12425
  def _reduce_681(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12435
  def _reduce_684(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12441
  def _reduce_685(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12449
  def _reduce_686(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12457
  def _reduce_687(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12465
  def _reduce_688(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12473
  def _reduce_689(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12479
  def _reduce_690(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12485
  def _reduce_691(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12491
  def _reduce_692(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12501
  def _reduce_695(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12509
  def _reduce_696(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12521
  def _reduce_699(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8459
  def _reduce_7(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12529
  def _reduce_700(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12537
  def _reduce_701(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12543
  def _reduce_702(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12551
  def _reduce_704(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12557
  def _reduce_705(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12565
  def _reduce_707(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12571
  def _reduce_708(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12577
  def _reduce_709(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12583
  def _reduce_710(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12589
  def _reduce_711(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12595
  def _reduce_712(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12601
  def _reduce_713(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12607
  def _reduce_714(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8914
  def _reduce_72(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12637
  def _reduce_725(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12643
  def _reduce_726(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8921
  def _reduce_73(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12657
  def _reduce_731(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12663
  def _reduce_732(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12669
  def _reduce_733(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12679
  def _reduce_736(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8928
  def _reduce_74(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12691
  def _reduce_740(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8937
  def _reduce_76(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8944
  def _reduce_77(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8955
  def _reduce_78(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8962
  def _reduce_79(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8973
  def _reduce_80(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8980
  def _reduce_81(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8991
  def _reduce_82(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8998
  def _reduce_83(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9005
  def _reduce_84(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9012
  def _reduce_85(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9019
  def _reduce_86(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9026
  def _reduce_87(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9032
  def _reduce_88(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9038
  def _reduce_89(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#8467
  def _reduce_9(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9044
  def _reduce_90(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9052
  def _reduce_92(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9059
  def _reduce_93(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9066
  def _reduce_94(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9074
  def _reduce_95(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9081
  def _reduce_96(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9089
  def _reduce_97(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9095
  def _reduce_98(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#9102
  def _reduce_99(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#12697
  def _reduce_none(val, _values, result); end

  # source://parser//lib/parser/ruby32.rb#21
  def default_encoding; end

  # source://parser//lib/parser/ruby32.rb#25
  def endless_method_name(name_t); end

  # source://parser//lib/parser/ruby32.rb#38
  def local_pop; end

  # source://parser//lib/parser/ruby32.rb#31
  def local_push; end

  # source://parser//lib/parser/ruby32.rb#45
  def try_declare_numparam(node); end

  # source://parser//lib/parser/ruby32.rb#17
  def version; end
end

# source://parser//lib/parser/ruby32.rb#8008
Parser::Ruby32::Racc_arg = T.let(T.unsafe(nil), Array)

# source://parser//lib/parser/ruby32.rb#8413
Parser::Ruby32::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://parser//lib/parser/ruby32.rb#8024
Parser::Ruby32::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

# source://parser//lib/parser.rb#30
module Parser::Source; end

# source://parser//lib/parser/source/buffer.rb#25
class Parser::Source::Buffer
  # source://parser//lib/parser/source/buffer.rb#105
  def initialize(name, first_line = T.unsafe(nil), source: T.unsafe(nil)); end

  # source://parser//lib/parser/source/buffer.rb#242
  def column_for_position(position); end

  # source://parser//lib/parser/source/buffer.rb#217
  def decompose_position(position); end

  # source://parser//lib/parser/source/buffer.rb#26
  def first_line; end

  # source://parser//lib/parser/source/buffer.rb#312
  def freeze; end

  # source://parser//lib/parser/source/buffer.rb#318
  def inspect; end

  # source://parser//lib/parser/source/buffer.rb#307
  def last_line; end

  # source://parser//lib/parser/source/buffer.rb#231
  def line_for_position(position); end

  # source://parser//lib/parser/source/buffer.rb#284
  def line_range(lineno); end

  # source://parser//lib/parser/source/buffer.rb#26
  def name; end

  # source://parser//lib/parser/source/buffer.rb#180
  def raw_source=(input); end

  # source://parser//lib/parser/source/buffer.rb#131
  def read; end

  # source://parser//lib/parser/source/buffer.rb#194
  def slice(start, length = T.unsafe(nil)); end

  # source://parser//lib/parser/source/buffer.rb#145
  def source; end

  # source://parser//lib/parser/source/buffer.rb#162
  def source=(input); end

  # source://parser//lib/parser/source/buffer.rb#273
  def source_line(lineno); end

  # source://parser//lib/parser/source/buffer.rb#252
  def source_lines; end

  # source://parser//lib/parser/source/buffer.rb#298
  def source_range; end

  private

  # source://parser//lib/parser/source/buffer.rb#348
  def bsearch(line_begins, position); end

  # source://parser//lib/parser/source/buffer.rb#325
  def line_begins; end

  # source://parser//lib/parser/source/buffer.rb#339
  def line_index_for_position(position); end

  class << self
    # source://parser//lib/parser/source/buffer.rb#51
    def recognize_encoding(string); end

    # source://parser//lib/parser/source/buffer.rb#90
    def reencode_string(input); end
  end
end

# source://parser//lib/parser/source/buffer.rb#31
Parser::Source::Buffer::ENCODING_RE = T.let(T.unsafe(nil), Regexp)

# source://parser//lib/parser/source/comment.rb#17
class Parser::Source::Comment
  # source://parser//lib/parser/source/comment.rb#67
  def initialize(range); end

  # source://parser//lib/parser/source/comment.rb#120
  def ==(other); end

  # source://parser//lib/parser/source/comment.rb#109
  def document?; end

  # source://parser//lib/parser/source/comment.rb#101
  def inline?; end

  # source://parser//lib/parser/source/comment.rb#128
  def inspect; end

  # source://parser//lib/parser/source/comment.rb#20
  def loc; end

  # source://parser//lib/parser/source/comment.rb#20
  def location; end

  # source://parser//lib/parser/source/comment.rb#18
  def text; end

  # source://parser//lib/parser/source/comment.rb#89
  def type; end

  class << self
    # source://parser//lib/parser/source/comment.rb#32
    def associate(ast, comments); end

    # source://parser//lib/parser/source/comment.rb#59
    def associate_by_identity(ast, comments); end

    # source://parser//lib/parser/source/comment.rb#46
    def associate_locations(ast, comments); end
  end
end

# source://parser//lib/parser/source/comment/associator.rb#45
class Parser::Source::Comment::Associator
  # source://parser//lib/parser/source/comment/associator.rb#51
  def initialize(ast, comments); end

  # source://parser//lib/parser/source/comment/associator.rb#92
  def associate; end

  # source://parser//lib/parser/source/comment/associator.rb#115
  def associate_by_identity; end

  # source://parser//lib/parser/source/comment/associator.rb#103
  def associate_locations; end

  # source://parser//lib/parser/source/comment/associator.rb#46
  def skip_directives; end

  # source://parser//lib/parser/source/comment/associator.rb#46
  def skip_directives=(_arg0); end

  private

  # source://parser//lib/parser/source/comment/associator.rb#182
  def advance_comment; end

  # source://parser//lib/parser/source/comment/associator.rb#214
  def advance_through_directives; end

  # source://parser//lib/parser/source/comment/associator.rb#206
  def associate_and_advance_comment(node); end

  # source://parser//lib/parser/source/comment/associator.rb#123
  def children_in_source_order(node); end

  # source://parser//lib/parser/source/comment/associator.rb#187
  def current_comment_before?(node); end

  # source://parser//lib/parser/source/comment/associator.rb#194
  def current_comment_before_end?(node); end

  # source://parser//lib/parser/source/comment/associator.rb#201
  def current_comment_decorates?(node); end

  # source://parser//lib/parser/source/comment/associator.rb#135
  def do_associate; end

  # source://parser//lib/parser/source/comment/associator.rb#166
  def process_leading_comments(node); end

  # source://parser//lib/parser/source/comment/associator.rb#173
  def process_trailing_comments(node); end

  # source://parser//lib/parser/source/comment/associator.rb#148
  def visit(node); end
end

# source://parser//lib/parser/source/comment/associator.rb#212
Parser::Source::Comment::Associator::MAGIC_COMMENT_RE = T.let(T.unsafe(nil), Regexp)

# source://parser//lib/parser/source/comment/associator.rb#122
Parser::Source::Comment::Associator::POSTFIX_TYPES = T.let(T.unsafe(nil), Set)

# source://parser//lib/parser/source/map.rb#70
class Parser::Source::Map
  # source://parser//lib/parser/source/map.rb#76
  def initialize(expression); end

  # source://parser//lib/parser/source/map.rb#140
  def ==(other); end

  # source://parser//lib/parser/source/map.rb#109
  def column; end

  # source://parser//lib/parser/source/map.rb#72
  def expression; end

  # source://parser//lib/parser/source/map.rb#99
  def first_line; end

  # source://parser//lib/parser/source/map.rb#125
  def last_column; end

  # source://parser//lib/parser/source/map.rb#117
  def last_line; end

  # source://parser//lib/parser/source/map.rb#99
  def line; end

  # source://parser//lib/parser/source/map.rb#71
  def node; end

  # source://parser//lib/parser/source/map.rb#89
  def node=(node); end

  # source://parser//lib/parser/source/map.rb#166
  def to_hash; end

  # source://parser//lib/parser/source/map.rb#132
  def with_expression(expression_l); end

  protected

  # source://parser//lib/parser/source/map.rb#180
  def update_expression(expression_l); end

  # source://parser//lib/parser/source/map.rb#176
  def with(&block); end

  private

  # source://parser//lib/parser/source/map.rb#82
  def initialize_copy(other); end
end

# source://parser//lib/parser/source/map/collection.rb#6
class Parser::Source::Map::Collection < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/collection.rb#10
  def initialize(begin_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/collection.rb#7
  def begin; end

  # source://parser//lib/parser/source/map/collection.rb#8
  def end; end
end

# source://parser//lib/parser/source/map/condition.rb#6
class Parser::Source::Map::Condition < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/condition.rb#12
  def initialize(keyword_l, begin_l, else_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/condition.rb#8
  def begin; end

  # source://parser//lib/parser/source/map/condition.rb#9
  def else; end

  # source://parser//lib/parser/source/map/condition.rb#10
  def end; end

  # source://parser//lib/parser/source/map/condition.rb#7
  def keyword; end
end

# source://parser//lib/parser/source/map/constant.rb#6
class Parser::Source::Map::Constant < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/constant.rb#11
  def initialize(double_colon, name, expression); end

  # source://parser//lib/parser/source/map/constant.rb#7
  def double_colon; end

  # source://parser//lib/parser/source/map/constant.rb#8
  def name; end

  # source://parser//lib/parser/source/map/constant.rb#9
  def operator; end

  # source://parser//lib/parser/source/map/constant.rb#20
  def with_operator(operator_l); end

  protected

  # source://parser//lib/parser/source/map/constant.rb#26
  def update_operator(operator_l); end
end

# source://parser//lib/parser/source/map/definition.rb#6
class Parser::Source::Map::Definition < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/definition.rb#12
  def initialize(keyword_l, operator_l, name_l, end_l); end

  # source://parser//lib/parser/source/map/definition.rb#10
  def end; end

  # source://parser//lib/parser/source/map/definition.rb#7
  def keyword; end

  # source://parser//lib/parser/source/map/definition.rb#9
  def name; end

  # source://parser//lib/parser/source/map/definition.rb#8
  def operator; end
end

# source://parser//lib/parser/source/map/for.rb#6
class Parser::Source::Map::For < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/for.rb#10
  def initialize(keyword_l, in_l, begin_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/for.rb#8
  def begin; end

  # source://parser//lib/parser/source/map/for.rb#8
  def end; end

  # source://parser//lib/parser/source/map/for.rb#7
  def in; end

  # source://parser//lib/parser/source/map/for.rb#7
  def keyword; end
end

# source://parser//lib/parser/source/map/heredoc.rb#6
class Parser::Source::Map::Heredoc < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/heredoc.rb#10
  def initialize(begin_l, body_l, end_l); end

  # source://parser//lib/parser/source/map/heredoc.rb#7
  def heredoc_body; end

  # source://parser//lib/parser/source/map/heredoc.rb#8
  def heredoc_end; end
end

# source://parser//lib/parser/source/map/index.rb#6
class Parser::Source::Map::Index < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/index.rb#11
  def initialize(begin_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/index.rb#7
  def begin; end

  # source://parser//lib/parser/source/map/index.rb#8
  def end; end

  # source://parser//lib/parser/source/map/index.rb#9
  def operator; end

  # source://parser//lib/parser/source/map/index.rb#21
  def with_operator(operator_l); end

  protected

  # source://parser//lib/parser/source/map/index.rb#27
  def update_operator(operator_l); end
end

# source://parser//lib/parser/source/map/keyword.rb#6
class Parser::Source::Map::Keyword < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/keyword.rb#11
  def initialize(keyword_l, begin_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/keyword.rb#8
  def begin; end

  # source://parser//lib/parser/source/map/keyword.rb#9
  def end; end

  # source://parser//lib/parser/source/map/keyword.rb#7
  def keyword; end
end

# source://parser//lib/parser/source/map/method_definition.rb#6
class Parser::Source::Map::MethodDefinition < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/method_definition.rb#13
  def initialize(keyword_l, operator_l, name_l, end_l, assignment_l, body_l); end

  # source://parser//lib/parser/source/map/method_definition.rb#11
  def assignment; end

  # source://parser//lib/parser/source/map/method_definition.rb#10
  def end; end

  # source://parser//lib/parser/source/map/method_definition.rb#7
  def keyword; end

  # source://parser//lib/parser/source/map/method_definition.rb#9
  def name; end

  # source://parser//lib/parser/source/map/method_definition.rb#8
  def operator; end
end

# source://parser//lib/parser/source/map/objc_kwarg.rb#6
class Parser::Source::Map::ObjcKwarg < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/objc_kwarg.rb#11
  def initialize(keyword_l, operator_l, argument_l, expression_l); end

  # source://parser//lib/parser/source/map/objc_kwarg.rb#9
  def argument; end

  # source://parser//lib/parser/source/map/objc_kwarg.rb#7
  def keyword; end

  # source://parser//lib/parser/source/map/objc_kwarg.rb#8
  def operator; end
end

# source://parser//lib/parser/source/map/operator.rb#6
class Parser::Source::Map::Operator < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/operator.rb#9
  def initialize(operator, expression); end

  # source://parser//lib/parser/source/map/operator.rb#7
  def operator; end
end

# source://parser//lib/parser/source/map/rescue_body.rb#6
class Parser::Source::Map::RescueBody < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/rescue_body.rb#11
  def initialize(keyword_l, assoc_l, begin_l, expression_l); end

  # source://parser//lib/parser/source/map/rescue_body.rb#8
  def assoc; end

  # source://parser//lib/parser/source/map/rescue_body.rb#9
  def begin; end

  # source://parser//lib/parser/source/map/rescue_body.rb#7
  def keyword; end
end

# source://parser//lib/parser/source/map/send.rb#6
class Parser::Source::Map::Send < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/send.rb#13
  def initialize(dot_l, selector_l, begin_l, end_l, expression_l); end

  # source://parser//lib/parser/source/map/send.rb#10
  def begin; end

  # source://parser//lib/parser/source/map/send.rb#7
  def dot; end

  # source://parser//lib/parser/source/map/send.rb#11
  def end; end

  # source://parser//lib/parser/source/map/send.rb#9
  def operator; end

  # source://parser//lib/parser/source/map/send.rb#8
  def selector; end

  # source://parser//lib/parser/source/map/send.rb#24
  def with_operator(operator_l); end

  protected

  # source://parser//lib/parser/source/map/send.rb#30
  def update_operator(operator_l); end
end

# source://parser//lib/parser/source/map/ternary.rb#6
class Parser::Source::Map::Ternary < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/ternary.rb#10
  def initialize(question_l, colon_l, expression_l); end

  # source://parser//lib/parser/source/map/ternary.rb#8
  def colon; end

  # source://parser//lib/parser/source/map/ternary.rb#7
  def question; end
end

# source://parser//lib/parser/source/map/variable.rb#6
class Parser::Source::Map::Variable < ::Parser::Source::Map
  # source://parser//lib/parser/source/map/variable.rb#10
  def initialize(name_l, expression_l = T.unsafe(nil)); end

  # source://parser//lib/parser/source/map/variable.rb#7
  def name; end

  # source://parser//lib/parser/source/map/variable.rb#8
  def operator; end

  # source://parser//lib/parser/source/map/variable.rb#19
  def with_operator(operator_l); end

  protected

  # source://parser//lib/parser/source/map/variable.rb#25
  def update_operator(operator_l); end
end

# source://parser//lib/parser/source/range.rb#26
class Parser::Source::Range
  include ::Comparable

  # source://parser//lib/parser/source/range.rb#37
  def initialize(source_buffer, begin_pos, end_pos); end

  # source://parser//lib/parser/source/range.rb#301
  def <=>(other); end

  # source://parser//lib/parser/source/range.rb#193
  def adjust(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

  # source://parser//lib/parser/source/range.rb#55
  def begin; end

  # source://parser//lib/parser/source/range.rb#30
  def begin_pos; end

  # source://parser//lib/parser/source/range.rb#92
  def column; end

  # source://parser//lib/parser/source/range.rb#114
  def column_range; end

  # source://parser//lib/parser/source/range.rb#274
  def contained?(other); end

  # source://parser//lib/parser/source/range.rb#262
  def contains?(other); end

  # source://parser//lib/parser/source/range.rb#286
  def crossing?(other); end

  # source://parser//lib/parser/source/range.rb#236
  def disjoint?(other); end

  # source://parser//lib/parser/source/range.rb#294
  def empty?; end

  # source://parser//lib/parser/source/range.rb#63
  def end; end

  # source://parser//lib/parser/source/range.rb#30
  def end_pos; end

  def eql?(_arg0); end

  # source://parser//lib/parser/source/range.rb#83
  def first_line; end

  # source://parser//lib/parser/source/range.rb#313
  def hash; end

  # source://parser//lib/parser/source/range.rb#320
  def inspect; end

  # source://parser//lib/parser/source/range.rb#220
  def intersect(other); end

  # source://parser//lib/parser/source/range.rb#141
  def is?(*what); end

  # source://parser//lib/parser/source/range.rb#209
  def join(other); end

  # source://parser//lib/parser/source/range.rb#106
  def last_column; end

  # source://parser//lib/parser/source/range.rb#99
  def last_line; end

  # source://parser//lib/parser/source/range.rb#70
  def length; end

  # source://parser//lib/parser/source/range.rb#83
  def line; end

  # source://parser//lib/parser/source/range.rb#250
  def overlaps?(other); end

  # source://parser//lib/parser/source/range.rb#201
  def resize(new_size); end

  # source://parser//lib/parser/source/range.rb#70
  def size; end

  # source://parser//lib/parser/source/range.rb#132
  def source; end

  # source://parser//lib/parser/source/range.rb#29
  def source_buffer; end

  # source://parser//lib/parser/source/range.rb#125
  def source_line; end

  # source://parser//lib/parser/source/range.rb#148
  def to_a; end

  # source://parser//lib/parser/source/range.rb#155
  def to_range; end

  # source://parser//lib/parser/source/range.rb#173
  def to_s; end

  # source://parser//lib/parser/source/range.rb#184
  def with(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end
end

# source://parser//lib/parser/source/rewriter.rb#31
class Parser::Source::Rewriter
  extend ::Parser::Deprecation

  # source://parser//lib/parser/source/rewriter.rb#39
  def initialize(source_buffer); end

  # source://parser//lib/parser/source/rewriter.rb#33
  def diagnostics; end

  # source://parser//lib/parser/source/rewriter.rb#131
  def insert_after(range, content); end

  # source://parser//lib/parser/source/rewriter.rb#153
  def insert_after_multi(range, content); end

  # source://parser//lib/parser/source/rewriter.rb#80
  def insert_before(range, content); end

  # source://parser//lib/parser/source/rewriter.rb#117
  def insert_before_multi(range, content); end

  # source://parser//lib/parser/source/rewriter.rb#178
  def process; end

  # source://parser//lib/parser/source/rewriter.rb#67
  def remove(range); end

  # source://parser//lib/parser/source/rewriter.rb#167
  def replace(range, content); end

  # source://parser//lib/parser/source/rewriter.rb#32
  def source_buffer; end

  # source://parser//lib/parser/source/rewriter.rb#216
  def transaction; end

  # source://parser//lib/parser/source/rewriter.rb#94
  def wrap(range, before, after); end

  private

  # source://parser//lib/parser/source/rewriter.rb#476
  def active_clobber; end

  # source://parser//lib/parser/source/rewriter.rb#484
  def active_clobber=(value); end

  # source://parser//lib/parser/source/rewriter.rb#480
  def active_insertions; end

  # source://parser//lib/parser/source/rewriter.rb#492
  def active_insertions=(value); end

  # source://parser//lib/parser/source/rewriter.rb#472
  def active_queue; end

  # source://parser//lib/parser/source/rewriter.rb#500
  def adjacent?(range1, range2); end

  # source://parser//lib/parser/source/rewriter.rb#351
  def adjacent_insertion_mask(range); end

  # source://parser//lib/parser/source/rewriter.rb#366
  def adjacent_insertions?(range); end

  # source://parser//lib/parser/source/rewriter.rb#347
  def adjacent_position_mask(range); end

  # source://parser//lib/parser/source/rewriter.rb#377
  def adjacent_updates?(range); end

  # source://parser//lib/parser/source/rewriter.rb#280
  def append(action); end

  # source://parser//lib/parser/source/rewriter.rb#389
  def can_merge?(action, existing); end

  # source://parser//lib/parser/source/rewriter.rb#355
  def clobbered_insertion?(insertion); end

  # source://parser//lib/parser/source/rewriter.rb#343
  def clobbered_position_mask(range); end

  # source://parser//lib/parser/source/rewriter.rb#468
  def in_transaction?; end

  # source://parser//lib/parser/source/rewriter.rb#410
  def merge_actions(action, existing); end

  # source://parser//lib/parser/source/rewriter.rb#419
  def merge_actions!(action, existing); end

  # source://parser//lib/parser/source/rewriter.rb#425
  def merge_replacements(actions); end

  # source://parser//lib/parser/source/rewriter.rb#450
  def raise_clobber_error(action, existing); end

  # source://parser//lib/parser/source/rewriter.rb#335
  def record_insertion(range); end

  # source://parser//lib/parser/source/rewriter.rb#339
  def record_replace(range); end

  # source://parser//lib/parser/source/rewriter.rb#445
  def replace_actions(old, updated); end

  # source://parser//lib/parser/source/rewriter.rb#383
  def replace_compatible_with_insertion?(replace, insertion); end
end

# source://parser//lib/parser/source/rewriter/action.rb#9
class Parser::Source::Rewriter::Action
  include ::Comparable

  # source://parser//lib/parser/source/rewriter/action.rb#15
  def initialize(range, replacement = T.unsafe(nil), allow_multiple_insertions = T.unsafe(nil), order = T.unsafe(nil)); end

  # source://parser//lib/parser/source/rewriter/action.rb#24
  def <=>(other); end

  # source://parser//lib/parser/source/rewriter/action.rb#12
  def allow_multiple_insertions; end

  # source://parser//lib/parser/source/rewriter/action.rb#12
  def allow_multiple_insertions?; end

  # source://parser//lib/parser/source/rewriter/action.rb#12
  def order; end

  # source://parser//lib/parser/source/rewriter/action.rb#12
  def range; end

  # source://parser//lib/parser/source/rewriter/action.rb#12
  def replacement; end

  # source://parser//lib/parser/source/rewriter/action.rb#30
  def to_s; end
end

# source://parser//lib/parser/source/rewriter.rb#504
Parser::Source::Rewriter::DEPRECATION_WARNING = T.let(T.unsafe(nil), String)

# source://parser//lib/parser/source/tree_rewriter.rb#91
class Parser::Source::TreeRewriter
  extend ::Parser::Deprecation

  # source://parser//lib/parser/source/tree_rewriter.rb#98
  def initialize(source_buffer, crossing_deletions: T.unsafe(nil), different_replacements: T.unsafe(nil), swallowed_insertions: T.unsafe(nil)); end

  # source://parser//lib/parser/source/tree_rewriter.rb#299
  def as_nested_actions; end

  # source://parser//lib/parser/source/tree_rewriter.rb#281
  def as_replacements; end

  # source://parser//lib/parser/source/tree_rewriter.rb#93
  def diagnostics; end

  # source://parser//lib/parser/source/tree_rewriter.rb#125
  def empty?; end

  # source://parser//lib/parser/source/tree_rewriter.rb#168
  def import!(foreign_rewriter, offset: T.unsafe(nil)); end

  # source://parser//lib/parser/source/tree_rewriter.rb#329
  def in_transaction?; end

  # source://parser//lib/parser/source/tree_rewriter.rb#242
  def insert_after(range, content); end

  # source://parser//lib/parser/source/tree_rewriter.rb#351
  def insert_after_multi(range, text); end

  # source://parser//lib/parser/source/tree_rewriter.rb#230
  def insert_before(range, content); end

  # source://parser//lib/parser/source/tree_rewriter.rb#342
  def insert_before_multi(range, text); end

  # source://parser//lib/parser/source/tree_rewriter.rb#334
  def inspect; end

  # source://parser//lib/parser/source/tree_rewriter.rb#155
  def merge(with); end

  # source://parser//lib/parser/source/tree_rewriter.rb#139
  def merge!(with); end

  # source://parser//lib/parser/source/tree_rewriter.rb#252
  def process; end

  # source://parser//lib/parser/source/tree_rewriter.rb#217
  def remove(range); end

  # source://parser//lib/parser/source/tree_rewriter.rb#193
  def replace(range, content); end

  # source://parser//lib/parser/source/tree_rewriter.rb#92
  def source_buffer; end

  # source://parser//lib/parser/source/tree_rewriter.rb#310
  def transaction; end

  # source://parser//lib/parser/source/tree_rewriter.rb#206
  def wrap(range, insert_before, insert_after); end

  protected

  # source://parser//lib/parser/source/tree_rewriter.rb#365
  def action_root; end

  private

  # source://parser//lib/parser/source/tree_rewriter.rb#369
  def action_summary; end

  # source://parser//lib/parser/source/tree_rewriter.rb#392
  def check_policy_validity; end

  # source://parser//lib/parser/source/tree_rewriter.rb#404
  def check_range_validity(range); end

  # source://parser//lib/parser/source/tree_rewriter.rb#397
  def combine(range, attributes); end

  # source://parser//lib/parser/source/tree_rewriter.rb#411
  def enforce_policy(event); end

  # source://parser//lib/parser/source/tree_rewriter.rb#418
  def trigger_policy(event, range: T.unsafe(nil), conflict: T.unsafe(nil), **arguments); end
end

# source://parser//lib/parser/source/tree_rewriter.rb#391
Parser::Source::TreeRewriter::ACTIONS = T.let(T.unsafe(nil), Array)

# source://parser//lib/parser/source/tree_rewriter/action.rb#13
class Parser::Source::TreeRewriter::Action
  # source://parser//lib/parser/source/tree_rewriter/action.rb#16
  def initialize(range, enforcer, insert_before: T.unsafe(nil), replacement: T.unsafe(nil), insert_after: T.unsafe(nil), children: T.unsafe(nil)); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#28
  def combine(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#67
  def contract; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#33
  def empty?; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#14
  def insert_after; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#14
  def insert_before; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#57
  def insertion?; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#80
  def moved(source_buffer, offset); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#49
  def nested_actions; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#40
  def ordered_replacements; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#14
  def range; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#14
  def replacement; end

  protected

  # source://parser//lib/parser/source/tree_rewriter/action.rb#158
  def analyse_hierarchy(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#145
  def bsearch_child_index(from = T.unsafe(nil)); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#224
  def call_enforcer_for_merge(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#204
  def check_fusible(action, *fusible); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#94
  def children; end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#129
  def combine_children(more_children); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#102
  def do_combine(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#135
  def fuse_deletions(action, fusible, other_sibblings); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#215
  def merge(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#110
  def place_in_hierarchy(action); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#232
  def swallow(children); end

  # source://parser//lib/parser/source/tree_rewriter/action.rb#96
  def with(range: T.unsafe(nil), enforcer: T.unsafe(nil), children: T.unsafe(nil), insert_before: T.unsafe(nil), replacement: T.unsafe(nil), insert_after: T.unsafe(nil)); end
end

# source://parser//lib/parser/source/tree_rewriter.rb#356
Parser::Source::TreeRewriter::DEPRECATION_WARNING = T.let(T.unsafe(nil), String)

# source://parser//lib/parser/source/tree_rewriter.rb#417
Parser::Source::TreeRewriter::POLICY_TO_LEVEL = T.let(T.unsafe(nil), Hash)

# source://parser//lib/parser/static_environment.rb#5
class Parser::StaticEnvironment
  # source://parser//lib/parser/static_environment.rb#11
  def initialize; end

  # source://parser//lib/parser/static_environment.rb#40
  def declare(name); end

  # source://parser//lib/parser/static_environment.rb#58
  def declare_anonymous_blockarg; end

  # source://parser//lib/parser/static_environment.rb#74
  def declare_anonymous_kwrestarg; end

  # source://parser//lib/parser/static_environment.rb#66
  def declare_anonymous_restarg; end

  # source://parser//lib/parser/static_environment.rb#50
  def declare_forward_args; end

  # source://parser//lib/parser/static_environment.rb#46
  def declared?(name); end

  # source://parser//lib/parser/static_environment.rb#62
  def declared_anonymous_blockarg?; end

  # source://parser//lib/parser/static_environment.rb#78
  def declared_anonymous_kwrestarg?; end

  # source://parser//lib/parser/static_environment.rb#70
  def declared_anonymous_restarg?; end

  # source://parser//lib/parser/static_environment.rb#54
  def declared_forward_args?; end

  # source://parser//lib/parser/static_environment.rb#82
  def empty?; end

  # source://parser//lib/parser/static_environment.rb#27
  def extend_dynamic; end

  # source://parser//lib/parser/static_environment.rb#20
  def extend_static; end

  # source://parser//lib/parser/static_environment.rb#15
  def reset; end

  # source://parser//lib/parser/static_environment.rb#34
  def unextend; end
end

# source://parser//lib/parser/static_environment.rb#7
Parser::StaticEnvironment::ANONYMOUS_BLOCKARG = T.let(T.unsafe(nil), Symbol)

# source://parser//lib/parser/static_environment.rb#9
Parser::StaticEnvironment::ANONYMOUS_KWRESTARG = T.let(T.unsafe(nil), Symbol)

# source://parser//lib/parser/static_environment.rb#8
Parser::StaticEnvironment::ANONYMOUS_RESTARG = T.let(T.unsafe(nil), Symbol)

# source://parser//lib/parser/static_environment.rb#6
Parser::StaticEnvironment::FORWARD_ARGS = T.let(T.unsafe(nil), Symbol)

# source://parser//lib/parser/syntax_error.rb#13
class Parser::SyntaxError < ::StandardError
  # source://parser//lib/parser/syntax_error.rb#16
  def initialize(diagnostic); end

  # source://parser//lib/parser/syntax_error.rb#14
  def diagnostic; end
end

# source://parser//lib/parser/tree_rewriter.rb#51
class Parser::TreeRewriter < ::Parser::AST::Processor
  # source://parser//lib/parser/tree_rewriter.rb#79
  def assignment?(node); end

  # source://parser//lib/parser/tree_rewriter.rb#118
  def insert_after(range, content); end

  # source://parser//lib/parser/tree_rewriter.rb#108
  def insert_before(range, content); end

  # source://parser//lib/parser/tree_rewriter.rb#88
  def remove(range); end

  # source://parser//lib/parser/tree_rewriter.rb#128
  def replace(range, content); end

  # source://parser//lib/parser/tree_rewriter.rb#62
  def rewrite(source_buffer, ast, **policy); end

  # source://parser//lib/parser/tree_rewriter.rb#98
  def wrap(range, before, after); end
end

# source://parser//lib/parser/version.rb#4
Parser::VERSION = T.let(T.unsafe(nil), String)

# source://parser//lib/parser/variables_stack.rb#5
class Parser::VariablesStack
  # source://parser//lib/parser/variables_stack.rb#6
  def initialize; end

  # source://parser//lib/parser/variables_stack.rb#27
  def declare(name); end

  # source://parser//lib/parser/variables_stack.rb#31
  def declared?(name); end

  # source://parser//lib/parser/variables_stack.rb#11
  def empty?; end

  # source://parser//lib/parser/variables_stack.rb#19
  def pop; end

  # source://parser//lib/parser/variables_stack.rb#15
  def push; end

  # source://parser//lib/parser/variables_stack.rb#23
  def reset; end
end
